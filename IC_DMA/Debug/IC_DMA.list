
IC_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009c74  080002ac  080002ac  000012ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08009f20  08009f20  0000af20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009f60  08009f60  0000af60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009f68  08009f68  0000af68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08009f6c  08009f6c  0000af6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  24000000  08009f70  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00013ad4  24000010  08009f80  0000b010  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24013ae4  08009f80  0000bae4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000b010  2**0
                  CONTENTS, READONLY
 10 .debug_info   00015741  00000000  00000000  0000b03e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000025b5  00000000  00000000  0002077f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000010a8  00000000  00000000  00022d38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000d1b  00000000  00000000  00023de0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000302ac  00000000  00000000  00024afb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00016fd6  00000000  00000000  00054da7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0013f5b2  00000000  00000000  0006bd7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001ab32f  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004738  00000000  00000000  001ab374  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000077  00000000  00000000  001afaac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002ac <__do_global_dtors_aux>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	4c05      	ldr	r4, [pc, #20]	@ (80002c4 <__do_global_dtors_aux+0x18>)
 80002b0:	7823      	ldrb	r3, [r4, #0]
 80002b2:	b933      	cbnz	r3, 80002c2 <__do_global_dtors_aux+0x16>
 80002b4:	4b04      	ldr	r3, [pc, #16]	@ (80002c8 <__do_global_dtors_aux+0x1c>)
 80002b6:	b113      	cbz	r3, 80002be <__do_global_dtors_aux+0x12>
 80002b8:	4804      	ldr	r0, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x20>)
 80002ba:	f3af 8000 	nop.w
 80002be:	2301      	movs	r3, #1
 80002c0:	7023      	strb	r3, [r4, #0]
 80002c2:	bd10      	pop	{r4, pc}
 80002c4:	24000010 	.word	0x24000010
 80002c8:	00000000 	.word	0x00000000
 80002cc:	08009f08 	.word	0x08009f08

080002d0 <frame_dummy>:
 80002d0:	b508      	push	{r3, lr}
 80002d2:	4b03      	ldr	r3, [pc, #12]	@ (80002e0 <frame_dummy+0x10>)
 80002d4:	b11b      	cbz	r3, 80002de <frame_dummy+0xe>
 80002d6:	4903      	ldr	r1, [pc, #12]	@ (80002e4 <frame_dummy+0x14>)
 80002d8:	4803      	ldr	r0, [pc, #12]	@ (80002e8 <frame_dummy+0x18>)
 80002da:	f3af 8000 	nop.w
 80002de:	bd08      	pop	{r3, pc}
 80002e0:	00000000 	.word	0x00000000
 80002e4:	24000014 	.word	0x24000014
 80002e8:	08009f08 	.word	0x08009f08

080002ec <__aeabi_uldivmod>:
 80002ec:	b953      	cbnz	r3, 8000304 <__aeabi_uldivmod+0x18>
 80002ee:	b94a      	cbnz	r2, 8000304 <__aeabi_uldivmod+0x18>
 80002f0:	2900      	cmp	r1, #0
 80002f2:	bf08      	it	eq
 80002f4:	2800      	cmpeq	r0, #0
 80002f6:	bf1c      	itt	ne
 80002f8:	f04f 31ff 	movne.w	r1, #4294967295
 80002fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000300:	f000 b96a 	b.w	80005d8 <__aeabi_idiv0>
 8000304:	f1ad 0c08 	sub.w	ip, sp, #8
 8000308:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800030c:	f000 f806 	bl	800031c <__udivmoddi4>
 8000310:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000314:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000318:	b004      	add	sp, #16
 800031a:	4770      	bx	lr

0800031c <__udivmoddi4>:
 800031c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000320:	9d08      	ldr	r5, [sp, #32]
 8000322:	460c      	mov	r4, r1
 8000324:	2b00      	cmp	r3, #0
 8000326:	d14e      	bne.n	80003c6 <__udivmoddi4+0xaa>
 8000328:	4694      	mov	ip, r2
 800032a:	458c      	cmp	ip, r1
 800032c:	4686      	mov	lr, r0
 800032e:	fab2 f282 	clz	r2, r2
 8000332:	d962      	bls.n	80003fa <__udivmoddi4+0xde>
 8000334:	b14a      	cbz	r2, 800034a <__udivmoddi4+0x2e>
 8000336:	f1c2 0320 	rsb	r3, r2, #32
 800033a:	4091      	lsls	r1, r2
 800033c:	fa20 f303 	lsr.w	r3, r0, r3
 8000340:	fa0c fc02 	lsl.w	ip, ip, r2
 8000344:	4319      	orrs	r1, r3
 8000346:	fa00 fe02 	lsl.w	lr, r0, r2
 800034a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800034e:	fa1f f68c 	uxth.w	r6, ip
 8000352:	fbb1 f4f7 	udiv	r4, r1, r7
 8000356:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035a:	fb07 1114 	mls	r1, r7, r4, r1
 800035e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000362:	fb04 f106 	mul.w	r1, r4, r6
 8000366:	4299      	cmp	r1, r3
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x64>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000372:	f080 8112 	bcs.w	800059a <__udivmoddi4+0x27e>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 810f 	bls.w	800059a <__udivmoddi4+0x27e>
 800037c:	3c02      	subs	r4, #2
 800037e:	4463      	add	r3, ip
 8000380:	1a59      	subs	r1, r3, r1
 8000382:	fa1f f38e 	uxth.w	r3, lr
 8000386:	fbb1 f0f7 	udiv	r0, r1, r7
 800038a:	fb07 1110 	mls	r1, r7, r0, r1
 800038e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000392:	fb00 f606 	mul.w	r6, r0, r6
 8000396:	429e      	cmp	r6, r3
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x94>
 800039a:	eb1c 0303 	adds.w	r3, ip, r3
 800039e:	f100 31ff 	add.w	r1, r0, #4294967295
 80003a2:	f080 80fc 	bcs.w	800059e <__udivmoddi4+0x282>
 80003a6:	429e      	cmp	r6, r3
 80003a8:	f240 80f9 	bls.w	800059e <__udivmoddi4+0x282>
 80003ac:	4463      	add	r3, ip
 80003ae:	3802      	subs	r0, #2
 80003b0:	1b9b      	subs	r3, r3, r6
 80003b2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11d      	cbz	r5, 80003c2 <__udivmoddi4+0xa6>
 80003ba:	40d3      	lsrs	r3, r2
 80003bc:	2200      	movs	r2, #0
 80003be:	e9c5 3200 	strd	r3, r2, [r5]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d905      	bls.n	80003d6 <__udivmoddi4+0xba>
 80003ca:	b10d      	cbz	r5, 80003d0 <__udivmoddi4+0xb4>
 80003cc:	e9c5 0100 	strd	r0, r1, [r5]
 80003d0:	2100      	movs	r1, #0
 80003d2:	4608      	mov	r0, r1
 80003d4:	e7f5      	b.n	80003c2 <__udivmoddi4+0xa6>
 80003d6:	fab3 f183 	clz	r1, r3
 80003da:	2900      	cmp	r1, #0
 80003dc:	d146      	bne.n	800046c <__udivmoddi4+0x150>
 80003de:	42a3      	cmp	r3, r4
 80003e0:	d302      	bcc.n	80003e8 <__udivmoddi4+0xcc>
 80003e2:	4290      	cmp	r0, r2
 80003e4:	f0c0 80f0 	bcc.w	80005c8 <__udivmoddi4+0x2ac>
 80003e8:	1a86      	subs	r6, r0, r2
 80003ea:	eb64 0303 	sbc.w	r3, r4, r3
 80003ee:	2001      	movs	r0, #1
 80003f0:	2d00      	cmp	r5, #0
 80003f2:	d0e6      	beq.n	80003c2 <__udivmoddi4+0xa6>
 80003f4:	e9c5 6300 	strd	r6, r3, [r5]
 80003f8:	e7e3      	b.n	80003c2 <__udivmoddi4+0xa6>
 80003fa:	2a00      	cmp	r2, #0
 80003fc:	f040 8090 	bne.w	8000520 <__udivmoddi4+0x204>
 8000400:	eba1 040c 	sub.w	r4, r1, ip
 8000404:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000408:	fa1f f78c 	uxth.w	r7, ip
 800040c:	2101      	movs	r1, #1
 800040e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000412:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000416:	fb08 4416 	mls	r4, r8, r6, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb07 f006 	mul.w	r0, r7, r6
 8000422:	4298      	cmp	r0, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x11c>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f106 34ff 	add.w	r4, r6, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x11a>
 8000430:	4298      	cmp	r0, r3
 8000432:	f200 80cd 	bhi.w	80005d0 <__udivmoddi4+0x2b4>
 8000436:	4626      	mov	r6, r4
 8000438:	1a1c      	subs	r4, r3, r0
 800043a:	fa1f f38e 	uxth.w	r3, lr
 800043e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000442:	fb08 4410 	mls	r4, r8, r0, r4
 8000446:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044a:	fb00 f707 	mul.w	r7, r0, r7
 800044e:	429f      	cmp	r7, r3
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x148>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 34ff 	add.w	r4, r0, #4294967295
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x146>
 800045c:	429f      	cmp	r7, r3
 800045e:	f200 80b0 	bhi.w	80005c2 <__udivmoddi4+0x2a6>
 8000462:	4620      	mov	r0, r4
 8000464:	1bdb      	subs	r3, r3, r7
 8000466:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046a:	e7a5      	b.n	80003b8 <__udivmoddi4+0x9c>
 800046c:	f1c1 0620 	rsb	r6, r1, #32
 8000470:	408b      	lsls	r3, r1
 8000472:	fa22 f706 	lsr.w	r7, r2, r6
 8000476:	431f      	orrs	r7, r3
 8000478:	fa20 fc06 	lsr.w	ip, r0, r6
 800047c:	fa04 f301 	lsl.w	r3, r4, r1
 8000480:	ea43 030c 	orr.w	r3, r3, ip
 8000484:	40f4      	lsrs	r4, r6
 8000486:	fa00 f801 	lsl.w	r8, r0, r1
 800048a:	0c38      	lsrs	r0, r7, #16
 800048c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000490:	fbb4 fef0 	udiv	lr, r4, r0
 8000494:	fa1f fc87 	uxth.w	ip, r7
 8000498:	fb00 441e 	mls	r4, r0, lr, r4
 800049c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a0:	fb0e f90c 	mul.w	r9, lr, ip
 80004a4:	45a1      	cmp	r9, r4
 80004a6:	fa02 f201 	lsl.w	r2, r2, r1
 80004aa:	d90a      	bls.n	80004c2 <__udivmoddi4+0x1a6>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004b2:	f080 8084 	bcs.w	80005be <__udivmoddi4+0x2a2>
 80004b6:	45a1      	cmp	r9, r4
 80004b8:	f240 8081 	bls.w	80005be <__udivmoddi4+0x2a2>
 80004bc:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	eba4 0409 	sub.w	r4, r4, r9
 80004c6:	fa1f f983 	uxth.w	r9, r3
 80004ca:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ce:	fb00 4413 	mls	r4, r0, r3, r4
 80004d2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004d6:	fb03 fc0c 	mul.w	ip, r3, ip
 80004da:	45a4      	cmp	ip, r4
 80004dc:	d907      	bls.n	80004ee <__udivmoddi4+0x1d2>
 80004de:	193c      	adds	r4, r7, r4
 80004e0:	f103 30ff 	add.w	r0, r3, #4294967295
 80004e4:	d267      	bcs.n	80005b6 <__udivmoddi4+0x29a>
 80004e6:	45a4      	cmp	ip, r4
 80004e8:	d965      	bls.n	80005b6 <__udivmoddi4+0x29a>
 80004ea:	3b02      	subs	r3, #2
 80004ec:	443c      	add	r4, r7
 80004ee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f2:	fba0 9302 	umull	r9, r3, r0, r2
 80004f6:	eba4 040c 	sub.w	r4, r4, ip
 80004fa:	429c      	cmp	r4, r3
 80004fc:	46ce      	mov	lr, r9
 80004fe:	469c      	mov	ip, r3
 8000500:	d351      	bcc.n	80005a6 <__udivmoddi4+0x28a>
 8000502:	d04e      	beq.n	80005a2 <__udivmoddi4+0x286>
 8000504:	b155      	cbz	r5, 800051c <__udivmoddi4+0x200>
 8000506:	ebb8 030e 	subs.w	r3, r8, lr
 800050a:	eb64 040c 	sbc.w	r4, r4, ip
 800050e:	fa04 f606 	lsl.w	r6, r4, r6
 8000512:	40cb      	lsrs	r3, r1
 8000514:	431e      	orrs	r6, r3
 8000516:	40cc      	lsrs	r4, r1
 8000518:	e9c5 6400 	strd	r6, r4, [r5]
 800051c:	2100      	movs	r1, #0
 800051e:	e750      	b.n	80003c2 <__udivmoddi4+0xa6>
 8000520:	f1c2 0320 	rsb	r3, r2, #32
 8000524:	fa20 f103 	lsr.w	r1, r0, r3
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	fa24 f303 	lsr.w	r3, r4, r3
 8000530:	4094      	lsls	r4, r2
 8000532:	430c      	orrs	r4, r1
 8000534:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000538:	fa00 fe02 	lsl.w	lr, r0, r2
 800053c:	fa1f f78c 	uxth.w	r7, ip
 8000540:	fbb3 f0f8 	udiv	r0, r3, r8
 8000544:	fb08 3110 	mls	r1, r8, r0, r3
 8000548:	0c23      	lsrs	r3, r4, #16
 800054a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800054e:	fb00 f107 	mul.w	r1, r0, r7
 8000552:	4299      	cmp	r1, r3
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x24c>
 8000556:	eb1c 0303 	adds.w	r3, ip, r3
 800055a:	f100 36ff 	add.w	r6, r0, #4294967295
 800055e:	d22c      	bcs.n	80005ba <__udivmoddi4+0x29e>
 8000560:	4299      	cmp	r1, r3
 8000562:	d92a      	bls.n	80005ba <__udivmoddi4+0x29e>
 8000564:	3802      	subs	r0, #2
 8000566:	4463      	add	r3, ip
 8000568:	1a5b      	subs	r3, r3, r1
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000570:	fb08 3311 	mls	r3, r8, r1, r3
 8000574:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000578:	fb01 f307 	mul.w	r3, r1, r7
 800057c:	42a3      	cmp	r3, r4
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x276>
 8000580:	eb1c 0404 	adds.w	r4, ip, r4
 8000584:	f101 36ff 	add.w	r6, r1, #4294967295
 8000588:	d213      	bcs.n	80005b2 <__udivmoddi4+0x296>
 800058a:	42a3      	cmp	r3, r4
 800058c:	d911      	bls.n	80005b2 <__udivmoddi4+0x296>
 800058e:	3902      	subs	r1, #2
 8000590:	4464      	add	r4, ip
 8000592:	1ae4      	subs	r4, r4, r3
 8000594:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000598:	e739      	b.n	800040e <__udivmoddi4+0xf2>
 800059a:	4604      	mov	r4, r0
 800059c:	e6f0      	b.n	8000380 <__udivmoddi4+0x64>
 800059e:	4608      	mov	r0, r1
 80005a0:	e706      	b.n	80003b0 <__udivmoddi4+0x94>
 80005a2:	45c8      	cmp	r8, r9
 80005a4:	d2ae      	bcs.n	8000504 <__udivmoddi4+0x1e8>
 80005a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80005aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80005ae:	3801      	subs	r0, #1
 80005b0:	e7a8      	b.n	8000504 <__udivmoddi4+0x1e8>
 80005b2:	4631      	mov	r1, r6
 80005b4:	e7ed      	b.n	8000592 <__udivmoddi4+0x276>
 80005b6:	4603      	mov	r3, r0
 80005b8:	e799      	b.n	80004ee <__udivmoddi4+0x1d2>
 80005ba:	4630      	mov	r0, r6
 80005bc:	e7d4      	b.n	8000568 <__udivmoddi4+0x24c>
 80005be:	46d6      	mov	lr, sl
 80005c0:	e77f      	b.n	80004c2 <__udivmoddi4+0x1a6>
 80005c2:	4463      	add	r3, ip
 80005c4:	3802      	subs	r0, #2
 80005c6:	e74d      	b.n	8000464 <__udivmoddi4+0x148>
 80005c8:	4606      	mov	r6, r0
 80005ca:	4623      	mov	r3, r4
 80005cc:	4608      	mov	r0, r1
 80005ce:	e70f      	b.n	80003f0 <__udivmoddi4+0xd4>
 80005d0:	3e02      	subs	r6, #2
 80005d2:	4463      	add	r3, ip
 80005d4:	e730      	b.n	8000438 <__udivmoddi4+0x11c>
 80005d6:	bf00      	nop

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <HAL_TIM_IC_CaptureCallback>:
float width = 0;

int isMeasured = 0;

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80005dc:	b480      	push	{r7}
 80005de:	b08b      	sub	sp, #44	@ 0x2c
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
	// If the Interrupt is triggered by 1st Channel
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	7f1b      	ldrb	r3, [r3, #28]
 80005e8:	2b01      	cmp	r3, #1
 80005ea:	d102      	bne.n	80005f2 <HAL_TIM_IC_CaptureCallback+0x16>
	{
		riseCaptured = 1;
 80005ec:	4b8f      	ldr	r3, [pc, #572]	@ (800082c <HAL_TIM_IC_CaptureCallback+0x250>)
 80005ee:	2201      	movs	r2, #1
 80005f0:	601a      	str	r2, [r3, #0]
	}

	// If the Interrupt is triggered by 2nd Channel
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	7f1b      	ldrb	r3, [r3, #28]
 80005f6:	2b02      	cmp	r3, #2
 80005f8:	d102      	bne.n	8000600 <HAL_TIM_IC_CaptureCallback+0x24>
	{
		fallCaptured = 1;
 80005fa:	4b8d      	ldr	r3, [pc, #564]	@ (8000830 <HAL_TIM_IC_CaptureCallback+0x254>)
 80005fc:	2201      	movs	r2, #1
 80005fe:	601a      	str	r2, [r3, #0]
	}


	/* Rest of the calculations will be done,
	 * once both the DMAs have finished capturing enough data */
	if ((riseCaptured) && (fallCaptured))
 8000600:	4b8a      	ldr	r3, [pc, #552]	@ (800082c <HAL_TIM_IC_CaptureCallback+0x250>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	2b00      	cmp	r3, #0
 8000606:	f000 81dc 	beq.w	80009c2 <HAL_TIM_IC_CaptureCallback+0x3e6>
 800060a:	4b89      	ldr	r3, [pc, #548]	@ (8000830 <HAL_TIM_IC_CaptureCallback+0x254>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	2b00      	cmp	r3, #0
 8000610:	f000 81d7 	beq.w	80009c2 <HAL_TIM_IC_CaptureCallback+0x3e6>
	{

		// calculate the reference clock
		float refClock = TIMCLOCK/(PSCALAR+1);
 8000614:	4b87      	ldr	r3, [pc, #540]	@ (8000834 <HAL_TIM_IC_CaptureCallback+0x258>)
 8000616:	60fb      	str	r3, [r7, #12]

		int indxr = 0;
 8000618:	2300      	movs	r3, #0
 800061a:	627b      	str	r3, [r7, #36]	@ 0x24
		int indxf = 0;
 800061c:	2300      	movs	r3, #0
 800061e:	623b      	str	r3, [r7, #32]

		int countr = 0;
 8000620:	2300      	movs	r3, #0
 8000622:	61fb      	str	r3, [r7, #28]
		int countrf = 0;
 8000624:	2300      	movs	r3, #0
 8000626:	61bb      	str	r3, [r7, #24]

		float riseavg = 0;
 8000628:	f04f 0300 	mov.w	r3, #0
 800062c:	617b      	str	r3, [r7, #20]
		float rfavg = 0;
 800062e:	f04f 0300 	mov.w	r3, #0
 8000632:	613b      	str	r3, [r7, #16]

		/* In case of high Frequencies, the DMA sometimes captures 0's in the beginning.
		 * increment the index until some useful data shows up
		 */
		while (riseData[indxr] == 0) indxr++;
 8000634:	e002      	b.n	800063c <HAL_TIM_IC_CaptureCallback+0x60>
 8000636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000638:	3301      	adds	r3, #1
 800063a:	627b      	str	r3, [r7, #36]	@ 0x24
 800063c:	4a7e      	ldr	r2, [pc, #504]	@ (8000838 <HAL_TIM_IC_CaptureCallback+0x25c>)
 800063e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000640:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000644:	2b00      	cmp	r3, #0
 8000646:	d0f6      	beq.n	8000636 <HAL_TIM_IC_CaptureCallback+0x5a>

		/* Again at very high frequencies, sometimes the values don't change
		 * So we will wait for the update among the values
		 */
		while ((MIN((riseData[indxr+1]-riseData[indxr]), (riseData[indxr+2]-riseData[indxr+1]))) == 0) indxr++;
 8000648:	e002      	b.n	8000650 <HAL_TIM_IC_CaptureCallback+0x74>
 800064a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800064c:	3301      	adds	r3, #1
 800064e:	627b      	str	r3, [r7, #36]	@ 0x24
 8000650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000652:	3302      	adds	r3, #2
 8000654:	4a78      	ldr	r2, [pc, #480]	@ (8000838 <HAL_TIM_IC_CaptureCallback+0x25c>)
 8000656:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800065a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800065c:	3301      	adds	r3, #1
 800065e:	4976      	ldr	r1, [pc, #472]	@ (8000838 <HAL_TIM_IC_CaptureCallback+0x25c>)
 8000660:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000664:	1ad2      	subs	r2, r2, r3
 8000666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000668:	3301      	adds	r3, #1
 800066a:	4973      	ldr	r1, [pc, #460]	@ (8000838 <HAL_TIM_IC_CaptureCallback+0x25c>)
 800066c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8000670:	4871      	ldr	r0, [pc, #452]	@ (8000838 <HAL_TIM_IC_CaptureCallback+0x25c>)
 8000672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000674:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8000678:	1acb      	subs	r3, r1, r3
 800067a:	4293      	cmp	r3, r2
 800067c:	bf28      	it	cs
 800067e:	4613      	movcs	r3, r2
 8000680:	2b00      	cmp	r3, #0
 8000682:	d0e2      	beq.n	800064a <HAL_TIM_IC_CaptureCallback+0x6e>

		/* riseavg is the difference in the 2 consecutive rise Time */

		/* Assign a start value to riseavg */
		riseavg += MIN((riseData[indxr+1]-riseData[indxr]), (riseData[indxr+2]-riseData[indxr+1]));
 8000684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000686:	3301      	adds	r3, #1
 8000688:	4a6b      	ldr	r2, [pc, #428]	@ (8000838 <HAL_TIM_IC_CaptureCallback+0x25c>)
 800068a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800068e:	496a      	ldr	r1, [pc, #424]	@ (8000838 <HAL_TIM_IC_CaptureCallback+0x25c>)
 8000690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000692:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000696:	1ad2      	subs	r2, r2, r3
 8000698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800069a:	3302      	adds	r3, #2
 800069c:	4966      	ldr	r1, [pc, #408]	@ (8000838 <HAL_TIM_IC_CaptureCallback+0x25c>)
 800069e:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80006a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006a4:	3301      	adds	r3, #1
 80006a6:	4864      	ldr	r0, [pc, #400]	@ (8000838 <HAL_TIM_IC_CaptureCallback+0x25c>)
 80006a8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80006ac:	1acb      	subs	r3, r1, r3
 80006ae:	429a      	cmp	r2, r3
 80006b0:	d20e      	bcs.n	80006d0 <HAL_TIM_IC_CaptureCallback+0xf4>
 80006b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006b4:	3301      	adds	r3, #1
 80006b6:	4a60      	ldr	r2, [pc, #384]	@ (8000838 <HAL_TIM_IC_CaptureCallback+0x25c>)
 80006b8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80006bc:	495e      	ldr	r1, [pc, #376]	@ (8000838 <HAL_TIM_IC_CaptureCallback+0x25c>)
 80006be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006c0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80006c4:	1ad3      	subs	r3, r2, r3
 80006c6:	ee07 3a90 	vmov	s15, r3
 80006ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80006ce:	e00e      	b.n	80006ee <HAL_TIM_IC_CaptureCallback+0x112>
 80006d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006d2:	3302      	adds	r3, #2
 80006d4:	4a58      	ldr	r2, [pc, #352]	@ (8000838 <HAL_TIM_IC_CaptureCallback+0x25c>)
 80006d6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80006da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006dc:	3301      	adds	r3, #1
 80006de:	4956      	ldr	r1, [pc, #344]	@ (8000838 <HAL_TIM_IC_CaptureCallback+0x25c>)
 80006e0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80006e4:	1ad3      	subs	r3, r2, r3
 80006e6:	ee07 3a90 	vmov	s15, r3
 80006ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80006ee:	ed97 7a05 	vldr	s14, [r7, #20]
 80006f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80006f6:	edc7 7a05 	vstr	s15, [r7, #20]
		indxr++;
 80006fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006fc:	3301      	adds	r3, #1
 80006fe:	627b      	str	r3, [r7, #36]	@ 0x24
		countr++;
 8000700:	69fb      	ldr	r3, [r7, #28]
 8000702:	3301      	adds	r3, #1
 8000704:	61fb      	str	r3, [r7, #28]

		/* start adding the values to the riseavg */
		while (indxr < (numval))
 8000706:	e03f      	b.n	8000788 <HAL_TIM_IC_CaptureCallback+0x1ac>
		{
			riseavg += MIN((riseData[indxr+1]-riseData[indxr]), riseavg/countr);
 8000708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800070a:	3301      	adds	r3, #1
 800070c:	4a4a      	ldr	r2, [pc, #296]	@ (8000838 <HAL_TIM_IC_CaptureCallback+0x25c>)
 800070e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000712:	4949      	ldr	r1, [pc, #292]	@ (8000838 <HAL_TIM_IC_CaptureCallback+0x25c>)
 8000714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000716:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800071a:	1ad3      	subs	r3, r2, r3
 800071c:	ee07 3a90 	vmov	s15, r3
 8000720:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000724:	69fb      	ldr	r3, [r7, #28]
 8000726:	ee07 3a90 	vmov	s15, r3
 800072a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800072e:	ed97 6a05 	vldr	s12, [r7, #20]
 8000732:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8000736:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800073a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800073e:	d50e      	bpl.n	800075e <HAL_TIM_IC_CaptureCallback+0x182>
 8000740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000742:	3301      	adds	r3, #1
 8000744:	4a3c      	ldr	r2, [pc, #240]	@ (8000838 <HAL_TIM_IC_CaptureCallback+0x25c>)
 8000746:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800074a:	493b      	ldr	r1, [pc, #236]	@ (8000838 <HAL_TIM_IC_CaptureCallback+0x25c>)
 800074c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800074e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000752:	1ad3      	subs	r3, r2, r3
 8000754:	ee07 3a90 	vmov	s15, r3
 8000758:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800075c:	e008      	b.n	8000770 <HAL_TIM_IC_CaptureCallback+0x194>
 800075e:	69fb      	ldr	r3, [r7, #28]
 8000760:	ee07 3a90 	vmov	s15, r3
 8000764:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000768:	edd7 6a05 	vldr	s13, [r7, #20]
 800076c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000770:	ed97 7a05 	vldr	s14, [r7, #20]
 8000774:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000778:	edc7 7a05 	vstr	s15, [r7, #20]
			countr++;
 800077c:	69fb      	ldr	r3, [r7, #28]
 800077e:	3301      	adds	r3, #1
 8000780:	61fb      	str	r3, [r7, #28]
			indxr++;
 8000782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000784:	3301      	adds	r3, #1
 8000786:	627b      	str	r3, [r7, #36]	@ 0x24
		while (indxr < (numval))
 8000788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800078a:	f242 720f 	movw	r2, #9999	@ 0x270f
 800078e:	4293      	cmp	r3, r2
 8000790:	ddba      	ble.n	8000708 <HAL_TIM_IC_CaptureCallback+0x12c>
		}

		/* Find the average riseavg, the average time between 2 RISE */
		riseavg = riseavg/countr;
 8000792:	69fb      	ldr	r3, [r7, #28]
 8000794:	ee07 3a90 	vmov	s15, r3
 8000798:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800079c:	edd7 6a05 	vldr	s13, [r7, #20]
 80007a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80007a4:	edc7 7a05 	vstr	s15, [r7, #20]

		indxr = 0;
 80007a8:	2300      	movs	r3, #0
 80007aa:	627b      	str	r3, [r7, #36]	@ 0x24

		/* If the fall time is lower than rise time,
		 * Then there must be some error and we will increment
		 * both, until the error is gone
		 */
		if (fallData[indxf] < riseData[indxr])
 80007ac:	4a23      	ldr	r2, [pc, #140]	@ (800083c <HAL_TIM_IC_CaptureCallback+0x260>)
 80007ae:	6a3b      	ldr	r3, [r7, #32]
 80007b0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80007b4:	4920      	ldr	r1, [pc, #128]	@ (8000838 <HAL_TIM_IC_CaptureCallback+0x25c>)
 80007b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007b8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80007bc:	429a      	cmp	r2, r3
 80007be:	d214      	bcs.n	80007ea <HAL_TIM_IC_CaptureCallback+0x20e>
		{
			indxf+=2; indxr+=2;
 80007c0:	6a3b      	ldr	r3, [r7, #32]
 80007c2:	3302      	adds	r3, #2
 80007c4:	623b      	str	r3, [r7, #32]
 80007c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007c8:	3302      	adds	r3, #2
 80007ca:	627b      	str	r3, [r7, #36]	@ 0x24
			while (fallData[indxf] < riseData[indxr]) indxf++;
 80007cc:	e002      	b.n	80007d4 <HAL_TIM_IC_CaptureCallback+0x1f8>
 80007ce:	6a3b      	ldr	r3, [r7, #32]
 80007d0:	3301      	adds	r3, #1
 80007d2:	623b      	str	r3, [r7, #32]
 80007d4:	4a19      	ldr	r2, [pc, #100]	@ (800083c <HAL_TIM_IC_CaptureCallback+0x260>)
 80007d6:	6a3b      	ldr	r3, [r7, #32]
 80007d8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80007dc:	4916      	ldr	r1, [pc, #88]	@ (8000838 <HAL_TIM_IC_CaptureCallback+0x25c>)
 80007de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007e0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80007e4:	429a      	cmp	r2, r3
 80007e6:	d3f2      	bcc.n	80007ce <HAL_TIM_IC_CaptureCallback+0x1f2>
 80007e8:	e0a9      	b.n	800093e <HAL_TIM_IC_CaptureCallback+0x362>
		}

		else if (fallData[indxf] > riseData[indxr])
 80007ea:	4a14      	ldr	r2, [pc, #80]	@ (800083c <HAL_TIM_IC_CaptureCallback+0x260>)
 80007ec:	6a3b      	ldr	r3, [r7, #32]
 80007ee:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80007f2:	4911      	ldr	r1, [pc, #68]	@ (8000838 <HAL_TIM_IC_CaptureCallback+0x25c>)
 80007f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007f6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80007fa:	429a      	cmp	r2, r3
 80007fc:	f240 809f 	bls.w	800093e <HAL_TIM_IC_CaptureCallback+0x362>
		{
			indxf+=2; indxr+=2;
 8000800:	6a3b      	ldr	r3, [r7, #32]
 8000802:	3302      	adds	r3, #2
 8000804:	623b      	str	r3, [r7, #32]
 8000806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000808:	3302      	adds	r3, #2
 800080a:	627b      	str	r3, [r7, #36]	@ 0x24
			while (fallData[indxf] > riseData[indxr+1]) indxr++;
 800080c:	e002      	b.n	8000814 <HAL_TIM_IC_CaptureCallback+0x238>
 800080e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000810:	3301      	adds	r3, #1
 8000812:	627b      	str	r3, [r7, #36]	@ 0x24
 8000814:	4a09      	ldr	r2, [pc, #36]	@ (800083c <HAL_TIM_IC_CaptureCallback+0x260>)
 8000816:	6a3b      	ldr	r3, [r7, #32]
 8000818:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800081c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800081e:	3301      	adds	r3, #1
 8000820:	4905      	ldr	r1, [pc, #20]	@ (8000838 <HAL_TIM_IC_CaptureCallback+0x25c>)
 8000822:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000826:	429a      	cmp	r2, r3
 8000828:	d8f1      	bhi.n	800080e <HAL_TIM_IC_CaptureCallback+0x232>
		/* The method used for the calculation below is as follows:
		 * If Fall time < Rise Time, increment Fall counter
		 * If Fall time - Rise Time is in between 0 and (difference between 2 Rise times), then its a success
		 * If fall time > Rise time, but is also > (difference between 2 Rise times), then increment Rise Counter
		 */
		while ((indxf < (numval)) && (indxr < (numval)))
 800082a:	e088      	b.n	800093e <HAL_TIM_IC_CaptureCallback+0x362>
 800082c:	24000248 	.word	0x24000248
 8000830:	2400024c 	.word	0x2400024c
 8000834:	4d3ebc20 	.word	0x4d3ebc20
 8000838:	24000250 	.word	0x24000250
 800083c:	24009e90 	.word	0x24009e90
		{
			/* If the Fall time is lower than rise time, increment the fall indx */
			while ((int16_t)(fallData[indxf]-riseData[indxr]) < 0)
			{
				indxf++;
 8000840:	6a3b      	ldr	r3, [r7, #32]
 8000842:	3301      	adds	r3, #1
 8000844:	623b      	str	r3, [r7, #32]
			while ((int16_t)(fallData[indxf]-riseData[indxr]) < 0)
 8000846:	4a62      	ldr	r2, [pc, #392]	@ (80009d0 <HAL_TIM_IC_CaptureCallback+0x3f4>)
 8000848:	6a3b      	ldr	r3, [r7, #32]
 800084a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800084e:	b29a      	uxth	r2, r3
 8000850:	4960      	ldr	r1, [pc, #384]	@ (80009d4 <HAL_TIM_IC_CaptureCallback+0x3f8>)
 8000852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000854:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000858:	b29b      	uxth	r3, r3
 800085a:	1ad3      	subs	r3, r2, r3
 800085c:	b29b      	uxth	r3, r3
 800085e:	b21b      	sxth	r3, r3
 8000860:	2b00      	cmp	r3, #0
 8000862:	dbed      	blt.n	8000840 <HAL_TIM_IC_CaptureCallback+0x264>
			}

			/* If the Difference in fall time and rise time is >0 and less than rise average,
			 * Then we will register it as a success and increment the countrf (the number of successes)
			 */
			if (((int16_t)(fallData[indxf]-riseData[indxr]) >= 0) && (((int16_t)(fallData[indxf]-riseData[indxr]) <= riseavg)))
 8000864:	4a5a      	ldr	r2, [pc, #360]	@ (80009d0 <HAL_TIM_IC_CaptureCallback+0x3f4>)
 8000866:	6a3b      	ldr	r3, [r7, #32]
 8000868:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800086c:	b29a      	uxth	r2, r3
 800086e:	4959      	ldr	r1, [pc, #356]	@ (80009d4 <HAL_TIM_IC_CaptureCallback+0x3f8>)
 8000870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000872:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000876:	b29b      	uxth	r3, r3
 8000878:	1ad3      	subs	r3, r2, r3
 800087a:	b29b      	uxth	r3, r3
 800087c:	b21b      	sxth	r3, r3
 800087e:	2b00      	cmp	r3, #0
 8000880:	db5a      	blt.n	8000938 <HAL_TIM_IC_CaptureCallback+0x35c>
 8000882:	4a53      	ldr	r2, [pc, #332]	@ (80009d0 <HAL_TIM_IC_CaptureCallback+0x3f4>)
 8000884:	6a3b      	ldr	r3, [r7, #32]
 8000886:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800088a:	b29a      	uxth	r2, r3
 800088c:	4951      	ldr	r1, [pc, #324]	@ (80009d4 <HAL_TIM_IC_CaptureCallback+0x3f8>)
 800088e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000890:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000894:	b29b      	uxth	r3, r3
 8000896:	1ad3      	subs	r3, r2, r3
 8000898:	b29b      	uxth	r3, r3
 800089a:	b21b      	sxth	r3, r3
 800089c:	ee07 3a90 	vmov	s15, r3
 80008a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008a4:	ed97 7a05 	vldr	s14, [r7, #20]
 80008a8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80008ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008b0:	db42      	blt.n	8000938 <HAL_TIM_IC_CaptureCallback+0x35c>
			{
				rfavg += MIN((fallData[indxf]-riseData[indxr]), (fallData[indxf+1]-riseData[indxr+1]));
 80008b2:	4a47      	ldr	r2, [pc, #284]	@ (80009d0 <HAL_TIM_IC_CaptureCallback+0x3f4>)
 80008b4:	6a3b      	ldr	r3, [r7, #32]
 80008b6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80008ba:	4946      	ldr	r1, [pc, #280]	@ (80009d4 <HAL_TIM_IC_CaptureCallback+0x3f8>)
 80008bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008be:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80008c2:	1ad2      	subs	r2, r2, r3
 80008c4:	6a3b      	ldr	r3, [r7, #32]
 80008c6:	3301      	adds	r3, #1
 80008c8:	4941      	ldr	r1, [pc, #260]	@ (80009d0 <HAL_TIM_IC_CaptureCallback+0x3f4>)
 80008ca:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80008ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008d0:	3301      	adds	r3, #1
 80008d2:	4840      	ldr	r0, [pc, #256]	@ (80009d4 <HAL_TIM_IC_CaptureCallback+0x3f8>)
 80008d4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80008d8:	1acb      	subs	r3, r1, r3
 80008da:	429a      	cmp	r2, r3
 80008dc:	d20d      	bcs.n	80008fa <HAL_TIM_IC_CaptureCallback+0x31e>
 80008de:	4a3c      	ldr	r2, [pc, #240]	@ (80009d0 <HAL_TIM_IC_CaptureCallback+0x3f4>)
 80008e0:	6a3b      	ldr	r3, [r7, #32]
 80008e2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80008e6:	493b      	ldr	r1, [pc, #236]	@ (80009d4 <HAL_TIM_IC_CaptureCallback+0x3f8>)
 80008e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008ea:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80008ee:	1ad3      	subs	r3, r2, r3
 80008f0:	ee07 3a90 	vmov	s15, r3
 80008f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80008f8:	e00e      	b.n	8000918 <HAL_TIM_IC_CaptureCallback+0x33c>
 80008fa:	6a3b      	ldr	r3, [r7, #32]
 80008fc:	3301      	adds	r3, #1
 80008fe:	4a34      	ldr	r2, [pc, #208]	@ (80009d0 <HAL_TIM_IC_CaptureCallback+0x3f4>)
 8000900:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000906:	3301      	adds	r3, #1
 8000908:	4932      	ldr	r1, [pc, #200]	@ (80009d4 <HAL_TIM_IC_CaptureCallback+0x3f8>)
 800090a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800090e:	1ad3      	subs	r3, r2, r3
 8000910:	ee07 3a90 	vmov	s15, r3
 8000914:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000918:	ed97 7a04 	vldr	s14, [r7, #16]
 800091c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000920:	edc7 7a04 	vstr	s15, [r7, #16]
				indxf++;
 8000924:	6a3b      	ldr	r3, [r7, #32]
 8000926:	3301      	adds	r3, #1
 8000928:	623b      	str	r3, [r7, #32]
				indxr++;
 800092a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800092c:	3301      	adds	r3, #1
 800092e:	627b      	str	r3, [r7, #36]	@ 0x24
				countrf++;
 8000930:	69bb      	ldr	r3, [r7, #24]
 8000932:	3301      	adds	r3, #1
 8000934:	61bb      	str	r3, [r7, #24]
 8000936:	e002      	b.n	800093e <HAL_TIM_IC_CaptureCallback+0x362>
			}

			else
			{
				indxr++;
 8000938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800093a:	3301      	adds	r3, #1
 800093c:	627b      	str	r3, [r7, #36]	@ 0x24
		while ((indxf < (numval)) && (indxr < (numval)))
 800093e:	6a3b      	ldr	r3, [r7, #32]
 8000940:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000944:	4293      	cmp	r3, r2
 8000946:	dc05      	bgt.n	8000954 <HAL_TIM_IC_CaptureCallback+0x378>
 8000948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800094a:	f242 720f 	movw	r2, #9999	@ 0x270f
 800094e:	4293      	cmp	r3, r2
 8000950:	f77f af79 	ble.w	8000846 <HAL_TIM_IC_CaptureCallback+0x26a>
			}
		}

		/* Calculate the Average time between 2 Rise */
		rfavg = rfavg/countrf;
 8000954:	69bb      	ldr	r3, [r7, #24]
 8000956:	ee07 3a90 	vmov	s15, r3
 800095a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800095e:	edd7 6a04 	vldr	s13, [r7, #16]
 8000962:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000966:	edc7 7a04 	vstr	s15, [r7, #16]

		/* Calculate Frequency
		 * Freq = Clock/(time taken between 2 Rise)
		 */
		frequency = (refClock/(float)riseavg);;
 800096a:	edd7 6a03 	vldr	s13, [r7, #12]
 800096e:	ed97 7a05 	vldr	s14, [r7, #20]
 8000972:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000976:	4b18      	ldr	r3, [pc, #96]	@ (80009d8 <HAL_TIM_IC_CaptureCallback+0x3fc>)
 8000978:	edc3 7a00 	vstr	s15, [r3]
		period = ((float)riseavg/refClock);
 800097c:	edd7 6a05 	vldr	s13, [r7, #20]
 8000980:	ed97 7a03 	vldr	s14, [r7, #12]
 8000984:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000988:	4b14      	ldr	r3, [pc, #80]	@ (80009dc <HAL_TIM_IC_CaptureCallback+0x400>)
 800098a:	edc3 7a00 	vstr	s15, [r3]

		/* Width of the pulse
		 *  = (Time between Rise and fall) / clock
		 */
		width = ((rfavg)/((float)(refClock/1000000)))*1000;   // width in ns
 800098e:	edd7 7a03 	vldr	s15, [r7, #12]
 8000992:	eddf 6a13 	vldr	s13, [pc, #76]	@ 80009e0 <HAL_TIM_IC_CaptureCallback+0x404>
 8000996:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800099a:	edd7 6a04 	vldr	s13, [r7, #16]
 800099e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80009a2:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 80009e4 <HAL_TIM_IC_CaptureCallback+0x408>
 80009a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80009aa:	4b0f      	ldr	r3, [pc, #60]	@ (80009e8 <HAL_TIM_IC_CaptureCallback+0x40c>)
 80009ac:	edc3 7a00 	vstr	s15, [r3]

		riseCaptured = 0;
 80009b0:	4b0e      	ldr	r3, [pc, #56]	@ (80009ec <HAL_TIM_IC_CaptureCallback+0x410>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	601a      	str	r2, [r3, #0]
		fallCaptured = 0;
 80009b6:	4b0e      	ldr	r3, [pc, #56]	@ (80009f0 <HAL_TIM_IC_CaptureCallback+0x414>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	601a      	str	r2, [r3, #0]

		isMeasured = 1;
 80009bc:	4b0d      	ldr	r3, [pc, #52]	@ (80009f4 <HAL_TIM_IC_CaptureCallback+0x418>)
 80009be:	2201      	movs	r2, #1
 80009c0:	601a      	str	r2, [r3, #0]

	}
}
 80009c2:	bf00      	nop
 80009c4:	372c      	adds	r7, #44	@ 0x2c
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop
 80009d0:	24009e90 	.word	0x24009e90
 80009d4:	24000250 	.word	0x24000250
 80009d8:	24013ad0 	.word	0x24013ad0
 80009dc:	24013ad4 	.word	0x24013ad4
 80009e0:	49742400 	.word	0x49742400
 80009e4:	447a0000 	.word	0x447a0000
 80009e8:	24013ad8 	.word	0x24013ad8
 80009ec:	24000248 	.word	0x24000248
 80009f0:	2400024c 	.word	0x2400024c
 80009f4:	24013adc 	.word	0x24013adc

080009f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009fc:	f000 fe0c 	bl	8001618 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a00:	f000 f84e 	bl	8000aa0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a04:	f000 fa6a 	bl	8000edc <MX_GPIO_Init>
  MX_DMA_Init();
 8000a08:	f000 fa40 	bl	8000e8c <MX_DMA_Init>
  MX_USB_OTG_HS_USB_Init();
 8000a0c:	f000 fa36 	bl	8000e7c <MX_USB_OTG_HS_USB_Init>
  MX_TIM2_Init();
 8000a10:	f000 f968 	bl	8000ce4 <MX_TIM2_Init>
  MX_USART3_UART_Init();
 8000a14:	f000 f9e6 	bl	8000de4 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 8000a18:	f000 f8b8 	bl	8000b8c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  TIM1->CCR1 = htim1.Init.Period / 2;
 8000a1c:	4b1a      	ldr	r3, [pc, #104]	@ (8000a88 <main+0x90>)
 8000a1e:	68db      	ldr	r3, [r3, #12]
 8000a20:	4a1a      	ldr	r2, [pc, #104]	@ (8000a8c <main+0x94>)
 8000a22:	085b      	lsrs	r3, r3, #1
 8000a24:	6353      	str	r3, [r2, #52]	@ 0x34
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 8000a26:	2100      	movs	r1, #0
 8000a28:	4817      	ldr	r0, [pc, #92]	@ (8000a88 <main+0x90>)
 8000a2a:	f006 f9af 	bl	8006d8c <HAL_TIM_PWM_Start>
  HAL_TIM_IC_Start_DMA(&htim2, TIM_CHANNEL_1,riseData,numval);
 8000a2e:	f242 7310 	movw	r3, #10000	@ 0x2710
 8000a32:	4a17      	ldr	r2, [pc, #92]	@ (8000a90 <main+0x98>)
 8000a34:	2100      	movs	r1, #0
 8000a36:	4817      	ldr	r0, [pc, #92]	@ (8000a94 <main+0x9c>)
 8000a38:	f006 fb18 	bl	800706c <HAL_TIM_IC_Start_DMA>
  HAL_TIM_IC_Start_DMA(&htim2, TIM_CHANNEL_2,fallData,numval);
 8000a3c:	f242 7310 	movw	r3, #10000	@ 0x2710
 8000a40:	4a15      	ldr	r2, [pc, #84]	@ (8000a98 <main+0xa0>)
 8000a42:	2104      	movs	r1, #4
 8000a44:	4813      	ldr	r0, [pc, #76]	@ (8000a94 <main+0x9c>)
 8000a46:	f006 fb11 	bl	800706c <HAL_TIM_IC_Start_DMA>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  	  HAL_Delay(1000);
 8000a4a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a4e:	f000 fe75 	bl	800173c <HAL_Delay>
	  	  if (isMeasured){
 8000a52:	4b12      	ldr	r3, [pc, #72]	@ (8000a9c <main+0xa4>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d0f7      	beq.n	8000a4a <main+0x52>
	  		  TIM2->CNT = 0;
 8000a5a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000a5e:	2200      	movs	r2, #0
 8000a60:	625a      	str	r2, [r3, #36]	@ 0x24
	  		  HAL_TIM_IC_Start_DMA(&htim2, TIM_CHANNEL_1,riseData,numval);
 8000a62:	f242 7310 	movw	r3, #10000	@ 0x2710
 8000a66:	4a0a      	ldr	r2, [pc, #40]	@ (8000a90 <main+0x98>)
 8000a68:	2100      	movs	r1, #0
 8000a6a:	480a      	ldr	r0, [pc, #40]	@ (8000a94 <main+0x9c>)
 8000a6c:	f006 fafe 	bl	800706c <HAL_TIM_IC_Start_DMA>
	  		  HAL_TIM_IC_Start_DMA(&htim2, TIM_CHANNEL_2,fallData,numval);
 8000a70:	f242 7310 	movw	r3, #10000	@ 0x2710
 8000a74:	4a08      	ldr	r2, [pc, #32]	@ (8000a98 <main+0xa0>)
 8000a76:	2104      	movs	r1, #4
 8000a78:	4806      	ldr	r0, [pc, #24]	@ (8000a94 <main+0x9c>)
 8000a7a:	f006 faf7 	bl	800706c <HAL_TIM_IC_Start_DMA>
	  		  isMeasured = 0;
 8000a7e:	4b07      	ldr	r3, [pc, #28]	@ (8000a9c <main+0xa4>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	601a      	str	r2, [r3, #0]
	  	  HAL_Delay(1000);
 8000a84:	e7e1      	b.n	8000a4a <main+0x52>
 8000a86:	bf00      	nop
 8000a88:	2400002c 	.word	0x2400002c
 8000a8c:	40010000 	.word	0x40010000
 8000a90:	24000250 	.word	0x24000250
 8000a94:	24000078 	.word	0x24000078
 8000a98:	24009e90 	.word	0x24009e90
 8000a9c:	24013adc 	.word	0x24013adc

08000aa0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b09c      	sub	sp, #112	@ 0x70
 8000aa4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aa6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000aaa:	224c      	movs	r2, #76	@ 0x4c
 8000aac:	2100      	movs	r1, #0
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f009 f9fe 	bl	8009eb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ab4:	1d3b      	adds	r3, r7, #4
 8000ab6:	2220      	movs	r2, #32
 8000ab8:	2100      	movs	r1, #0
 8000aba:	4618      	mov	r0, r3
 8000abc:	f009 f9f8 	bl	8009eb0 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000ac0:	4b30      	ldr	r3, [pc, #192]	@ (8000b84 <SystemClock_Config+0xe4>)
 8000ac2:	f04f 32ff 	mov.w	r2, #4294967295
 8000ac6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000aca:	2004      	movs	r0, #4
 8000acc:	f003 faae 	bl	800402c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	603b      	str	r3, [r7, #0]
 8000ad4:	4b2c      	ldr	r3, [pc, #176]	@ (8000b88 <SystemClock_Config+0xe8>)
 8000ad6:	699b      	ldr	r3, [r3, #24]
 8000ad8:	4a2b      	ldr	r2, [pc, #172]	@ (8000b88 <SystemClock_Config+0xe8>)
 8000ada:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000ade:	6193      	str	r3, [r2, #24]
 8000ae0:	4b29      	ldr	r3, [pc, #164]	@ (8000b88 <SystemClock_Config+0xe8>)
 8000ae2:	699b      	ldr	r3, [r3, #24]
 8000ae4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000ae8:	603b      	str	r3, [r7, #0]
 8000aea:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000aec:	bf00      	nop
 8000aee:	4b26      	ldr	r3, [pc, #152]	@ (8000b88 <SystemClock_Config+0xe8>)
 8000af0:	699b      	ldr	r3, [r3, #24]
 8000af2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000af6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000afa:	d1f8      	bne.n	8000aee <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000afc:	2321      	movs	r3, #33	@ 0x21
 8000afe:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000b00:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000b04:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000b06:	2301      	movs	r3, #1
 8000b08:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b0a:	2302      	movs	r3, #2
 8000b0c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b0e:	2302      	movs	r3, #2
 8000b10:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000b12:	2301      	movs	r3, #1
 8000b14:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000b16:	2332      	movs	r3, #50	@ 0x32
 8000b18:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000b1a:	2302      	movs	r3, #2
 8000b1c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b1e:	2304      	movs	r3, #4
 8000b20:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b22:	2302      	movs	r3, #2
 8000b24:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000b26:	230c      	movs	r3, #12
 8000b28:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b32:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b36:	4618      	mov	r0, r3
 8000b38:	f003 fad2 	bl	80040e0 <HAL_RCC_OscConfig>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000b42:	f000 fae5 	bl	8001110 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b46:	233f      	movs	r3, #63	@ 0x3f
 8000b48:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b4a:	2303      	movs	r3, #3
 8000b4c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000b52:	2300      	movs	r3, #0
 8000b54:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000b56:	2340      	movs	r3, #64	@ 0x40
 8000b58:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000b5a:	2340      	movs	r3, #64	@ 0x40
 8000b5c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000b5e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b62:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000b64:	2340      	movs	r3, #64	@ 0x40
 8000b66:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b68:	1d3b      	adds	r3, r7, #4
 8000b6a:	2104      	movs	r1, #4
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f003 fee9 	bl	8004944 <HAL_RCC_ClockConfig>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <SystemClock_Config+0xdc>
  {
    Error_Handler();
 8000b78:	f000 faca 	bl	8001110 <Error_Handler>
  }
}
 8000b7c:	bf00      	nop
 8000b7e:	3770      	adds	r7, #112	@ 0x70
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	58024400 	.word	0x58024400
 8000b88:	58024800 	.word	0x58024800

08000b8c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b09c      	sub	sp, #112	@ 0x70
 8000b90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b92:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000b96:	2200      	movs	r2, #0
 8000b98:	601a      	str	r2, [r3, #0]
 8000b9a:	605a      	str	r2, [r3, #4]
 8000b9c:	609a      	str	r2, [r3, #8]
 8000b9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ba0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	601a      	str	r2, [r3, #0]
 8000ba8:	605a      	str	r2, [r3, #4]
 8000baa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bac:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	601a      	str	r2, [r3, #0]
 8000bb4:	605a      	str	r2, [r3, #4]
 8000bb6:	609a      	str	r2, [r3, #8]
 8000bb8:	60da      	str	r2, [r3, #12]
 8000bba:	611a      	str	r2, [r3, #16]
 8000bbc:	615a      	str	r2, [r3, #20]
 8000bbe:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000bc0:	1d3b      	adds	r3, r7, #4
 8000bc2:	2234      	movs	r2, #52	@ 0x34
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f009 f972 	bl	8009eb0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000bcc:	4b43      	ldr	r3, [pc, #268]	@ (8000cdc <MX_TIM1_Init+0x150>)
 8000bce:	4a44      	ldr	r2, [pc, #272]	@ (8000ce0 <MX_TIM1_Init+0x154>)
 8000bd0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000bd2:	4b42      	ldr	r3, [pc, #264]	@ (8000cdc <MX_TIM1_Init+0x150>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bd8:	4b40      	ldr	r3, [pc, #256]	@ (8000cdc <MX_TIM1_Init+0x150>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 40;
 8000bde:	4b3f      	ldr	r3, [pc, #252]	@ (8000cdc <MX_TIM1_Init+0x150>)
 8000be0:	2228      	movs	r2, #40	@ 0x28
 8000be2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000be4:	4b3d      	ldr	r3, [pc, #244]	@ (8000cdc <MX_TIM1_Init+0x150>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000bea:	4b3c      	ldr	r3, [pc, #240]	@ (8000cdc <MX_TIM1_Init+0x150>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000bf0:	4b3a      	ldr	r3, [pc, #232]	@ (8000cdc <MX_TIM1_Init+0x150>)
 8000bf2:	2280      	movs	r2, #128	@ 0x80
 8000bf4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000bf6:	4839      	ldr	r0, [pc, #228]	@ (8000cdc <MX_TIM1_Init+0x150>)
 8000bf8:	f006 f810 	bl	8006c1c <HAL_TIM_Base_Init>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000c02:	f000 fa85 	bl	8001110 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c06:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c0a:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000c0c:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000c10:	4619      	mov	r1, r3
 8000c12:	4832      	ldr	r0, [pc, #200]	@ (8000cdc <MX_TIM1_Init+0x150>)
 8000c14:	f006 feb4 	bl	8007980 <HAL_TIM_ConfigClockSource>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000c1e:	f000 fa77 	bl	8001110 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000c22:	482e      	ldr	r0, [pc, #184]	@ (8000cdc <MX_TIM1_Init+0x150>)
 8000c24:	f006 f851 	bl	8006cca <HAL_TIM_PWM_Init>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000c2e:	f000 fa6f 	bl	8001110 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c32:	2300      	movs	r3, #0
 8000c34:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000c36:	2300      	movs	r3, #0
 8000c38:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c3e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000c42:	4619      	mov	r1, r3
 8000c44:	4825      	ldr	r0, [pc, #148]	@ (8000cdc <MX_TIM1_Init+0x150>)
 8000c46:	f007 fe1b 	bl	8008880 <HAL_TIMEx_MasterConfigSynchronization>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8000c50:	f000 fa5e 	bl	8001110 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c54:	2360      	movs	r3, #96	@ 0x60
 8000c56:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000c60:	2300      	movs	r3, #0
 8000c62:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c64:	2300      	movs	r3, #0
 8000c66:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c70:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000c74:	2200      	movs	r2, #0
 8000c76:	4619      	mov	r1, r3
 8000c78:	4818      	ldr	r0, [pc, #96]	@ (8000cdc <MX_TIM1_Init+0x150>)
 8000c7a:	f006 fd6d 	bl	8007758 <HAL_TIM_PWM_ConfigChannel>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d001      	beq.n	8000c88 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8000c84:	f000 fa44 	bl	8001110 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000c90:	2300      	movs	r3, #0
 8000c92:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000c94:	2300      	movs	r3, #0
 8000c96:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000c9c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ca0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000caa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000cae:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000cb8:	1d3b      	adds	r3, r7, #4
 8000cba:	4619      	mov	r1, r3
 8000cbc:	4807      	ldr	r0, [pc, #28]	@ (8000cdc <MX_TIM1_Init+0x150>)
 8000cbe:	f007 fe6d 	bl	800899c <HAL_TIMEx_ConfigBreakDeadTime>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8000cc8:	f000 fa22 	bl	8001110 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000ccc:	4803      	ldr	r0, [pc, #12]	@ (8000cdc <MX_TIM1_Init+0x150>)
 8000cce:	f000 fb0d 	bl	80012ec <HAL_TIM_MspPostInit>

}
 8000cd2:	bf00      	nop
 8000cd4:	3770      	adds	r7, #112	@ 0x70
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	2400002c 	.word	0x2400002c
 8000ce0:	40010000 	.word	0x40010000

08000ce4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b08c      	sub	sp, #48	@ 0x30
 8000ce8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cea:	f107 0320 	add.w	r3, r7, #32
 8000cee:	2200      	movs	r2, #0
 8000cf0:	601a      	str	r2, [r3, #0]
 8000cf2:	605a      	str	r2, [r3, #4]
 8000cf4:	609a      	str	r2, [r3, #8]
 8000cf6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cf8:	f107 0314 	add.w	r3, r7, #20
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	601a      	str	r2, [r3, #0]
 8000d00:	605a      	str	r2, [r3, #4]
 8000d02:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000d04:	1d3b      	adds	r3, r7, #4
 8000d06:	2200      	movs	r2, #0
 8000d08:	601a      	str	r2, [r3, #0]
 8000d0a:	605a      	str	r2, [r3, #4]
 8000d0c:	609a      	str	r2, [r3, #8]
 8000d0e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d10:	4b33      	ldr	r3, [pc, #204]	@ (8000de0 <MX_TIM2_Init+0xfc>)
 8000d12:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d16:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000d18:	4b31      	ldr	r3, [pc, #196]	@ (8000de0 <MX_TIM2_Init+0xfc>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d1e:	4b30      	ldr	r3, [pc, #192]	@ (8000de0 <MX_TIM2_Init+0xfc>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000d24:	4b2e      	ldr	r3, [pc, #184]	@ (8000de0 <MX_TIM2_Init+0xfc>)
 8000d26:	f04f 32ff 	mov.w	r2, #4294967295
 8000d2a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d2c:	4b2c      	ldr	r3, [pc, #176]	@ (8000de0 <MX_TIM2_Init+0xfc>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d32:	4b2b      	ldr	r3, [pc, #172]	@ (8000de0 <MX_TIM2_Init+0xfc>)
 8000d34:	2280      	movs	r2, #128	@ 0x80
 8000d36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d38:	4829      	ldr	r0, [pc, #164]	@ (8000de0 <MX_TIM2_Init+0xfc>)
 8000d3a:	f005 ff6f 	bl	8006c1c <HAL_TIM_Base_Init>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d001      	beq.n	8000d48 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8000d44:	f000 f9e4 	bl	8001110 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d48:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d4c:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d4e:	f107 0320 	add.w	r3, r7, #32
 8000d52:	4619      	mov	r1, r3
 8000d54:	4822      	ldr	r0, [pc, #136]	@ (8000de0 <MX_TIM2_Init+0xfc>)
 8000d56:	f006 fe13 	bl	8007980 <HAL_TIM_ConfigClockSource>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d001      	beq.n	8000d64 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000d60:	f000 f9d6 	bl	8001110 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000d64:	481e      	ldr	r0, [pc, #120]	@ (8000de0 <MX_TIM2_Init+0xfc>)
 8000d66:	f006 f91f 	bl	8006fa8 <HAL_TIM_IC_Init>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d001      	beq.n	8000d74 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000d70:	f000 f9ce 	bl	8001110 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d74:	2300      	movs	r3, #0
 8000d76:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d7c:	f107 0314 	add.w	r3, r7, #20
 8000d80:	4619      	mov	r1, r3
 8000d82:	4817      	ldr	r0, [pc, #92]	@ (8000de0 <MX_TIM2_Init+0xfc>)
 8000d84:	f007 fd7c 	bl	8008880 <HAL_TIMEx_MasterConfigSynchronization>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 8000d8e:	f000 f9bf 	bl	8001110 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000d92:	2300      	movs	r3, #0
 8000d94:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000d96:	2301      	movs	r3, #1
 8000d98:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000da2:	1d3b      	adds	r3, r7, #4
 8000da4:	2200      	movs	r2, #0
 8000da6:	4619      	mov	r1, r3
 8000da8:	480d      	ldr	r0, [pc, #52]	@ (8000de0 <MX_TIM2_Init+0xfc>)
 8000daa:	f006 fc38 	bl	800761e <HAL_TIM_IC_ConfigChannel>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d001      	beq.n	8000db8 <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 8000db4:	f000 f9ac 	bl	8001110 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000db8:	2302      	movs	r3, #2
 8000dba:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000dbc:	2302      	movs	r3, #2
 8000dbe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000dc0:	1d3b      	adds	r3, r7, #4
 8000dc2:	2204      	movs	r2, #4
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	4806      	ldr	r0, [pc, #24]	@ (8000de0 <MX_TIM2_Init+0xfc>)
 8000dc8:	f006 fc29 	bl	800761e <HAL_TIM_IC_ConfigChannel>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 8000dd2:	f000 f99d 	bl	8001110 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000dd6:	bf00      	nop
 8000dd8:	3730      	adds	r7, #48	@ 0x30
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	24000078 	.word	0x24000078

08000de4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000de8:	4b22      	ldr	r3, [pc, #136]	@ (8000e74 <MX_USART3_UART_Init+0x90>)
 8000dea:	4a23      	ldr	r2, [pc, #140]	@ (8000e78 <MX_USART3_UART_Init+0x94>)
 8000dec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000dee:	4b21      	ldr	r3, [pc, #132]	@ (8000e74 <MX_USART3_UART_Init+0x90>)
 8000df0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000df4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000df6:	4b1f      	ldr	r3, [pc, #124]	@ (8000e74 <MX_USART3_UART_Init+0x90>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000dfc:	4b1d      	ldr	r3, [pc, #116]	@ (8000e74 <MX_USART3_UART_Init+0x90>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000e02:	4b1c      	ldr	r3, [pc, #112]	@ (8000e74 <MX_USART3_UART_Init+0x90>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000e08:	4b1a      	ldr	r3, [pc, #104]	@ (8000e74 <MX_USART3_UART_Init+0x90>)
 8000e0a:	220c      	movs	r2, #12
 8000e0c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e0e:	4b19      	ldr	r3, [pc, #100]	@ (8000e74 <MX_USART3_UART_Init+0x90>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e14:	4b17      	ldr	r3, [pc, #92]	@ (8000e74 <MX_USART3_UART_Init+0x90>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e1a:	4b16      	ldr	r3, [pc, #88]	@ (8000e74 <MX_USART3_UART_Init+0x90>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e20:	4b14      	ldr	r3, [pc, #80]	@ (8000e74 <MX_USART3_UART_Init+0x90>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e26:	4b13      	ldr	r3, [pc, #76]	@ (8000e74 <MX_USART3_UART_Init+0x90>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000e2c:	4811      	ldr	r0, [pc, #68]	@ (8000e74 <MX_USART3_UART_Init+0x90>)
 8000e2e:	f007 fe5f 	bl	8008af0 <HAL_UART_Init>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d001      	beq.n	8000e3c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000e38:	f000 f96a 	bl	8001110 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	480d      	ldr	r0, [pc, #52]	@ (8000e74 <MX_USART3_UART_Init+0x90>)
 8000e40:	f008 ff6b 	bl	8009d1a <HAL_UARTEx_SetTxFifoThreshold>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000e4a:	f000 f961 	bl	8001110 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e4e:	2100      	movs	r1, #0
 8000e50:	4808      	ldr	r0, [pc, #32]	@ (8000e74 <MX_USART3_UART_Init+0x90>)
 8000e52:	f008 ffa0 	bl	8009d96 <HAL_UARTEx_SetRxFifoThreshold>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000e5c:	f000 f958 	bl	8001110 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000e60:	4804      	ldr	r0, [pc, #16]	@ (8000e74 <MX_USART3_UART_Init+0x90>)
 8000e62:	f008 ff21 	bl	8009ca8 <HAL_UARTEx_DisableFifoMode>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d001      	beq.n	8000e70 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000e6c:	f000 f950 	bl	8001110 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000e70:	bf00      	nop
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	240001b4 	.word	0x240001b4
 8000e78:	40004800 	.word	0x40004800

08000e7c <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000e80:	bf00      	nop
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
	...

08000e8c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e92:	4b11      	ldr	r3, [pc, #68]	@ (8000ed8 <MX_DMA_Init+0x4c>)
 8000e94:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8000e98:	4a0f      	ldr	r2, [pc, #60]	@ (8000ed8 <MX_DMA_Init+0x4c>)
 8000e9a:	f043 0301 	orr.w	r3, r3, #1
 8000e9e:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 8000ea2:	4b0d      	ldr	r3, [pc, #52]	@ (8000ed8 <MX_DMA_Init+0x4c>)
 8000ea4:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8000ea8:	f003 0301 	and.w	r3, r3, #1
 8000eac:	607b      	str	r3, [r7, #4]
 8000eae:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	200b      	movs	r0, #11
 8000eb6:	f000 fd40 	bl	800193a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000eba:	200b      	movs	r0, #11
 8000ebc:	f000 fd57 	bl	800196e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	200c      	movs	r0, #12
 8000ec6:	f000 fd38 	bl	800193a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000eca:	200c      	movs	r0, #12
 8000ecc:	f000 fd4f 	bl	800196e <HAL_NVIC_EnableIRQ>

}
 8000ed0:	bf00      	nop
 8000ed2:	3708      	adds	r7, #8
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	58024400 	.word	0x58024400

08000edc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b08e      	sub	sp, #56	@ 0x38
 8000ee0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	601a      	str	r2, [r3, #0]
 8000eea:	605a      	str	r2, [r3, #4]
 8000eec:	609a      	str	r2, [r3, #8]
 8000eee:	60da      	str	r2, [r3, #12]
 8000ef0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ef2:	4b80      	ldr	r3, [pc, #512]	@ (80010f4 <MX_GPIO_Init+0x218>)
 8000ef4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000ef8:	4a7e      	ldr	r2, [pc, #504]	@ (80010f4 <MX_GPIO_Init+0x218>)
 8000efa:	f043 0304 	orr.w	r3, r3, #4
 8000efe:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000f02:	4b7c      	ldr	r3, [pc, #496]	@ (80010f4 <MX_GPIO_Init+0x218>)
 8000f04:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f08:	f003 0304 	and.w	r3, r3, #4
 8000f0c:	623b      	str	r3, [r7, #32]
 8000f0e:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f10:	4b78      	ldr	r3, [pc, #480]	@ (80010f4 <MX_GPIO_Init+0x218>)
 8000f12:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f16:	4a77      	ldr	r2, [pc, #476]	@ (80010f4 <MX_GPIO_Init+0x218>)
 8000f18:	f043 0320 	orr.w	r3, r3, #32
 8000f1c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000f20:	4b74      	ldr	r3, [pc, #464]	@ (80010f4 <MX_GPIO_Init+0x218>)
 8000f22:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f26:	f003 0320 	and.w	r3, r3, #32
 8000f2a:	61fb      	str	r3, [r7, #28]
 8000f2c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f2e:	4b71      	ldr	r3, [pc, #452]	@ (80010f4 <MX_GPIO_Init+0x218>)
 8000f30:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f34:	4a6f      	ldr	r2, [pc, #444]	@ (80010f4 <MX_GPIO_Init+0x218>)
 8000f36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f3a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000f3e:	4b6d      	ldr	r3, [pc, #436]	@ (80010f4 <MX_GPIO_Init+0x218>)
 8000f40:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f48:	61bb      	str	r3, [r7, #24]
 8000f4a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f4c:	4b69      	ldr	r3, [pc, #420]	@ (80010f4 <MX_GPIO_Init+0x218>)
 8000f4e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f52:	4a68      	ldr	r2, [pc, #416]	@ (80010f4 <MX_GPIO_Init+0x218>)
 8000f54:	f043 0301 	orr.w	r3, r3, #1
 8000f58:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000f5c:	4b65      	ldr	r3, [pc, #404]	@ (80010f4 <MX_GPIO_Init+0x218>)
 8000f5e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f62:	f003 0301 	and.w	r3, r3, #1
 8000f66:	617b      	str	r3, [r7, #20]
 8000f68:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f6a:	4b62      	ldr	r3, [pc, #392]	@ (80010f4 <MX_GPIO_Init+0x218>)
 8000f6c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f70:	4a60      	ldr	r2, [pc, #384]	@ (80010f4 <MX_GPIO_Init+0x218>)
 8000f72:	f043 0302 	orr.w	r3, r3, #2
 8000f76:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000f7a:	4b5e      	ldr	r3, [pc, #376]	@ (80010f4 <MX_GPIO_Init+0x218>)
 8000f7c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f80:	f003 0302 	and.w	r3, r3, #2
 8000f84:	613b      	str	r3, [r7, #16]
 8000f86:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f88:	4b5a      	ldr	r3, [pc, #360]	@ (80010f4 <MX_GPIO_Init+0x218>)
 8000f8a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f8e:	4a59      	ldr	r2, [pc, #356]	@ (80010f4 <MX_GPIO_Init+0x218>)
 8000f90:	f043 0310 	orr.w	r3, r3, #16
 8000f94:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000f98:	4b56      	ldr	r3, [pc, #344]	@ (80010f4 <MX_GPIO_Init+0x218>)
 8000f9a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f9e:	f003 0310 	and.w	r3, r3, #16
 8000fa2:	60fb      	str	r3, [r7, #12]
 8000fa4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fa6:	4b53      	ldr	r3, [pc, #332]	@ (80010f4 <MX_GPIO_Init+0x218>)
 8000fa8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000fac:	4a51      	ldr	r2, [pc, #324]	@ (80010f4 <MX_GPIO_Init+0x218>)
 8000fae:	f043 0308 	orr.w	r3, r3, #8
 8000fb2:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000fb6:	4b4f      	ldr	r3, [pc, #316]	@ (80010f4 <MX_GPIO_Init+0x218>)
 8000fb8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000fbc:	f003 0308 	and.w	r3, r3, #8
 8000fc0:	60bb      	str	r3, [r7, #8]
 8000fc2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fc4:	4b4b      	ldr	r3, [pc, #300]	@ (80010f4 <MX_GPIO_Init+0x218>)
 8000fc6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000fca:	4a4a      	ldr	r2, [pc, #296]	@ (80010f4 <MX_GPIO_Init+0x218>)
 8000fcc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000fd0:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000fd4:	4b47      	ldr	r3, [pc, #284]	@ (80010f4 <MX_GPIO_Init+0x218>)
 8000fd6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000fda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000fde:	607b      	str	r3, [r7, #4]
 8000fe0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000fe8:	4843      	ldr	r0, [pc, #268]	@ (80010f8 <MX_GPIO_Init+0x21c>)
 8000fea:	f003 f805 	bl	8003ff8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000fee:	2200      	movs	r2, #0
 8000ff0:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000ff4:	4841      	ldr	r0, [pc, #260]	@ (80010fc <MX_GPIO_Init+0x220>)
 8000ff6:	f002 ffff 	bl	8003ff8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	2102      	movs	r1, #2
 8000ffe:	4840      	ldr	r0, [pc, #256]	@ (8001100 <MX_GPIO_Init+0x224>)
 8001000:	f002 fffa 	bl	8003ff8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001004:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001008:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800100a:	2300      	movs	r3, #0
 800100c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100e:	2300      	movs	r3, #0
 8001010:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001012:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001016:	4619      	mov	r1, r3
 8001018:	483a      	ldr	r0, [pc, #232]	@ (8001104 <MX_GPIO_Init+0x228>)
 800101a:	f002 fe3d 	bl	8003c98 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 800101e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001022:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001024:	2301      	movs	r3, #1
 8001026:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001028:	2300      	movs	r3, #0
 800102a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102c:	2300      	movs	r3, #0
 800102e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001030:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001034:	4619      	mov	r1, r3
 8001036:	4830      	ldr	r0, [pc, #192]	@ (80010f8 <MX_GPIO_Init+0x21c>)
 8001038:	f002 fe2e 	bl	8003c98 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 800103c:	f244 0301 	movw	r3, #16385	@ 0x4001
 8001040:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001042:	2301      	movs	r3, #1
 8001044:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001046:	2300      	movs	r3, #0
 8001048:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800104a:	2300      	movs	r3, #0
 800104c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800104e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001052:	4619      	mov	r1, r3
 8001054:	4829      	ldr	r0, [pc, #164]	@ (80010fc <MX_GPIO_Init+0x220>)
 8001056:	f002 fe1f 	bl	8003c98 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 800105a:	2380      	movs	r3, #128	@ 0x80
 800105c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800105e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001062:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001064:	2300      	movs	r3, #0
 8001066:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8001068:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800106c:	4619      	mov	r1, r3
 800106e:	4826      	ldr	r0, [pc, #152]	@ (8001108 <MX_GPIO_Init+0x22c>)
 8001070:	f002 fe12 	bl	8003c98 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8001074:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001078:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800107a:	2300      	movs	r3, #0
 800107c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107e:	2300      	movs	r3, #0
 8001080:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001082:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001086:	4619      	mov	r1, r3
 8001088:	4820      	ldr	r0, [pc, #128]	@ (800110c <MX_GPIO_Init+0x230>)
 800108a:	f002 fe05 	bl	8003c98 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 800108e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001092:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001094:	2302      	movs	r3, #2
 8001096:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001098:	2300      	movs	r3, #0
 800109a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800109c:	2300      	movs	r3, #0
 800109e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 80010a0:	230a      	movs	r3, #10
 80010a2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 80010a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010a8:	4619      	mov	r1, r3
 80010aa:	4818      	ldr	r0, [pc, #96]	@ (800110c <MX_GPIO_Init+0x230>)
 80010ac:	f002 fdf4 	bl	8003c98 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_N_Pin USB_FS_P_Pin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 80010b0:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80010b4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b6:	2302      	movs	r3, #2
 80010b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ba:	2300      	movs	r3, #0
 80010bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010be:	2300      	movs	r3, #0
 80010c0:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010c6:	4619      	mov	r1, r3
 80010c8:	4810      	ldr	r0, [pc, #64]	@ (800110c <MX_GPIO_Init+0x230>)
 80010ca:	f002 fde5 	bl	8003c98 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80010ce:	2302      	movs	r3, #2
 80010d0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010d2:	2301      	movs	r3, #1
 80010d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d6:	2300      	movs	r3, #0
 80010d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010da:	2300      	movs	r3, #0
 80010dc:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80010de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010e2:	4619      	mov	r1, r3
 80010e4:	4806      	ldr	r0, [pc, #24]	@ (8001100 <MX_GPIO_Init+0x224>)
 80010e6:	f002 fdd7 	bl	8003c98 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80010ea:	bf00      	nop
 80010ec:	3738      	adds	r7, #56	@ 0x38
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	58024400 	.word	0x58024400
 80010f8:	58021400 	.word	0x58021400
 80010fc:	58020400 	.word	0x58020400
 8001100:	58021000 	.word	0x58021000
 8001104:	58020800 	.word	0x58020800
 8001108:	58021800 	.word	0x58021800
 800110c:	58020000 	.word	0x58020000

08001110 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001114:	b672      	cpsid	i
}
 8001116:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001118:	bf00      	nop
 800111a:	e7fd      	b.n	8001118 <Error_Handler+0x8>

0800111c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001122:	4b0a      	ldr	r3, [pc, #40]	@ (800114c <HAL_MspInit+0x30>)
 8001124:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8001128:	4a08      	ldr	r2, [pc, #32]	@ (800114c <HAL_MspInit+0x30>)
 800112a:	f043 0302 	orr.w	r3, r3, #2
 800112e:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8001132:	4b06      	ldr	r3, [pc, #24]	@ (800114c <HAL_MspInit+0x30>)
 8001134:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8001138:	f003 0302 	and.w	r3, r3, #2
 800113c:	607b      	str	r3, [r7, #4]
 800113e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001140:	bf00      	nop
 8001142:	370c      	adds	r7, #12
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr
 800114c:	58024400 	.word	0x58024400

08001150 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b08a      	sub	sp, #40	@ 0x28
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001158:	f107 0314 	add.w	r3, r7, #20
 800115c:	2200      	movs	r2, #0
 800115e:	601a      	str	r2, [r3, #0]
 8001160:	605a      	str	r2, [r3, #4]
 8001162:	609a      	str	r2, [r3, #8]
 8001164:	60da      	str	r2, [r3, #12]
 8001166:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a58      	ldr	r2, [pc, #352]	@ (80012d0 <HAL_TIM_Base_MspInit+0x180>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d10f      	bne.n	8001192 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001172:	4b58      	ldr	r3, [pc, #352]	@ (80012d4 <HAL_TIM_Base_MspInit+0x184>)
 8001174:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8001178:	4a56      	ldr	r2, [pc, #344]	@ (80012d4 <HAL_TIM_Base_MspInit+0x184>)
 800117a:	f043 0301 	orr.w	r3, r3, #1
 800117e:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 8001182:	4b54      	ldr	r3, [pc, #336]	@ (80012d4 <HAL_TIM_Base_MspInit+0x184>)
 8001184:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8001188:	f003 0301 	and.w	r3, r3, #1
 800118c:	613b      	str	r3, [r7, #16]
 800118e:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001190:	e099      	b.n	80012c6 <HAL_TIM_Base_MspInit+0x176>
  else if(htim_base->Instance==TIM2)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800119a:	f040 8094 	bne.w	80012c6 <HAL_TIM_Base_MspInit+0x176>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800119e:	4b4d      	ldr	r3, [pc, #308]	@ (80012d4 <HAL_TIM_Base_MspInit+0x184>)
 80011a0:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80011a4:	4a4b      	ldr	r2, [pc, #300]	@ (80012d4 <HAL_TIM_Base_MspInit+0x184>)
 80011a6:	f043 0301 	orr.w	r3, r3, #1
 80011aa:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 80011ae:	4b49      	ldr	r3, [pc, #292]	@ (80012d4 <HAL_TIM_Base_MspInit+0x184>)
 80011b0:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80011b4:	f003 0301 	and.w	r3, r3, #1
 80011b8:	60fb      	str	r3, [r7, #12]
 80011ba:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011bc:	4b45      	ldr	r3, [pc, #276]	@ (80012d4 <HAL_TIM_Base_MspInit+0x184>)
 80011be:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80011c2:	4a44      	ldr	r2, [pc, #272]	@ (80012d4 <HAL_TIM_Base_MspInit+0x184>)
 80011c4:	f043 0301 	orr.w	r3, r3, #1
 80011c8:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80011cc:	4b41      	ldr	r3, [pc, #260]	@ (80012d4 <HAL_TIM_Base_MspInit+0x184>)
 80011ce:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80011d2:	f003 0301 	and.w	r3, r3, #1
 80011d6:	60bb      	str	r3, [r7, #8]
 80011d8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80011da:	2320      	movs	r3, #32
 80011dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011de:	2302      	movs	r3, #2
 80011e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e2:	2300      	movs	r3, #0
 80011e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e6:	2300      	movs	r3, #0
 80011e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80011ea:	2301      	movs	r3, #1
 80011ec:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ee:	f107 0314 	add.w	r3, r7, #20
 80011f2:	4619      	mov	r1, r3
 80011f4:	4838      	ldr	r0, [pc, #224]	@ (80012d8 <HAL_TIM_Base_MspInit+0x188>)
 80011f6:	f002 fd4f 	bl	8003c98 <HAL_GPIO_Init>
    hdma_tim2_ch1.Instance = DMA1_Stream0;
 80011fa:	4b38      	ldr	r3, [pc, #224]	@ (80012dc <HAL_TIM_Base_MspInit+0x18c>)
 80011fc:	4a38      	ldr	r2, [pc, #224]	@ (80012e0 <HAL_TIM_Base_MspInit+0x190>)
 80011fe:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Request = DMA_REQUEST_TIM2_CH1;
 8001200:	4b36      	ldr	r3, [pc, #216]	@ (80012dc <HAL_TIM_Base_MspInit+0x18c>)
 8001202:	2212      	movs	r2, #18
 8001204:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001206:	4b35      	ldr	r3, [pc, #212]	@ (80012dc <HAL_TIM_Base_MspInit+0x18c>)
 8001208:	2200      	movs	r2, #0
 800120a:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800120c:	4b33      	ldr	r3, [pc, #204]	@ (80012dc <HAL_TIM_Base_MspInit+0x18c>)
 800120e:	2200      	movs	r2, #0
 8001210:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001212:	4b32      	ldr	r3, [pc, #200]	@ (80012dc <HAL_TIM_Base_MspInit+0x18c>)
 8001214:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001218:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800121a:	4b30      	ldr	r3, [pc, #192]	@ (80012dc <HAL_TIM_Base_MspInit+0x18c>)
 800121c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001220:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001222:	4b2e      	ldr	r3, [pc, #184]	@ (80012dc <HAL_TIM_Base_MspInit+0x18c>)
 8001224:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001228:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 800122a:	4b2c      	ldr	r3, [pc, #176]	@ (80012dc <HAL_TIM_Base_MspInit+0x18c>)
 800122c:	2200      	movs	r2, #0
 800122e:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001230:	4b2a      	ldr	r3, [pc, #168]	@ (80012dc <HAL_TIM_Base_MspInit+0x18c>)
 8001232:	2200      	movs	r2, #0
 8001234:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001236:	4b29      	ldr	r3, [pc, #164]	@ (80012dc <HAL_TIM_Base_MspInit+0x18c>)
 8001238:	2200      	movs	r2, #0
 800123a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 800123c:	4827      	ldr	r0, [pc, #156]	@ (80012dc <HAL_TIM_Base_MspInit+0x18c>)
 800123e:	f000 fbb1 	bl	80019a4 <HAL_DMA_Init>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <HAL_TIM_Base_MspInit+0xfc>
      Error_Handler();
 8001248:	f7ff ff62 	bl	8001110 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	4a23      	ldr	r2, [pc, #140]	@ (80012dc <HAL_TIM_Base_MspInit+0x18c>)
 8001250:	625a      	str	r2, [r3, #36]	@ 0x24
 8001252:	4a22      	ldr	r2, [pc, #136]	@ (80012dc <HAL_TIM_Base_MspInit+0x18c>)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_tim2_ch2.Instance = DMA1_Stream1;
 8001258:	4b22      	ldr	r3, [pc, #136]	@ (80012e4 <HAL_TIM_Base_MspInit+0x194>)
 800125a:	4a23      	ldr	r2, [pc, #140]	@ (80012e8 <HAL_TIM_Base_MspInit+0x198>)
 800125c:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch2.Init.Request = DMA_REQUEST_TIM2_CH2;
 800125e:	4b21      	ldr	r3, [pc, #132]	@ (80012e4 <HAL_TIM_Base_MspInit+0x194>)
 8001260:	2213      	movs	r2, #19
 8001262:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001264:	4b1f      	ldr	r3, [pc, #124]	@ (80012e4 <HAL_TIM_Base_MspInit+0x194>)
 8001266:	2200      	movs	r2, #0
 8001268:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 800126a:	4b1e      	ldr	r3, [pc, #120]	@ (80012e4 <HAL_TIM_Base_MspInit+0x194>)
 800126c:	2200      	movs	r2, #0
 800126e:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8001270:	4b1c      	ldr	r3, [pc, #112]	@ (80012e4 <HAL_TIM_Base_MspInit+0x194>)
 8001272:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001276:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001278:	4b1a      	ldr	r3, [pc, #104]	@ (80012e4 <HAL_TIM_Base_MspInit+0x194>)
 800127a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800127e:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001280:	4b18      	ldr	r3, [pc, #96]	@ (80012e4 <HAL_TIM_Base_MspInit+0x194>)
 8001282:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001286:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch2.Init.Mode = DMA_NORMAL;
 8001288:	4b16      	ldr	r3, [pc, #88]	@ (80012e4 <HAL_TIM_Base_MspInit+0x194>)
 800128a:	2200      	movs	r2, #0
 800128c:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch2.Init.Priority = DMA_PRIORITY_LOW;
 800128e:	4b15      	ldr	r3, [pc, #84]	@ (80012e4 <HAL_TIM_Base_MspInit+0x194>)
 8001290:	2200      	movs	r2, #0
 8001292:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001294:	4b13      	ldr	r3, [pc, #76]	@ (80012e4 <HAL_TIM_Base_MspInit+0x194>)
 8001296:	2200      	movs	r2, #0
 8001298:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch2) != HAL_OK)
 800129a:	4812      	ldr	r0, [pc, #72]	@ (80012e4 <HAL_TIM_Base_MspInit+0x194>)
 800129c:	f000 fb82 	bl	80019a4 <HAL_DMA_Init>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <HAL_TIM_Base_MspInit+0x15a>
      Error_Handler();
 80012a6:	f7ff ff33 	bl	8001110 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4a0d      	ldr	r2, [pc, #52]	@ (80012e4 <HAL_TIM_Base_MspInit+0x194>)
 80012ae:	629a      	str	r2, [r3, #40]	@ 0x28
 80012b0:	4a0c      	ldr	r2, [pc, #48]	@ (80012e4 <HAL_TIM_Base_MspInit+0x194>)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80012b6:	2200      	movs	r2, #0
 80012b8:	2100      	movs	r1, #0
 80012ba:	201c      	movs	r0, #28
 80012bc:	f000 fb3d 	bl	800193a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80012c0:	201c      	movs	r0, #28
 80012c2:	f000 fb54 	bl	800196e <HAL_NVIC_EnableIRQ>
}
 80012c6:	bf00      	nop
 80012c8:	3728      	adds	r7, #40	@ 0x28
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	40010000 	.word	0x40010000
 80012d4:	58024400 	.word	0x58024400
 80012d8:	58020000 	.word	0x58020000
 80012dc:	240000c4 	.word	0x240000c4
 80012e0:	40020010 	.word	0x40020010
 80012e4:	2400013c 	.word	0x2400013c
 80012e8:	40020028 	.word	0x40020028

080012ec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b088      	sub	sp, #32
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f4:	f107 030c 	add.w	r3, r7, #12
 80012f8:	2200      	movs	r2, #0
 80012fa:	601a      	str	r2, [r3, #0]
 80012fc:	605a      	str	r2, [r3, #4]
 80012fe:	609a      	str	r2, [r3, #8]
 8001300:	60da      	str	r2, [r3, #12]
 8001302:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a13      	ldr	r2, [pc, #76]	@ (8001358 <HAL_TIM_MspPostInit+0x6c>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d11f      	bne.n	800134e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800130e:	4b13      	ldr	r3, [pc, #76]	@ (800135c <HAL_TIM_MspPostInit+0x70>)
 8001310:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001314:	4a11      	ldr	r2, [pc, #68]	@ (800135c <HAL_TIM_MspPostInit+0x70>)
 8001316:	f043 0310 	orr.w	r3, r3, #16
 800131a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800131e:	4b0f      	ldr	r3, [pc, #60]	@ (800135c <HAL_TIM_MspPostInit+0x70>)
 8001320:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001324:	f003 0310 	and.w	r3, r3, #16
 8001328:	60bb      	str	r3, [r7, #8]
 800132a:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800132c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001330:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001332:	2302      	movs	r3, #2
 8001334:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001336:	2300      	movs	r3, #0
 8001338:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800133a:	2300      	movs	r3, #0
 800133c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800133e:	2301      	movs	r3, #1
 8001340:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001342:	f107 030c 	add.w	r3, r7, #12
 8001346:	4619      	mov	r1, r3
 8001348:	4805      	ldr	r0, [pc, #20]	@ (8001360 <HAL_TIM_MspPostInit+0x74>)
 800134a:	f002 fca5 	bl	8003c98 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800134e:	bf00      	nop
 8001350:	3720      	adds	r7, #32
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	40010000 	.word	0x40010000
 800135c:	58024400 	.word	0x58024400
 8001360:	58021000 	.word	0x58021000

08001364 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b0ba      	sub	sp, #232	@ 0xe8
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800136c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001370:	2200      	movs	r2, #0
 8001372:	601a      	str	r2, [r3, #0]
 8001374:	605a      	str	r2, [r3, #4]
 8001376:	609a      	str	r2, [r3, #8]
 8001378:	60da      	str	r2, [r3, #12]
 800137a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800137c:	f107 0310 	add.w	r3, r7, #16
 8001380:	22c0      	movs	r2, #192	@ 0xc0
 8001382:	2100      	movs	r1, #0
 8001384:	4618      	mov	r0, r3
 8001386:	f008 fd93 	bl	8009eb0 <memset>
  if(huart->Instance==USART3)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4a27      	ldr	r2, [pc, #156]	@ (800142c <HAL_UART_MspInit+0xc8>)
 8001390:	4293      	cmp	r3, r2
 8001392:	d146      	bne.n	8001422 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001394:	f04f 0202 	mov.w	r2, #2
 8001398:	f04f 0300 	mov.w	r3, #0
 800139c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80013a0:	2300      	movs	r3, #0
 80013a2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013a6:	f107 0310 	add.w	r3, r7, #16
 80013aa:	4618      	mov	r0, r3
 80013ac:	f003 fe56 	bl	800505c <HAL_RCCEx_PeriphCLKConfig>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80013b6:	f7ff feab 	bl	8001110 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80013ba:	4b1d      	ldr	r3, [pc, #116]	@ (8001430 <HAL_UART_MspInit+0xcc>)
 80013bc:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80013c0:	4a1b      	ldr	r2, [pc, #108]	@ (8001430 <HAL_UART_MspInit+0xcc>)
 80013c2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80013c6:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 80013ca:	4b19      	ldr	r3, [pc, #100]	@ (8001430 <HAL_UART_MspInit+0xcc>)
 80013cc:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80013d0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80013d4:	60fb      	str	r3, [r7, #12]
 80013d6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013d8:	4b15      	ldr	r3, [pc, #84]	@ (8001430 <HAL_UART_MspInit+0xcc>)
 80013da:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80013de:	4a14      	ldr	r2, [pc, #80]	@ (8001430 <HAL_UART_MspInit+0xcc>)
 80013e0:	f043 0308 	orr.w	r3, r3, #8
 80013e4:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80013e8:	4b11      	ldr	r3, [pc, #68]	@ (8001430 <HAL_UART_MspInit+0xcc>)
 80013ea:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80013ee:	f003 0308 	and.w	r3, r3, #8
 80013f2:	60bb      	str	r3, [r7, #8]
 80013f4:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80013f6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80013fa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013fe:	2302      	movs	r3, #2
 8001400:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001404:	2300      	movs	r3, #0
 8001406:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800140a:	2300      	movs	r3, #0
 800140c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001410:	2307      	movs	r3, #7
 8001412:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001416:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800141a:	4619      	mov	r1, r3
 800141c:	4805      	ldr	r0, [pc, #20]	@ (8001434 <HAL_UART_MspInit+0xd0>)
 800141e:	f002 fc3b 	bl	8003c98 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001422:	bf00      	nop
 8001424:	37e8      	adds	r7, #232	@ 0xe8
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	40004800 	.word	0x40004800
 8001430:	58024400 	.word	0x58024400
 8001434:	58020c00 	.word	0x58020c00

08001438 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800143c:	bf00      	nop
 800143e:	e7fd      	b.n	800143c <NMI_Handler+0x4>

08001440 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001444:	bf00      	nop
 8001446:	e7fd      	b.n	8001444 <HardFault_Handler+0x4>

08001448 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800144c:	bf00      	nop
 800144e:	e7fd      	b.n	800144c <MemManage_Handler+0x4>

08001450 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001454:	bf00      	nop
 8001456:	e7fd      	b.n	8001454 <BusFault_Handler+0x4>

08001458 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800145c:	bf00      	nop
 800145e:	e7fd      	b.n	800145c <UsageFault_Handler+0x4>

08001460 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001464:	bf00      	nop
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr

0800146e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800146e:	b480      	push	{r7}
 8001470:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001472:	bf00      	nop
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr

0800147c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001480:	bf00      	nop
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr

0800148a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800148a:	b580      	push	{r7, lr}
 800148c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800148e:	f000 f935 	bl	80016fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001492:	bf00      	nop
 8001494:	bd80      	pop	{r7, pc}
	...

08001498 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 800149c:	4802      	ldr	r0, [pc, #8]	@ (80014a8 <DMA1_Stream0_IRQHandler+0x10>)
 800149e:	f001 f879 	bl	8002594 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80014a2:	bf00      	nop
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	240000c4 	.word	0x240000c4

080014ac <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch2);
 80014b0:	4802      	ldr	r0, [pc, #8]	@ (80014bc <DMA1_Stream1_IRQHandler+0x10>)
 80014b2:	f001 f86f 	bl	8002594 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80014b6:	bf00      	nop
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	2400013c 	.word	0x2400013c

080014c0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80014c4:	4802      	ldr	r0, [pc, #8]	@ (80014d0 <TIM2_IRQHandler+0x10>)
 80014c6:	f005 ffa3 	bl	8007410 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80014ca:	bf00      	nop
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	24000078 	.word	0x24000078

080014d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80014d8:	4b32      	ldr	r3, [pc, #200]	@ (80015a4 <SystemInit+0xd0>)
 80014da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80014de:	4a31      	ldr	r2, [pc, #196]	@ (80015a4 <SystemInit+0xd0>)
 80014e0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80014e4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80014e8:	4b2f      	ldr	r3, [pc, #188]	@ (80015a8 <SystemInit+0xd4>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f003 030f 	and.w	r3, r3, #15
 80014f0:	2b02      	cmp	r3, #2
 80014f2:	d807      	bhi.n	8001504 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80014f4:	4b2c      	ldr	r3, [pc, #176]	@ (80015a8 <SystemInit+0xd4>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f023 030f 	bic.w	r3, r3, #15
 80014fc:	4a2a      	ldr	r2, [pc, #168]	@ (80015a8 <SystemInit+0xd4>)
 80014fe:	f043 0303 	orr.w	r3, r3, #3
 8001502:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001504:	4b29      	ldr	r3, [pc, #164]	@ (80015ac <SystemInit+0xd8>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a28      	ldr	r2, [pc, #160]	@ (80015ac <SystemInit+0xd8>)
 800150a:	f043 0301 	orr.w	r3, r3, #1
 800150e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001510:	4b26      	ldr	r3, [pc, #152]	@ (80015ac <SystemInit+0xd8>)
 8001512:	2200      	movs	r2, #0
 8001514:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001516:	4b25      	ldr	r3, [pc, #148]	@ (80015ac <SystemInit+0xd8>)
 8001518:	681a      	ldr	r2, [r3, #0]
 800151a:	4924      	ldr	r1, [pc, #144]	@ (80015ac <SystemInit+0xd8>)
 800151c:	4b24      	ldr	r3, [pc, #144]	@ (80015b0 <SystemInit+0xdc>)
 800151e:	4013      	ands	r3, r2
 8001520:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001522:	4b21      	ldr	r3, [pc, #132]	@ (80015a8 <SystemInit+0xd4>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f003 030c 	and.w	r3, r3, #12
 800152a:	2b00      	cmp	r3, #0
 800152c:	d007      	beq.n	800153e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800152e:	4b1e      	ldr	r3, [pc, #120]	@ (80015a8 <SystemInit+0xd4>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f023 030f 	bic.w	r3, r3, #15
 8001536:	4a1c      	ldr	r2, [pc, #112]	@ (80015a8 <SystemInit+0xd4>)
 8001538:	f043 0303 	orr.w	r3, r3, #3
 800153c:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 800153e:	4b1b      	ldr	r3, [pc, #108]	@ (80015ac <SystemInit+0xd8>)
 8001540:	2200      	movs	r2, #0
 8001542:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8001544:	4b19      	ldr	r3, [pc, #100]	@ (80015ac <SystemInit+0xd8>)
 8001546:	2200      	movs	r2, #0
 8001548:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 800154a:	4b18      	ldr	r3, [pc, #96]	@ (80015ac <SystemInit+0xd8>)
 800154c:	2200      	movs	r2, #0
 800154e:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001550:	4b16      	ldr	r3, [pc, #88]	@ (80015ac <SystemInit+0xd8>)
 8001552:	4a18      	ldr	r2, [pc, #96]	@ (80015b4 <SystemInit+0xe0>)
 8001554:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001556:	4b15      	ldr	r3, [pc, #84]	@ (80015ac <SystemInit+0xd8>)
 8001558:	4a17      	ldr	r2, [pc, #92]	@ (80015b8 <SystemInit+0xe4>)
 800155a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800155c:	4b13      	ldr	r3, [pc, #76]	@ (80015ac <SystemInit+0xd8>)
 800155e:	4a17      	ldr	r2, [pc, #92]	@ (80015bc <SystemInit+0xe8>)
 8001560:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001562:	4b12      	ldr	r3, [pc, #72]	@ (80015ac <SystemInit+0xd8>)
 8001564:	2200      	movs	r2, #0
 8001566:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001568:	4b10      	ldr	r3, [pc, #64]	@ (80015ac <SystemInit+0xd8>)
 800156a:	4a14      	ldr	r2, [pc, #80]	@ (80015bc <SystemInit+0xe8>)
 800156c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800156e:	4b0f      	ldr	r3, [pc, #60]	@ (80015ac <SystemInit+0xd8>)
 8001570:	2200      	movs	r2, #0
 8001572:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001574:	4b0d      	ldr	r3, [pc, #52]	@ (80015ac <SystemInit+0xd8>)
 8001576:	4a11      	ldr	r2, [pc, #68]	@ (80015bc <SystemInit+0xe8>)
 8001578:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800157a:	4b0c      	ldr	r3, [pc, #48]	@ (80015ac <SystemInit+0xd8>)
 800157c:	2200      	movs	r2, #0
 800157e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001580:	4b0a      	ldr	r3, [pc, #40]	@ (80015ac <SystemInit+0xd8>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a09      	ldr	r2, [pc, #36]	@ (80015ac <SystemInit+0xd8>)
 8001586:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800158a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800158c:	4b07      	ldr	r3, [pc, #28]	@ (80015ac <SystemInit+0xd8>)
 800158e:	2200      	movs	r2, #0
 8001590:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001592:	4b0b      	ldr	r3, [pc, #44]	@ (80015c0 <SystemInit+0xec>)
 8001594:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001598:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800159a:	bf00      	nop
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr
 80015a4:	e000ed00 	.word	0xe000ed00
 80015a8:	52002000 	.word	0x52002000
 80015ac:	58024400 	.word	0x58024400
 80015b0:	eaf6ed7f 	.word	0xeaf6ed7f
 80015b4:	02020200 	.word	0x02020200
 80015b8:	01ff0000 	.word	0x01ff0000
 80015bc:	01010280 	.word	0x01010280
 80015c0:	52004000 	.word	0x52004000

080015c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
ldr   sp, =_estack      /* set stack pointer */
 80015c4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80015fc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80015c8:	f7ff ff84 	bl	80014d4 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015cc:	480c      	ldr	r0, [pc, #48]	@ (8001600 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80015ce:	490d      	ldr	r1, [pc, #52]	@ (8001604 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80015d0:	4a0d      	ldr	r2, [pc, #52]	@ (8001608 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80015d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015d4:	e002      	b.n	80015dc <LoopCopyDataInit>

080015d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015da:	3304      	adds	r3, #4

080015dc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 80015dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015e0:	d3f9      	bcc.n	80015d6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015e2:	4a0a      	ldr	r2, [pc, #40]	@ (800160c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80015e4:	4c0a      	ldr	r4, [pc, #40]	@ (8001610 <LoopFillZerobss+0x22>)
  movs r3, #0
 80015e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015e8:	e001      	b.n	80015ee <LoopFillZerobss>

080015ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015ec:	3204      	adds	r2, #4

080015ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015f0:	d3fb      	bcc.n	80015ea <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80015f2:	f008 fc65 	bl	8009ec0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015f6:	f7ff f9ff 	bl	80009f8 <main>
  bx  lr
 80015fa:	4770      	bx	lr
ldr   sp, =_estack      /* set stack pointer */
 80015fc:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8001600:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001604:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8001608:	08009f70 	.word	0x08009f70
  ldr r2, =_sbss
 800160c:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8001610:	24013ae4 	.word	0x24013ae4

08001614 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001614:	e7fe      	b.n	8001614 <ADC_IRQHandler>
	...

08001618 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800161e:	2003      	movs	r0, #3
 8001620:	f000 f980 	bl	8001924 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001624:	f003 fb44 	bl	8004cb0 <HAL_RCC_GetSysClockFreq>
 8001628:	4602      	mov	r2, r0
 800162a:	4b15      	ldr	r3, [pc, #84]	@ (8001680 <HAL_Init+0x68>)
 800162c:	699b      	ldr	r3, [r3, #24]
 800162e:	0a1b      	lsrs	r3, r3, #8
 8001630:	f003 030f 	and.w	r3, r3, #15
 8001634:	4913      	ldr	r1, [pc, #76]	@ (8001684 <HAL_Init+0x6c>)
 8001636:	5ccb      	ldrb	r3, [r1, r3]
 8001638:	f003 031f 	and.w	r3, r3, #31
 800163c:	fa22 f303 	lsr.w	r3, r2, r3
 8001640:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001642:	4b0f      	ldr	r3, [pc, #60]	@ (8001680 <HAL_Init+0x68>)
 8001644:	699b      	ldr	r3, [r3, #24]
 8001646:	f003 030f 	and.w	r3, r3, #15
 800164a:	4a0e      	ldr	r2, [pc, #56]	@ (8001684 <HAL_Init+0x6c>)
 800164c:	5cd3      	ldrb	r3, [r2, r3]
 800164e:	f003 031f 	and.w	r3, r3, #31
 8001652:	687a      	ldr	r2, [r7, #4]
 8001654:	fa22 f303 	lsr.w	r3, r2, r3
 8001658:	4a0b      	ldr	r2, [pc, #44]	@ (8001688 <HAL_Init+0x70>)
 800165a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800165c:	4a0b      	ldr	r2, [pc, #44]	@ (800168c <HAL_Init+0x74>)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001662:	2000      	movs	r0, #0
 8001664:	f000 f814 	bl	8001690 <HAL_InitTick>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	e002      	b.n	8001678 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001672:	f7ff fd53 	bl	800111c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001676:	2300      	movs	r3, #0
}
 8001678:	4618      	mov	r0, r3
 800167a:	3708      	adds	r7, #8
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	58024400 	.word	0x58024400
 8001684:	08009f20 	.word	0x08009f20
 8001688:	24000004 	.word	0x24000004
 800168c:	24000000 	.word	0x24000000

08001690 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001698:	4b15      	ldr	r3, [pc, #84]	@ (80016f0 <HAL_InitTick+0x60>)
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d101      	bne.n	80016a4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80016a0:	2301      	movs	r3, #1
 80016a2:	e021      	b.n	80016e8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80016a4:	4b13      	ldr	r3, [pc, #76]	@ (80016f4 <HAL_InitTick+0x64>)
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	4b11      	ldr	r3, [pc, #68]	@ (80016f0 <HAL_InitTick+0x60>)
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	4619      	mov	r1, r3
 80016ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80016b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80016ba:	4618      	mov	r0, r3
 80016bc:	f000 f965 	bl	800198a <HAL_SYSTICK_Config>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
 80016c8:	e00e      	b.n	80016e8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2b0f      	cmp	r3, #15
 80016ce:	d80a      	bhi.n	80016e6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016d0:	2200      	movs	r2, #0
 80016d2:	6879      	ldr	r1, [r7, #4]
 80016d4:	f04f 30ff 	mov.w	r0, #4294967295
 80016d8:	f000 f92f 	bl	800193a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016dc:	4a06      	ldr	r2, [pc, #24]	@ (80016f8 <HAL_InitTick+0x68>)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016e2:	2300      	movs	r3, #0
 80016e4:	e000      	b.n	80016e8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80016e6:	2301      	movs	r3, #1
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	3708      	adds	r7, #8
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	2400000c 	.word	0x2400000c
 80016f4:	24000000 	.word	0x24000000
 80016f8:	24000008 	.word	0x24000008

080016fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001700:	4b06      	ldr	r3, [pc, #24]	@ (800171c <HAL_IncTick+0x20>)
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	461a      	mov	r2, r3
 8001706:	4b06      	ldr	r3, [pc, #24]	@ (8001720 <HAL_IncTick+0x24>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4413      	add	r3, r2
 800170c:	4a04      	ldr	r2, [pc, #16]	@ (8001720 <HAL_IncTick+0x24>)
 800170e:	6013      	str	r3, [r2, #0]
}
 8001710:	bf00      	nop
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop
 800171c:	2400000c 	.word	0x2400000c
 8001720:	24013ae0 	.word	0x24013ae0

08001724 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  return uwTick;
 8001728:	4b03      	ldr	r3, [pc, #12]	@ (8001738 <HAL_GetTick+0x14>)
 800172a:	681b      	ldr	r3, [r3, #0]
}
 800172c:	4618      	mov	r0, r3
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop
 8001738:	24013ae0 	.word	0x24013ae0

0800173c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b084      	sub	sp, #16
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001744:	f7ff ffee 	bl	8001724 <HAL_GetTick>
 8001748:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001754:	d005      	beq.n	8001762 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001756:	4b0a      	ldr	r3, [pc, #40]	@ (8001780 <HAL_Delay+0x44>)
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	461a      	mov	r2, r3
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	4413      	add	r3, r2
 8001760:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001762:	bf00      	nop
 8001764:	f7ff ffde 	bl	8001724 <HAL_GetTick>
 8001768:	4602      	mov	r2, r0
 800176a:	68bb      	ldr	r3, [r7, #8]
 800176c:	1ad3      	subs	r3, r2, r3
 800176e:	68fa      	ldr	r2, [r7, #12]
 8001770:	429a      	cmp	r2, r3
 8001772:	d8f7      	bhi.n	8001764 <HAL_Delay+0x28>
  {
  }
}
 8001774:	bf00      	nop
 8001776:	bf00      	nop
 8001778:	3710      	adds	r7, #16
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	2400000c 	.word	0x2400000c

08001784 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001784:	b480      	push	{r7}
 8001786:	b085      	sub	sp, #20
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	f003 0307 	and.w	r3, r3, #7
 8001792:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001794:	4b0b      	ldr	r3, [pc, #44]	@ (80017c4 <__NVIC_SetPriorityGrouping+0x40>)
 8001796:	68db      	ldr	r3, [r3, #12]
 8001798:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800179a:	68ba      	ldr	r2, [r7, #8]
 800179c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80017a0:	4013      	ands	r3, r2
 80017a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80017ac:	4b06      	ldr	r3, [pc, #24]	@ (80017c8 <__NVIC_SetPriorityGrouping+0x44>)
 80017ae:	4313      	orrs	r3, r2
 80017b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017b2:	4a04      	ldr	r2, [pc, #16]	@ (80017c4 <__NVIC_SetPriorityGrouping+0x40>)
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	60d3      	str	r3, [r2, #12]
}
 80017b8:	bf00      	nop
 80017ba:	3714      	adds	r7, #20
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr
 80017c4:	e000ed00 	.word	0xe000ed00
 80017c8:	05fa0000 	.word	0x05fa0000

080017cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017d0:	4b04      	ldr	r3, [pc, #16]	@ (80017e4 <__NVIC_GetPriorityGrouping+0x18>)
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	0a1b      	lsrs	r3, r3, #8
 80017d6:	f003 0307 	and.w	r3, r3, #7
}
 80017da:	4618      	mov	r0, r3
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr
 80017e4:	e000ed00 	.word	0xe000ed00

080017e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b083      	sub	sp, #12
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	4603      	mov	r3, r0
 80017f0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80017f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	db0b      	blt.n	8001812 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017fa:	88fb      	ldrh	r3, [r7, #6]
 80017fc:	f003 021f 	and.w	r2, r3, #31
 8001800:	4907      	ldr	r1, [pc, #28]	@ (8001820 <__NVIC_EnableIRQ+0x38>)
 8001802:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001806:	095b      	lsrs	r3, r3, #5
 8001808:	2001      	movs	r0, #1
 800180a:	fa00 f202 	lsl.w	r2, r0, r2
 800180e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001812:	bf00      	nop
 8001814:	370c      	adds	r7, #12
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr
 800181e:	bf00      	nop
 8001820:	e000e100 	.word	0xe000e100

08001824 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001824:	b480      	push	{r7}
 8001826:	b083      	sub	sp, #12
 8001828:	af00      	add	r7, sp, #0
 800182a:	4603      	mov	r3, r0
 800182c:	6039      	str	r1, [r7, #0]
 800182e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001830:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001834:	2b00      	cmp	r3, #0
 8001836:	db0a      	blt.n	800184e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	b2da      	uxtb	r2, r3
 800183c:	490c      	ldr	r1, [pc, #48]	@ (8001870 <__NVIC_SetPriority+0x4c>)
 800183e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001842:	0112      	lsls	r2, r2, #4
 8001844:	b2d2      	uxtb	r2, r2
 8001846:	440b      	add	r3, r1
 8001848:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800184c:	e00a      	b.n	8001864 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	b2da      	uxtb	r2, r3
 8001852:	4908      	ldr	r1, [pc, #32]	@ (8001874 <__NVIC_SetPriority+0x50>)
 8001854:	88fb      	ldrh	r3, [r7, #6]
 8001856:	f003 030f 	and.w	r3, r3, #15
 800185a:	3b04      	subs	r3, #4
 800185c:	0112      	lsls	r2, r2, #4
 800185e:	b2d2      	uxtb	r2, r2
 8001860:	440b      	add	r3, r1
 8001862:	761a      	strb	r2, [r3, #24]
}
 8001864:	bf00      	nop
 8001866:	370c      	adds	r7, #12
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr
 8001870:	e000e100 	.word	0xe000e100
 8001874:	e000ed00 	.word	0xe000ed00

08001878 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001878:	b480      	push	{r7}
 800187a:	b089      	sub	sp, #36	@ 0x24
 800187c:	af00      	add	r7, sp, #0
 800187e:	60f8      	str	r0, [r7, #12]
 8001880:	60b9      	str	r1, [r7, #8]
 8001882:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	f003 0307 	and.w	r3, r3, #7
 800188a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800188c:	69fb      	ldr	r3, [r7, #28]
 800188e:	f1c3 0307 	rsb	r3, r3, #7
 8001892:	2b04      	cmp	r3, #4
 8001894:	bf28      	it	cs
 8001896:	2304      	movcs	r3, #4
 8001898:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	3304      	adds	r3, #4
 800189e:	2b06      	cmp	r3, #6
 80018a0:	d902      	bls.n	80018a8 <NVIC_EncodePriority+0x30>
 80018a2:	69fb      	ldr	r3, [r7, #28]
 80018a4:	3b03      	subs	r3, #3
 80018a6:	e000      	b.n	80018aa <NVIC_EncodePriority+0x32>
 80018a8:	2300      	movs	r3, #0
 80018aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018ac:	f04f 32ff 	mov.w	r2, #4294967295
 80018b0:	69bb      	ldr	r3, [r7, #24]
 80018b2:	fa02 f303 	lsl.w	r3, r2, r3
 80018b6:	43da      	mvns	r2, r3
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	401a      	ands	r2, r3
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018c0:	f04f 31ff 	mov.w	r1, #4294967295
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	fa01 f303 	lsl.w	r3, r1, r3
 80018ca:	43d9      	mvns	r1, r3
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018d0:	4313      	orrs	r3, r2
         );
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3724      	adds	r7, #36	@ 0x24
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr
	...

080018e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	3b01      	subs	r3, #1
 80018ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80018f0:	d301      	bcc.n	80018f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018f2:	2301      	movs	r3, #1
 80018f4:	e00f      	b.n	8001916 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018f6:	4a0a      	ldr	r2, [pc, #40]	@ (8001920 <SysTick_Config+0x40>)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	3b01      	subs	r3, #1
 80018fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018fe:	210f      	movs	r1, #15
 8001900:	f04f 30ff 	mov.w	r0, #4294967295
 8001904:	f7ff ff8e 	bl	8001824 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001908:	4b05      	ldr	r3, [pc, #20]	@ (8001920 <SysTick_Config+0x40>)
 800190a:	2200      	movs	r2, #0
 800190c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800190e:	4b04      	ldr	r3, [pc, #16]	@ (8001920 <SysTick_Config+0x40>)
 8001910:	2207      	movs	r2, #7
 8001912:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001914:	2300      	movs	r3, #0
}
 8001916:	4618      	mov	r0, r3
 8001918:	3708      	adds	r7, #8
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	e000e010 	.word	0xe000e010

08001924 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800192c:	6878      	ldr	r0, [r7, #4]
 800192e:	f7ff ff29 	bl	8001784 <__NVIC_SetPriorityGrouping>
}
 8001932:	bf00      	nop
 8001934:	3708      	adds	r7, #8
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}

0800193a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800193a:	b580      	push	{r7, lr}
 800193c:	b086      	sub	sp, #24
 800193e:	af00      	add	r7, sp, #0
 8001940:	4603      	mov	r3, r0
 8001942:	60b9      	str	r1, [r7, #8]
 8001944:	607a      	str	r2, [r7, #4]
 8001946:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001948:	f7ff ff40 	bl	80017cc <__NVIC_GetPriorityGrouping>
 800194c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800194e:	687a      	ldr	r2, [r7, #4]
 8001950:	68b9      	ldr	r1, [r7, #8]
 8001952:	6978      	ldr	r0, [r7, #20]
 8001954:	f7ff ff90 	bl	8001878 <NVIC_EncodePriority>
 8001958:	4602      	mov	r2, r0
 800195a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800195e:	4611      	mov	r1, r2
 8001960:	4618      	mov	r0, r3
 8001962:	f7ff ff5f 	bl	8001824 <__NVIC_SetPriority>
}
 8001966:	bf00      	nop
 8001968:	3718      	adds	r7, #24
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}

0800196e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800196e:	b580      	push	{r7, lr}
 8001970:	b082      	sub	sp, #8
 8001972:	af00      	add	r7, sp, #0
 8001974:	4603      	mov	r3, r0
 8001976:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001978:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800197c:	4618      	mov	r0, r3
 800197e:	f7ff ff33 	bl	80017e8 <__NVIC_EnableIRQ>
}
 8001982:	bf00      	nop
 8001984:	3708      	adds	r7, #8
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}

0800198a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800198a:	b580      	push	{r7, lr}
 800198c:	b082      	sub	sp, #8
 800198e:	af00      	add	r7, sp, #0
 8001990:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001992:	6878      	ldr	r0, [r7, #4]
 8001994:	f7ff ffa4 	bl	80018e0 <SysTick_Config>
 8001998:	4603      	mov	r3, r0
}
 800199a:	4618      	mov	r0, r3
 800199c:	3708      	adds	r7, #8
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
	...

080019a4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b086      	sub	sp, #24
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80019ac:	f7ff feba 	bl	8001724 <HAL_GetTick>
 80019b0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d101      	bne.n	80019bc <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
 80019ba:	e37d      	b.n	80020b8 <HAL_DMA_Init+0x714>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a66      	ldr	r2, [pc, #408]	@ (8001b5c <HAL_DMA_Init+0x1b8>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d04a      	beq.n	8001a5c <HAL_DMA_Init+0xb8>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a65      	ldr	r2, [pc, #404]	@ (8001b60 <HAL_DMA_Init+0x1bc>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d045      	beq.n	8001a5c <HAL_DMA_Init+0xb8>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a63      	ldr	r2, [pc, #396]	@ (8001b64 <HAL_DMA_Init+0x1c0>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d040      	beq.n	8001a5c <HAL_DMA_Init+0xb8>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a62      	ldr	r2, [pc, #392]	@ (8001b68 <HAL_DMA_Init+0x1c4>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d03b      	beq.n	8001a5c <HAL_DMA_Init+0xb8>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a60      	ldr	r2, [pc, #384]	@ (8001b6c <HAL_DMA_Init+0x1c8>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d036      	beq.n	8001a5c <HAL_DMA_Init+0xb8>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a5f      	ldr	r2, [pc, #380]	@ (8001b70 <HAL_DMA_Init+0x1cc>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d031      	beq.n	8001a5c <HAL_DMA_Init+0xb8>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a5d      	ldr	r2, [pc, #372]	@ (8001b74 <HAL_DMA_Init+0x1d0>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d02c      	beq.n	8001a5c <HAL_DMA_Init+0xb8>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a5c      	ldr	r2, [pc, #368]	@ (8001b78 <HAL_DMA_Init+0x1d4>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d027      	beq.n	8001a5c <HAL_DMA_Init+0xb8>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a5a      	ldr	r2, [pc, #360]	@ (8001b7c <HAL_DMA_Init+0x1d8>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d022      	beq.n	8001a5c <HAL_DMA_Init+0xb8>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a59      	ldr	r2, [pc, #356]	@ (8001b80 <HAL_DMA_Init+0x1dc>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d01d      	beq.n	8001a5c <HAL_DMA_Init+0xb8>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a57      	ldr	r2, [pc, #348]	@ (8001b84 <HAL_DMA_Init+0x1e0>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d018      	beq.n	8001a5c <HAL_DMA_Init+0xb8>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a56      	ldr	r2, [pc, #344]	@ (8001b88 <HAL_DMA_Init+0x1e4>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d013      	beq.n	8001a5c <HAL_DMA_Init+0xb8>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a54      	ldr	r2, [pc, #336]	@ (8001b8c <HAL_DMA_Init+0x1e8>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d00e      	beq.n	8001a5c <HAL_DMA_Init+0xb8>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a53      	ldr	r2, [pc, #332]	@ (8001b90 <HAL_DMA_Init+0x1ec>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d009      	beq.n	8001a5c <HAL_DMA_Init+0xb8>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a51      	ldr	r2, [pc, #324]	@ (8001b94 <HAL_DMA_Init+0x1f0>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d004      	beq.n	8001a5c <HAL_DMA_Init+0xb8>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a50      	ldr	r2, [pc, #320]	@ (8001b98 <HAL_DMA_Init+0x1f4>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d101      	bne.n	8001a60 <HAL_DMA_Init+0xbc>
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	e000      	b.n	8001a62 <HAL_DMA_Init+0xbe>
 8001a60:	2300      	movs	r3, #0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	f000 813c 	beq.w	8001ce0 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2202      	movs	r2, #2
 8001a6c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2200      	movs	r2, #0
 8001a74:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a37      	ldr	r2, [pc, #220]	@ (8001b5c <HAL_DMA_Init+0x1b8>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d04a      	beq.n	8001b18 <HAL_DMA_Init+0x174>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a36      	ldr	r2, [pc, #216]	@ (8001b60 <HAL_DMA_Init+0x1bc>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d045      	beq.n	8001b18 <HAL_DMA_Init+0x174>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a34      	ldr	r2, [pc, #208]	@ (8001b64 <HAL_DMA_Init+0x1c0>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d040      	beq.n	8001b18 <HAL_DMA_Init+0x174>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a33      	ldr	r2, [pc, #204]	@ (8001b68 <HAL_DMA_Init+0x1c4>)
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d03b      	beq.n	8001b18 <HAL_DMA_Init+0x174>
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a31      	ldr	r2, [pc, #196]	@ (8001b6c <HAL_DMA_Init+0x1c8>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d036      	beq.n	8001b18 <HAL_DMA_Init+0x174>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a30      	ldr	r2, [pc, #192]	@ (8001b70 <HAL_DMA_Init+0x1cc>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d031      	beq.n	8001b18 <HAL_DMA_Init+0x174>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a2e      	ldr	r2, [pc, #184]	@ (8001b74 <HAL_DMA_Init+0x1d0>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d02c      	beq.n	8001b18 <HAL_DMA_Init+0x174>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a2d      	ldr	r2, [pc, #180]	@ (8001b78 <HAL_DMA_Init+0x1d4>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d027      	beq.n	8001b18 <HAL_DMA_Init+0x174>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a2b      	ldr	r2, [pc, #172]	@ (8001b7c <HAL_DMA_Init+0x1d8>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d022      	beq.n	8001b18 <HAL_DMA_Init+0x174>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a2a      	ldr	r2, [pc, #168]	@ (8001b80 <HAL_DMA_Init+0x1dc>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d01d      	beq.n	8001b18 <HAL_DMA_Init+0x174>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a28      	ldr	r2, [pc, #160]	@ (8001b84 <HAL_DMA_Init+0x1e0>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d018      	beq.n	8001b18 <HAL_DMA_Init+0x174>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a27      	ldr	r2, [pc, #156]	@ (8001b88 <HAL_DMA_Init+0x1e4>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d013      	beq.n	8001b18 <HAL_DMA_Init+0x174>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a25      	ldr	r2, [pc, #148]	@ (8001b8c <HAL_DMA_Init+0x1e8>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d00e      	beq.n	8001b18 <HAL_DMA_Init+0x174>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a24      	ldr	r2, [pc, #144]	@ (8001b90 <HAL_DMA_Init+0x1ec>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d009      	beq.n	8001b18 <HAL_DMA_Init+0x174>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a22      	ldr	r2, [pc, #136]	@ (8001b94 <HAL_DMA_Init+0x1f0>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d004      	beq.n	8001b18 <HAL_DMA_Init+0x174>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a21      	ldr	r2, [pc, #132]	@ (8001b98 <HAL_DMA_Init+0x1f4>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d108      	bne.n	8001b2a <HAL_DMA_Init+0x186>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f022 0201 	bic.w	r2, r2, #1
 8001b26:	601a      	str	r2, [r3, #0]
 8001b28:	e007      	b.n	8001b3a <HAL_DMA_Init+0x196>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f022 0201 	bic.w	r2, r2, #1
 8001b38:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001b3a:	e02f      	b.n	8001b9c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b3c:	f7ff fdf2 	bl	8001724 <HAL_GetTick>
 8001b40:	4602      	mov	r2, r0
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	2b05      	cmp	r3, #5
 8001b48:	d928      	bls.n	8001b9c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2220      	movs	r2, #32
 8001b4e:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2203      	movs	r2, #3
 8001b54:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	e2ad      	b.n	80020b8 <HAL_DMA_Init+0x714>
 8001b5c:	40020010 	.word	0x40020010
 8001b60:	40020028 	.word	0x40020028
 8001b64:	40020040 	.word	0x40020040
 8001b68:	40020058 	.word	0x40020058
 8001b6c:	40020070 	.word	0x40020070
 8001b70:	40020088 	.word	0x40020088
 8001b74:	400200a0 	.word	0x400200a0
 8001b78:	400200b8 	.word	0x400200b8
 8001b7c:	40020410 	.word	0x40020410
 8001b80:	40020428 	.word	0x40020428
 8001b84:	40020440 	.word	0x40020440
 8001b88:	40020458 	.word	0x40020458
 8001b8c:	40020470 	.word	0x40020470
 8001b90:	40020488 	.word	0x40020488
 8001b94:	400204a0 	.word	0x400204a0
 8001b98:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 0301 	and.w	r3, r3, #1
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d1c8      	bne.n	8001b3c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001bb2:	697a      	ldr	r2, [r7, #20]
 8001bb4:	4b73      	ldr	r3, [pc, #460]	@ (8001d84 <HAL_DMA_Init+0x3e0>)
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001bc2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	691b      	ldr	r3, [r3, #16]
 8001bc8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bce:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	699b      	ldr	r3, [r3, #24]
 8001bd4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bda:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6a1b      	ldr	r3, [r3, #32]
 8001be0:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001be2:	697a      	ldr	r2, [r7, #20]
 8001be4:	4313      	orrs	r3, r2
 8001be6:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bec:	2b04      	cmp	r3, #4
 8001bee:	d107      	bne.n	8001c00 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	697a      	ldr	r2, [r7, #20]
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	2b28      	cmp	r3, #40	@ 0x28
 8001c06:	d903      	bls.n	8001c10 <HAL_DMA_Init+0x26c>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	2b2e      	cmp	r3, #46	@ 0x2e
 8001c0e:	d91f      	bls.n	8001c50 <HAL_DMA_Init+0x2ac>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	2b3e      	cmp	r3, #62	@ 0x3e
 8001c16:	d903      	bls.n	8001c20 <HAL_DMA_Init+0x27c>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	2b42      	cmp	r3, #66	@ 0x42
 8001c1e:	d917      	bls.n	8001c50 <HAL_DMA_Init+0x2ac>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	2b46      	cmp	r3, #70	@ 0x46
 8001c26:	d903      	bls.n	8001c30 <HAL_DMA_Init+0x28c>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	2b48      	cmp	r3, #72	@ 0x48
 8001c2e:	d90f      	bls.n	8001c50 <HAL_DMA_Init+0x2ac>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	2b4e      	cmp	r3, #78	@ 0x4e
 8001c36:	d903      	bls.n	8001c40 <HAL_DMA_Init+0x29c>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	2b52      	cmp	r3, #82	@ 0x52
 8001c3e:	d907      	bls.n	8001c50 <HAL_DMA_Init+0x2ac>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	2b73      	cmp	r3, #115	@ 0x73
 8001c46:	d905      	bls.n	8001c54 <HAL_DMA_Init+0x2b0>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	2b77      	cmp	r3, #119	@ 0x77
 8001c4e:	d801      	bhi.n	8001c54 <HAL_DMA_Init+0x2b0>
 8001c50:	2301      	movs	r3, #1
 8001c52:	e000      	b.n	8001c56 <HAL_DMA_Init+0x2b2>
 8001c54:	2300      	movs	r3, #0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d003      	beq.n	8001c62 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001c60:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	697a      	ldr	r2, [r7, #20]
 8001c68:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	695b      	ldr	r3, [r3, #20]
 8001c70:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	f023 0307 	bic.w	r3, r3, #7
 8001c78:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c7e:	697a      	ldr	r2, [r7, #20]
 8001c80:	4313      	orrs	r3, r2
 8001c82:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c88:	2b04      	cmp	r3, #4
 8001c8a:	d117      	bne.n	8001cbc <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c90:	697a      	ldr	r2, [r7, #20]
 8001c92:	4313      	orrs	r3, r2
 8001c94:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d00e      	beq.n	8001cbc <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	f001 fe70 	bl	8003984 <DMA_CheckFifoParam>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d008      	beq.n	8001cbc <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2240      	movs	r2, #64	@ 0x40
 8001cae:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	e1fd      	b.n	80020b8 <HAL_DMA_Init+0x714>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	697a      	ldr	r2, [r7, #20]
 8001cc2:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001cc4:	6878      	ldr	r0, [r7, #4]
 8001cc6:	f001 fdab 	bl	8003820 <DMA_CalcBaseAndBitshift>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cd2:	f003 031f 	and.w	r3, r3, #31
 8001cd6:	223f      	movs	r2, #63	@ 0x3f
 8001cd8:	409a      	lsls	r2, r3
 8001cda:	68bb      	ldr	r3, [r7, #8]
 8001cdc:	609a      	str	r2, [r3, #8]
 8001cde:	e0fd      	b.n	8001edc <HAL_DMA_Init+0x538>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a28      	ldr	r2, [pc, #160]	@ (8001d88 <HAL_DMA_Init+0x3e4>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d04a      	beq.n	8001d80 <HAL_DMA_Init+0x3dc>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a27      	ldr	r2, [pc, #156]	@ (8001d8c <HAL_DMA_Init+0x3e8>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d045      	beq.n	8001d80 <HAL_DMA_Init+0x3dc>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a25      	ldr	r2, [pc, #148]	@ (8001d90 <HAL_DMA_Init+0x3ec>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d040      	beq.n	8001d80 <HAL_DMA_Init+0x3dc>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a24      	ldr	r2, [pc, #144]	@ (8001d94 <HAL_DMA_Init+0x3f0>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d03b      	beq.n	8001d80 <HAL_DMA_Init+0x3dc>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a22      	ldr	r2, [pc, #136]	@ (8001d98 <HAL_DMA_Init+0x3f4>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d036      	beq.n	8001d80 <HAL_DMA_Init+0x3dc>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a21      	ldr	r2, [pc, #132]	@ (8001d9c <HAL_DMA_Init+0x3f8>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d031      	beq.n	8001d80 <HAL_DMA_Init+0x3dc>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a1f      	ldr	r2, [pc, #124]	@ (8001da0 <HAL_DMA_Init+0x3fc>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d02c      	beq.n	8001d80 <HAL_DMA_Init+0x3dc>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a1e      	ldr	r2, [pc, #120]	@ (8001da4 <HAL_DMA_Init+0x400>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d027      	beq.n	8001d80 <HAL_DMA_Init+0x3dc>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a1c      	ldr	r2, [pc, #112]	@ (8001da8 <HAL_DMA_Init+0x404>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d022      	beq.n	8001d80 <HAL_DMA_Init+0x3dc>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a1b      	ldr	r2, [pc, #108]	@ (8001dac <HAL_DMA_Init+0x408>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d01d      	beq.n	8001d80 <HAL_DMA_Init+0x3dc>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a19      	ldr	r2, [pc, #100]	@ (8001db0 <HAL_DMA_Init+0x40c>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d018      	beq.n	8001d80 <HAL_DMA_Init+0x3dc>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a18      	ldr	r2, [pc, #96]	@ (8001db4 <HAL_DMA_Init+0x410>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d013      	beq.n	8001d80 <HAL_DMA_Init+0x3dc>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a16      	ldr	r2, [pc, #88]	@ (8001db8 <HAL_DMA_Init+0x414>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d00e      	beq.n	8001d80 <HAL_DMA_Init+0x3dc>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a15      	ldr	r2, [pc, #84]	@ (8001dbc <HAL_DMA_Init+0x418>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d009      	beq.n	8001d80 <HAL_DMA_Init+0x3dc>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a13      	ldr	r2, [pc, #76]	@ (8001dc0 <HAL_DMA_Init+0x41c>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d004      	beq.n	8001d80 <HAL_DMA_Init+0x3dc>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a12      	ldr	r2, [pc, #72]	@ (8001dc4 <HAL_DMA_Init+0x420>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d123      	bne.n	8001dc8 <HAL_DMA_Init+0x424>
 8001d80:	2301      	movs	r3, #1
 8001d82:	e022      	b.n	8001dca <HAL_DMA_Init+0x426>
 8001d84:	fe10803f 	.word	0xfe10803f
 8001d88:	48022c08 	.word	0x48022c08
 8001d8c:	48022c1c 	.word	0x48022c1c
 8001d90:	48022c30 	.word	0x48022c30
 8001d94:	48022c44 	.word	0x48022c44
 8001d98:	48022c58 	.word	0x48022c58
 8001d9c:	48022c6c 	.word	0x48022c6c
 8001da0:	48022c80 	.word	0x48022c80
 8001da4:	48022c94 	.word	0x48022c94
 8001da8:	58025408 	.word	0x58025408
 8001dac:	5802541c 	.word	0x5802541c
 8001db0:	58025430 	.word	0x58025430
 8001db4:	58025444 	.word	0x58025444
 8001db8:	58025458 	.word	0x58025458
 8001dbc:	5802546c 	.word	0x5802546c
 8001dc0:	58025480 	.word	0x58025480
 8001dc4:	58025494 	.word	0x58025494
 8001dc8:	2300      	movs	r3, #0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d07d      	beq.n	8001eca <HAL_DMA_Init+0x526>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a7f      	ldr	r2, [pc, #508]	@ (8001fd0 <HAL_DMA_Init+0x62c>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d021      	beq.n	8001e1c <HAL_DMA_Init+0x478>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a7d      	ldr	r2, [pc, #500]	@ (8001fd4 <HAL_DMA_Init+0x630>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d01c      	beq.n	8001e1c <HAL_DMA_Init+0x478>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a7c      	ldr	r2, [pc, #496]	@ (8001fd8 <HAL_DMA_Init+0x634>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d017      	beq.n	8001e1c <HAL_DMA_Init+0x478>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a7a      	ldr	r2, [pc, #488]	@ (8001fdc <HAL_DMA_Init+0x638>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d012      	beq.n	8001e1c <HAL_DMA_Init+0x478>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a79      	ldr	r2, [pc, #484]	@ (8001fe0 <HAL_DMA_Init+0x63c>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d00d      	beq.n	8001e1c <HAL_DMA_Init+0x478>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a77      	ldr	r2, [pc, #476]	@ (8001fe4 <HAL_DMA_Init+0x640>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d008      	beq.n	8001e1c <HAL_DMA_Init+0x478>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a76      	ldr	r2, [pc, #472]	@ (8001fe8 <HAL_DMA_Init+0x644>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d003      	beq.n	8001e1c <HAL_DMA_Init+0x478>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a74      	ldr	r2, [pc, #464]	@ (8001fec <HAL_DMA_Init+0x648>)
 8001e1a:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2202      	movs	r2, #2
 8001e20:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2200      	movs	r2, #0
 8001e28:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001e34:	697a      	ldr	r2, [r7, #20]
 8001e36:	4b6e      	ldr	r3, [pc, #440]	@ (8001ff0 <HAL_DMA_Init+0x64c>)
 8001e38:	4013      	ands	r3, r2
 8001e3a:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	2b40      	cmp	r3, #64	@ 0x40
 8001e42:	d008      	beq.n	8001e56 <HAL_DMA_Init+0x4b2>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	2b80      	cmp	r3, #128	@ 0x80
 8001e4a:	d102      	bne.n	8001e52 <HAL_DMA_Init+0x4ae>
 8001e4c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001e50:	e002      	b.n	8001e58 <HAL_DMA_Init+0x4b4>
 8001e52:	2300      	movs	r3, #0
 8001e54:	e000      	b.n	8001e58 <HAL_DMA_Init+0x4b4>
 8001e56:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001e58:	687a      	ldr	r2, [r7, #4]
 8001e5a:	68d2      	ldr	r2, [r2, #12]
 8001e5c:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001e5e:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	691b      	ldr	r3, [r3, #16]
 8001e64:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001e66:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	695b      	ldr	r3, [r3, #20]
 8001e6c:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001e6e:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	699b      	ldr	r3, [r3, #24]
 8001e74:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001e76:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	69db      	ldr	r3, [r3, #28]
 8001e7c:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001e7e:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6a1b      	ldr	r3, [r3, #32]
 8001e84:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001e86:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001e88:	697a      	ldr	r2, [r7, #20]
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	697a      	ldr	r2, [r7, #20]
 8001e94:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	461a      	mov	r2, r3
 8001e9c:	4b55      	ldr	r3, [pc, #340]	@ (8001ff4 <HAL_DMA_Init+0x650>)
 8001e9e:	4413      	add	r3, r2
 8001ea0:	4a55      	ldr	r2, [pc, #340]	@ (8001ff8 <HAL_DMA_Init+0x654>)
 8001ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ea6:	091b      	lsrs	r3, r3, #4
 8001ea8:	009a      	lsls	r2, r3, #2
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f001 fcb6 	bl	8003820 <DMA_CalcBaseAndBitshift>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ebc:	f003 031f 	and.w	r3, r3, #31
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	409a      	lsls	r2, r3
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	605a      	str	r2, [r3, #4]
 8001ec8:	e008      	b.n	8001edc <HAL_DMA_Init+0x538>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2240      	movs	r2, #64	@ 0x40
 8001ece:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2203      	movs	r2, #3
 8001ed4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	e0ed      	b.n	80020b8 <HAL_DMA_Init+0x714>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a46      	ldr	r2, [pc, #280]	@ (8001ffc <HAL_DMA_Init+0x658>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d072      	beq.n	8001fcc <HAL_DMA_Init+0x628>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a45      	ldr	r2, [pc, #276]	@ (8002000 <HAL_DMA_Init+0x65c>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d06d      	beq.n	8001fcc <HAL_DMA_Init+0x628>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a43      	ldr	r2, [pc, #268]	@ (8002004 <HAL_DMA_Init+0x660>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d068      	beq.n	8001fcc <HAL_DMA_Init+0x628>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a42      	ldr	r2, [pc, #264]	@ (8002008 <HAL_DMA_Init+0x664>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d063      	beq.n	8001fcc <HAL_DMA_Init+0x628>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a40      	ldr	r2, [pc, #256]	@ (800200c <HAL_DMA_Init+0x668>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d05e      	beq.n	8001fcc <HAL_DMA_Init+0x628>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a3f      	ldr	r2, [pc, #252]	@ (8002010 <HAL_DMA_Init+0x66c>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d059      	beq.n	8001fcc <HAL_DMA_Init+0x628>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a3d      	ldr	r2, [pc, #244]	@ (8002014 <HAL_DMA_Init+0x670>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d054      	beq.n	8001fcc <HAL_DMA_Init+0x628>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a3c      	ldr	r2, [pc, #240]	@ (8002018 <HAL_DMA_Init+0x674>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d04f      	beq.n	8001fcc <HAL_DMA_Init+0x628>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a3a      	ldr	r2, [pc, #232]	@ (800201c <HAL_DMA_Init+0x678>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d04a      	beq.n	8001fcc <HAL_DMA_Init+0x628>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a39      	ldr	r2, [pc, #228]	@ (8002020 <HAL_DMA_Init+0x67c>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d045      	beq.n	8001fcc <HAL_DMA_Init+0x628>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a37      	ldr	r2, [pc, #220]	@ (8002024 <HAL_DMA_Init+0x680>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d040      	beq.n	8001fcc <HAL_DMA_Init+0x628>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a36      	ldr	r2, [pc, #216]	@ (8002028 <HAL_DMA_Init+0x684>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d03b      	beq.n	8001fcc <HAL_DMA_Init+0x628>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a34      	ldr	r2, [pc, #208]	@ (800202c <HAL_DMA_Init+0x688>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d036      	beq.n	8001fcc <HAL_DMA_Init+0x628>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a33      	ldr	r2, [pc, #204]	@ (8002030 <HAL_DMA_Init+0x68c>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d031      	beq.n	8001fcc <HAL_DMA_Init+0x628>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a31      	ldr	r2, [pc, #196]	@ (8002034 <HAL_DMA_Init+0x690>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d02c      	beq.n	8001fcc <HAL_DMA_Init+0x628>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a30      	ldr	r2, [pc, #192]	@ (8002038 <HAL_DMA_Init+0x694>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d027      	beq.n	8001fcc <HAL_DMA_Init+0x628>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a13      	ldr	r2, [pc, #76]	@ (8001fd0 <HAL_DMA_Init+0x62c>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d022      	beq.n	8001fcc <HAL_DMA_Init+0x628>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a12      	ldr	r2, [pc, #72]	@ (8001fd4 <HAL_DMA_Init+0x630>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d01d      	beq.n	8001fcc <HAL_DMA_Init+0x628>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a10      	ldr	r2, [pc, #64]	@ (8001fd8 <HAL_DMA_Init+0x634>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d018      	beq.n	8001fcc <HAL_DMA_Init+0x628>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a0f      	ldr	r2, [pc, #60]	@ (8001fdc <HAL_DMA_Init+0x638>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d013      	beq.n	8001fcc <HAL_DMA_Init+0x628>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a0d      	ldr	r2, [pc, #52]	@ (8001fe0 <HAL_DMA_Init+0x63c>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d00e      	beq.n	8001fcc <HAL_DMA_Init+0x628>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a0c      	ldr	r2, [pc, #48]	@ (8001fe4 <HAL_DMA_Init+0x640>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d009      	beq.n	8001fcc <HAL_DMA_Init+0x628>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a0a      	ldr	r2, [pc, #40]	@ (8001fe8 <HAL_DMA_Init+0x644>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d004      	beq.n	8001fcc <HAL_DMA_Init+0x628>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a09      	ldr	r2, [pc, #36]	@ (8001fec <HAL_DMA_Init+0x648>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d137      	bne.n	800203c <HAL_DMA_Init+0x698>
 8001fcc:	2301      	movs	r3, #1
 8001fce:	e036      	b.n	800203e <HAL_DMA_Init+0x69a>
 8001fd0:	58025408 	.word	0x58025408
 8001fd4:	5802541c 	.word	0x5802541c
 8001fd8:	58025430 	.word	0x58025430
 8001fdc:	58025444 	.word	0x58025444
 8001fe0:	58025458 	.word	0x58025458
 8001fe4:	5802546c 	.word	0x5802546c
 8001fe8:	58025480 	.word	0x58025480
 8001fec:	58025494 	.word	0x58025494
 8001ff0:	fffe000f 	.word	0xfffe000f
 8001ff4:	a7fdabf8 	.word	0xa7fdabf8
 8001ff8:	cccccccd 	.word	0xcccccccd
 8001ffc:	40020010 	.word	0x40020010
 8002000:	40020028 	.word	0x40020028
 8002004:	40020040 	.word	0x40020040
 8002008:	40020058 	.word	0x40020058
 800200c:	40020070 	.word	0x40020070
 8002010:	40020088 	.word	0x40020088
 8002014:	400200a0 	.word	0x400200a0
 8002018:	400200b8 	.word	0x400200b8
 800201c:	40020410 	.word	0x40020410
 8002020:	40020428 	.word	0x40020428
 8002024:	40020440 	.word	0x40020440
 8002028:	40020458 	.word	0x40020458
 800202c:	40020470 	.word	0x40020470
 8002030:	40020488 	.word	0x40020488
 8002034:	400204a0 	.word	0x400204a0
 8002038:	400204b8 	.word	0x400204b8
 800203c:	2300      	movs	r3, #0
 800203e:	2b00      	cmp	r3, #0
 8002040:	d032      	beq.n	80020a8 <HAL_DMA_Init+0x704>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	f001 fd1a 	bl	8003a7c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	2b80      	cmp	r3, #128	@ 0x80
 800204e:	d102      	bne.n	8002056 <HAL_DMA_Init+0x6b2>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2200      	movs	r2, #0
 8002054:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	685a      	ldr	r2, [r3, #4]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800205e:	b2d2      	uxtb	r2, r2
 8002060:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002066:	687a      	ldr	r2, [r7, #4]
 8002068:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800206a:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d010      	beq.n	8002096 <HAL_DMA_Init+0x6f2>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	2b08      	cmp	r3, #8
 800207a:	d80c      	bhi.n	8002096 <HAL_DMA_Init+0x6f2>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800207c:	6878      	ldr	r0, [r7, #4]
 800207e:	f001 fd97 	bl	8003bb0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002086:	2200      	movs	r2, #0
 8002088:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800208e:	687a      	ldr	r2, [r7, #4]
 8002090:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002092:	605a      	str	r2, [r3, #4]
 8002094:	e008      	b.n	80020a8 <HAL_DMA_Init+0x704>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2200      	movs	r2, #0
 800209a:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2200      	movs	r2, #0
 80020a0:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2200      	movs	r2, #0
 80020a6:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2200      	movs	r2, #0
 80020ac:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2201      	movs	r2, #1
 80020b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80020b6:	2300      	movs	r3, #0
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	3718      	adds	r7, #24
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}

080020c0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b086      	sub	sp, #24
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	60f8      	str	r0, [r7, #12]
 80020c8:	60b9      	str	r1, [r7, #8]
 80020ca:	607a      	str	r2, [r7, #4]
 80020cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80020ce:	2300      	movs	r3, #0
 80020d0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d101      	bne.n	80020dc <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	e226      	b.n	800252a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d101      	bne.n	80020ea <HAL_DMA_Start_IT+0x2a>
 80020e6:	2302      	movs	r3, #2
 80020e8:	e21f      	b.n	800252a <HAL_DMA_Start_IT+0x46a>
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	2201      	movs	r2, #1
 80020ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	2b01      	cmp	r3, #1
 80020fc:	f040 820a 	bne.w	8002514 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	2202      	movs	r2, #2
 8002104:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	2200      	movs	r2, #0
 800210c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a68      	ldr	r2, [pc, #416]	@ (80022b4 <HAL_DMA_Start_IT+0x1f4>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d04a      	beq.n	80021ae <HAL_DMA_Start_IT+0xee>
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a66      	ldr	r2, [pc, #408]	@ (80022b8 <HAL_DMA_Start_IT+0x1f8>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d045      	beq.n	80021ae <HAL_DMA_Start_IT+0xee>
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a65      	ldr	r2, [pc, #404]	@ (80022bc <HAL_DMA_Start_IT+0x1fc>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d040      	beq.n	80021ae <HAL_DMA_Start_IT+0xee>
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a63      	ldr	r2, [pc, #396]	@ (80022c0 <HAL_DMA_Start_IT+0x200>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d03b      	beq.n	80021ae <HAL_DMA_Start_IT+0xee>
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a62      	ldr	r2, [pc, #392]	@ (80022c4 <HAL_DMA_Start_IT+0x204>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d036      	beq.n	80021ae <HAL_DMA_Start_IT+0xee>
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a60      	ldr	r2, [pc, #384]	@ (80022c8 <HAL_DMA_Start_IT+0x208>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d031      	beq.n	80021ae <HAL_DMA_Start_IT+0xee>
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a5f      	ldr	r2, [pc, #380]	@ (80022cc <HAL_DMA_Start_IT+0x20c>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d02c      	beq.n	80021ae <HAL_DMA_Start_IT+0xee>
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a5d      	ldr	r2, [pc, #372]	@ (80022d0 <HAL_DMA_Start_IT+0x210>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d027      	beq.n	80021ae <HAL_DMA_Start_IT+0xee>
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a5c      	ldr	r2, [pc, #368]	@ (80022d4 <HAL_DMA_Start_IT+0x214>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d022      	beq.n	80021ae <HAL_DMA_Start_IT+0xee>
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a5a      	ldr	r2, [pc, #360]	@ (80022d8 <HAL_DMA_Start_IT+0x218>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d01d      	beq.n	80021ae <HAL_DMA_Start_IT+0xee>
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a59      	ldr	r2, [pc, #356]	@ (80022dc <HAL_DMA_Start_IT+0x21c>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d018      	beq.n	80021ae <HAL_DMA_Start_IT+0xee>
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a57      	ldr	r2, [pc, #348]	@ (80022e0 <HAL_DMA_Start_IT+0x220>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d013      	beq.n	80021ae <HAL_DMA_Start_IT+0xee>
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a56      	ldr	r2, [pc, #344]	@ (80022e4 <HAL_DMA_Start_IT+0x224>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d00e      	beq.n	80021ae <HAL_DMA_Start_IT+0xee>
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a54      	ldr	r2, [pc, #336]	@ (80022e8 <HAL_DMA_Start_IT+0x228>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d009      	beq.n	80021ae <HAL_DMA_Start_IT+0xee>
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a53      	ldr	r2, [pc, #332]	@ (80022ec <HAL_DMA_Start_IT+0x22c>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d004      	beq.n	80021ae <HAL_DMA_Start_IT+0xee>
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a51      	ldr	r2, [pc, #324]	@ (80022f0 <HAL_DMA_Start_IT+0x230>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d108      	bne.n	80021c0 <HAL_DMA_Start_IT+0x100>
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f022 0201 	bic.w	r2, r2, #1
 80021bc:	601a      	str	r2, [r3, #0]
 80021be:	e007      	b.n	80021d0 <HAL_DMA_Start_IT+0x110>
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f022 0201 	bic.w	r2, r2, #1
 80021ce:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	687a      	ldr	r2, [r7, #4]
 80021d4:	68b9      	ldr	r1, [r7, #8]
 80021d6:	68f8      	ldr	r0, [r7, #12]
 80021d8:	f001 f93e 	bl	8003458 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a34      	ldr	r2, [pc, #208]	@ (80022b4 <HAL_DMA_Start_IT+0x1f4>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d04a      	beq.n	800227c <HAL_DMA_Start_IT+0x1bc>
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a33      	ldr	r2, [pc, #204]	@ (80022b8 <HAL_DMA_Start_IT+0x1f8>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d045      	beq.n	800227c <HAL_DMA_Start_IT+0x1bc>
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a31      	ldr	r2, [pc, #196]	@ (80022bc <HAL_DMA_Start_IT+0x1fc>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d040      	beq.n	800227c <HAL_DMA_Start_IT+0x1bc>
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a30      	ldr	r2, [pc, #192]	@ (80022c0 <HAL_DMA_Start_IT+0x200>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d03b      	beq.n	800227c <HAL_DMA_Start_IT+0x1bc>
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a2e      	ldr	r2, [pc, #184]	@ (80022c4 <HAL_DMA_Start_IT+0x204>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d036      	beq.n	800227c <HAL_DMA_Start_IT+0x1bc>
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a2d      	ldr	r2, [pc, #180]	@ (80022c8 <HAL_DMA_Start_IT+0x208>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d031      	beq.n	800227c <HAL_DMA_Start_IT+0x1bc>
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a2b      	ldr	r2, [pc, #172]	@ (80022cc <HAL_DMA_Start_IT+0x20c>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d02c      	beq.n	800227c <HAL_DMA_Start_IT+0x1bc>
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a2a      	ldr	r2, [pc, #168]	@ (80022d0 <HAL_DMA_Start_IT+0x210>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d027      	beq.n	800227c <HAL_DMA_Start_IT+0x1bc>
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a28      	ldr	r2, [pc, #160]	@ (80022d4 <HAL_DMA_Start_IT+0x214>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d022      	beq.n	800227c <HAL_DMA_Start_IT+0x1bc>
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a27      	ldr	r2, [pc, #156]	@ (80022d8 <HAL_DMA_Start_IT+0x218>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d01d      	beq.n	800227c <HAL_DMA_Start_IT+0x1bc>
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a25      	ldr	r2, [pc, #148]	@ (80022dc <HAL_DMA_Start_IT+0x21c>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d018      	beq.n	800227c <HAL_DMA_Start_IT+0x1bc>
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a24      	ldr	r2, [pc, #144]	@ (80022e0 <HAL_DMA_Start_IT+0x220>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d013      	beq.n	800227c <HAL_DMA_Start_IT+0x1bc>
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a22      	ldr	r2, [pc, #136]	@ (80022e4 <HAL_DMA_Start_IT+0x224>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d00e      	beq.n	800227c <HAL_DMA_Start_IT+0x1bc>
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a21      	ldr	r2, [pc, #132]	@ (80022e8 <HAL_DMA_Start_IT+0x228>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d009      	beq.n	800227c <HAL_DMA_Start_IT+0x1bc>
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a1f      	ldr	r2, [pc, #124]	@ (80022ec <HAL_DMA_Start_IT+0x22c>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d004      	beq.n	800227c <HAL_DMA_Start_IT+0x1bc>
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a1e      	ldr	r2, [pc, #120]	@ (80022f0 <HAL_DMA_Start_IT+0x230>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d101      	bne.n	8002280 <HAL_DMA_Start_IT+0x1c0>
 800227c:	2301      	movs	r3, #1
 800227e:	e000      	b.n	8002282 <HAL_DMA_Start_IT+0x1c2>
 8002280:	2300      	movs	r3, #0
 8002282:	2b00      	cmp	r3, #0
 8002284:	d036      	beq.n	80022f4 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f023 021e 	bic.w	r2, r3, #30
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f042 0216 	orr.w	r2, r2, #22
 8002298:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d03e      	beq.n	8002320 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f042 0208 	orr.w	r2, r2, #8
 80022b0:	601a      	str	r2, [r3, #0]
 80022b2:	e035      	b.n	8002320 <HAL_DMA_Start_IT+0x260>
 80022b4:	40020010 	.word	0x40020010
 80022b8:	40020028 	.word	0x40020028
 80022bc:	40020040 	.word	0x40020040
 80022c0:	40020058 	.word	0x40020058
 80022c4:	40020070 	.word	0x40020070
 80022c8:	40020088 	.word	0x40020088
 80022cc:	400200a0 	.word	0x400200a0
 80022d0:	400200b8 	.word	0x400200b8
 80022d4:	40020410 	.word	0x40020410
 80022d8:	40020428 	.word	0x40020428
 80022dc:	40020440 	.word	0x40020440
 80022e0:	40020458 	.word	0x40020458
 80022e4:	40020470 	.word	0x40020470
 80022e8:	40020488 	.word	0x40020488
 80022ec:	400204a0 	.word	0x400204a0
 80022f0:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f023 020e 	bic.w	r2, r3, #14
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f042 020a 	orr.w	r2, r2, #10
 8002306:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800230c:	2b00      	cmp	r3, #0
 800230e:	d007      	beq.n	8002320 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f042 0204 	orr.w	r2, r2, #4
 800231e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a83      	ldr	r2, [pc, #524]	@ (8002534 <HAL_DMA_Start_IT+0x474>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d072      	beq.n	8002410 <HAL_DMA_Start_IT+0x350>
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a82      	ldr	r2, [pc, #520]	@ (8002538 <HAL_DMA_Start_IT+0x478>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d06d      	beq.n	8002410 <HAL_DMA_Start_IT+0x350>
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a80      	ldr	r2, [pc, #512]	@ (800253c <HAL_DMA_Start_IT+0x47c>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d068      	beq.n	8002410 <HAL_DMA_Start_IT+0x350>
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a7f      	ldr	r2, [pc, #508]	@ (8002540 <HAL_DMA_Start_IT+0x480>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d063      	beq.n	8002410 <HAL_DMA_Start_IT+0x350>
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a7d      	ldr	r2, [pc, #500]	@ (8002544 <HAL_DMA_Start_IT+0x484>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d05e      	beq.n	8002410 <HAL_DMA_Start_IT+0x350>
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a7c      	ldr	r2, [pc, #496]	@ (8002548 <HAL_DMA_Start_IT+0x488>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d059      	beq.n	8002410 <HAL_DMA_Start_IT+0x350>
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a7a      	ldr	r2, [pc, #488]	@ (800254c <HAL_DMA_Start_IT+0x48c>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d054      	beq.n	8002410 <HAL_DMA_Start_IT+0x350>
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a79      	ldr	r2, [pc, #484]	@ (8002550 <HAL_DMA_Start_IT+0x490>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d04f      	beq.n	8002410 <HAL_DMA_Start_IT+0x350>
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a77      	ldr	r2, [pc, #476]	@ (8002554 <HAL_DMA_Start_IT+0x494>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d04a      	beq.n	8002410 <HAL_DMA_Start_IT+0x350>
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a76      	ldr	r2, [pc, #472]	@ (8002558 <HAL_DMA_Start_IT+0x498>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d045      	beq.n	8002410 <HAL_DMA_Start_IT+0x350>
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a74      	ldr	r2, [pc, #464]	@ (800255c <HAL_DMA_Start_IT+0x49c>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d040      	beq.n	8002410 <HAL_DMA_Start_IT+0x350>
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a73      	ldr	r2, [pc, #460]	@ (8002560 <HAL_DMA_Start_IT+0x4a0>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d03b      	beq.n	8002410 <HAL_DMA_Start_IT+0x350>
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a71      	ldr	r2, [pc, #452]	@ (8002564 <HAL_DMA_Start_IT+0x4a4>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d036      	beq.n	8002410 <HAL_DMA_Start_IT+0x350>
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a70      	ldr	r2, [pc, #448]	@ (8002568 <HAL_DMA_Start_IT+0x4a8>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d031      	beq.n	8002410 <HAL_DMA_Start_IT+0x350>
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a6e      	ldr	r2, [pc, #440]	@ (800256c <HAL_DMA_Start_IT+0x4ac>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d02c      	beq.n	8002410 <HAL_DMA_Start_IT+0x350>
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a6d      	ldr	r2, [pc, #436]	@ (8002570 <HAL_DMA_Start_IT+0x4b0>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d027      	beq.n	8002410 <HAL_DMA_Start_IT+0x350>
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a6b      	ldr	r2, [pc, #428]	@ (8002574 <HAL_DMA_Start_IT+0x4b4>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d022      	beq.n	8002410 <HAL_DMA_Start_IT+0x350>
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a6a      	ldr	r2, [pc, #424]	@ (8002578 <HAL_DMA_Start_IT+0x4b8>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d01d      	beq.n	8002410 <HAL_DMA_Start_IT+0x350>
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a68      	ldr	r2, [pc, #416]	@ (800257c <HAL_DMA_Start_IT+0x4bc>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d018      	beq.n	8002410 <HAL_DMA_Start_IT+0x350>
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a67      	ldr	r2, [pc, #412]	@ (8002580 <HAL_DMA_Start_IT+0x4c0>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d013      	beq.n	8002410 <HAL_DMA_Start_IT+0x350>
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a65      	ldr	r2, [pc, #404]	@ (8002584 <HAL_DMA_Start_IT+0x4c4>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d00e      	beq.n	8002410 <HAL_DMA_Start_IT+0x350>
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a64      	ldr	r2, [pc, #400]	@ (8002588 <HAL_DMA_Start_IT+0x4c8>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d009      	beq.n	8002410 <HAL_DMA_Start_IT+0x350>
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a62      	ldr	r2, [pc, #392]	@ (800258c <HAL_DMA_Start_IT+0x4cc>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d004      	beq.n	8002410 <HAL_DMA_Start_IT+0x350>
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a61      	ldr	r2, [pc, #388]	@ (8002590 <HAL_DMA_Start_IT+0x4d0>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d101      	bne.n	8002414 <HAL_DMA_Start_IT+0x354>
 8002410:	2301      	movs	r3, #1
 8002412:	e000      	b.n	8002416 <HAL_DMA_Start_IT+0x356>
 8002414:	2300      	movs	r3, #0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d01a      	beq.n	8002450 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002424:	2b00      	cmp	r3, #0
 8002426:	d007      	beq.n	8002438 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002432:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002436:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800243c:	2b00      	cmp	r3, #0
 800243e:	d007      	beq.n	8002450 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800244a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800244e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a37      	ldr	r2, [pc, #220]	@ (8002534 <HAL_DMA_Start_IT+0x474>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d04a      	beq.n	80024f0 <HAL_DMA_Start_IT+0x430>
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a36      	ldr	r2, [pc, #216]	@ (8002538 <HAL_DMA_Start_IT+0x478>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d045      	beq.n	80024f0 <HAL_DMA_Start_IT+0x430>
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a34      	ldr	r2, [pc, #208]	@ (800253c <HAL_DMA_Start_IT+0x47c>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d040      	beq.n	80024f0 <HAL_DMA_Start_IT+0x430>
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a33      	ldr	r2, [pc, #204]	@ (8002540 <HAL_DMA_Start_IT+0x480>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d03b      	beq.n	80024f0 <HAL_DMA_Start_IT+0x430>
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a31      	ldr	r2, [pc, #196]	@ (8002544 <HAL_DMA_Start_IT+0x484>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d036      	beq.n	80024f0 <HAL_DMA_Start_IT+0x430>
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a30      	ldr	r2, [pc, #192]	@ (8002548 <HAL_DMA_Start_IT+0x488>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d031      	beq.n	80024f0 <HAL_DMA_Start_IT+0x430>
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a2e      	ldr	r2, [pc, #184]	@ (800254c <HAL_DMA_Start_IT+0x48c>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d02c      	beq.n	80024f0 <HAL_DMA_Start_IT+0x430>
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a2d      	ldr	r2, [pc, #180]	@ (8002550 <HAL_DMA_Start_IT+0x490>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d027      	beq.n	80024f0 <HAL_DMA_Start_IT+0x430>
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a2b      	ldr	r2, [pc, #172]	@ (8002554 <HAL_DMA_Start_IT+0x494>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d022      	beq.n	80024f0 <HAL_DMA_Start_IT+0x430>
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a2a      	ldr	r2, [pc, #168]	@ (8002558 <HAL_DMA_Start_IT+0x498>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d01d      	beq.n	80024f0 <HAL_DMA_Start_IT+0x430>
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a28      	ldr	r2, [pc, #160]	@ (800255c <HAL_DMA_Start_IT+0x49c>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d018      	beq.n	80024f0 <HAL_DMA_Start_IT+0x430>
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a27      	ldr	r2, [pc, #156]	@ (8002560 <HAL_DMA_Start_IT+0x4a0>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d013      	beq.n	80024f0 <HAL_DMA_Start_IT+0x430>
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a25      	ldr	r2, [pc, #148]	@ (8002564 <HAL_DMA_Start_IT+0x4a4>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d00e      	beq.n	80024f0 <HAL_DMA_Start_IT+0x430>
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a24      	ldr	r2, [pc, #144]	@ (8002568 <HAL_DMA_Start_IT+0x4a8>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d009      	beq.n	80024f0 <HAL_DMA_Start_IT+0x430>
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a22      	ldr	r2, [pc, #136]	@ (800256c <HAL_DMA_Start_IT+0x4ac>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d004      	beq.n	80024f0 <HAL_DMA_Start_IT+0x430>
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a21      	ldr	r2, [pc, #132]	@ (8002570 <HAL_DMA_Start_IT+0x4b0>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d108      	bne.n	8002502 <HAL_DMA_Start_IT+0x442>
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f042 0201 	orr.w	r2, r2, #1
 80024fe:	601a      	str	r2, [r3, #0]
 8002500:	e012      	b.n	8002528 <HAL_DMA_Start_IT+0x468>
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f042 0201 	orr.w	r2, r2, #1
 8002510:	601a      	str	r2, [r3, #0]
 8002512:	e009      	b.n	8002528 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800251a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	2200      	movs	r2, #0
 8002520:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8002524:	2301      	movs	r3, #1
 8002526:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002528:	7dfb      	ldrb	r3, [r7, #23]
}
 800252a:	4618      	mov	r0, r3
 800252c:	3718      	adds	r7, #24
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	40020010 	.word	0x40020010
 8002538:	40020028 	.word	0x40020028
 800253c:	40020040 	.word	0x40020040
 8002540:	40020058 	.word	0x40020058
 8002544:	40020070 	.word	0x40020070
 8002548:	40020088 	.word	0x40020088
 800254c:	400200a0 	.word	0x400200a0
 8002550:	400200b8 	.word	0x400200b8
 8002554:	40020410 	.word	0x40020410
 8002558:	40020428 	.word	0x40020428
 800255c:	40020440 	.word	0x40020440
 8002560:	40020458 	.word	0x40020458
 8002564:	40020470 	.word	0x40020470
 8002568:	40020488 	.word	0x40020488
 800256c:	400204a0 	.word	0x400204a0
 8002570:	400204b8 	.word	0x400204b8
 8002574:	58025408 	.word	0x58025408
 8002578:	5802541c 	.word	0x5802541c
 800257c:	58025430 	.word	0x58025430
 8002580:	58025444 	.word	0x58025444
 8002584:	58025458 	.word	0x58025458
 8002588:	5802546c 	.word	0x5802546c
 800258c:	58025480 	.word	0x58025480
 8002590:	58025494 	.word	0x58025494

08002594 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b08a      	sub	sp, #40	@ 0x28
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800259c:	2300      	movs	r3, #0
 800259e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80025a0:	4b67      	ldr	r3, [pc, #412]	@ (8002740 <HAL_DMA_IRQHandler+0x1ac>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a67      	ldr	r2, [pc, #412]	@ (8002744 <HAL_DMA_IRQHandler+0x1b0>)
 80025a6:	fba2 2303 	umull	r2, r3, r2, r3
 80025aa:	0a9b      	lsrs	r3, r3, #10
 80025ac:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025b2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025b8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80025ba:	6a3b      	ldr	r3, [r7, #32]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80025c0:	69fb      	ldr	r3, [r7, #28]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a5f      	ldr	r2, [pc, #380]	@ (8002748 <HAL_DMA_IRQHandler+0x1b4>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d04a      	beq.n	8002666 <HAL_DMA_IRQHandler+0xd2>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a5d      	ldr	r2, [pc, #372]	@ (800274c <HAL_DMA_IRQHandler+0x1b8>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d045      	beq.n	8002666 <HAL_DMA_IRQHandler+0xd2>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a5c      	ldr	r2, [pc, #368]	@ (8002750 <HAL_DMA_IRQHandler+0x1bc>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d040      	beq.n	8002666 <HAL_DMA_IRQHandler+0xd2>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a5a      	ldr	r2, [pc, #360]	@ (8002754 <HAL_DMA_IRQHandler+0x1c0>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d03b      	beq.n	8002666 <HAL_DMA_IRQHandler+0xd2>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a59      	ldr	r2, [pc, #356]	@ (8002758 <HAL_DMA_IRQHandler+0x1c4>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d036      	beq.n	8002666 <HAL_DMA_IRQHandler+0xd2>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a57      	ldr	r2, [pc, #348]	@ (800275c <HAL_DMA_IRQHandler+0x1c8>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d031      	beq.n	8002666 <HAL_DMA_IRQHandler+0xd2>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a56      	ldr	r2, [pc, #344]	@ (8002760 <HAL_DMA_IRQHandler+0x1cc>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d02c      	beq.n	8002666 <HAL_DMA_IRQHandler+0xd2>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a54      	ldr	r2, [pc, #336]	@ (8002764 <HAL_DMA_IRQHandler+0x1d0>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d027      	beq.n	8002666 <HAL_DMA_IRQHandler+0xd2>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a53      	ldr	r2, [pc, #332]	@ (8002768 <HAL_DMA_IRQHandler+0x1d4>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d022      	beq.n	8002666 <HAL_DMA_IRQHandler+0xd2>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a51      	ldr	r2, [pc, #324]	@ (800276c <HAL_DMA_IRQHandler+0x1d8>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d01d      	beq.n	8002666 <HAL_DMA_IRQHandler+0xd2>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a50      	ldr	r2, [pc, #320]	@ (8002770 <HAL_DMA_IRQHandler+0x1dc>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d018      	beq.n	8002666 <HAL_DMA_IRQHandler+0xd2>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a4e      	ldr	r2, [pc, #312]	@ (8002774 <HAL_DMA_IRQHandler+0x1e0>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d013      	beq.n	8002666 <HAL_DMA_IRQHandler+0xd2>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a4d      	ldr	r2, [pc, #308]	@ (8002778 <HAL_DMA_IRQHandler+0x1e4>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d00e      	beq.n	8002666 <HAL_DMA_IRQHandler+0xd2>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a4b      	ldr	r2, [pc, #300]	@ (800277c <HAL_DMA_IRQHandler+0x1e8>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d009      	beq.n	8002666 <HAL_DMA_IRQHandler+0xd2>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a4a      	ldr	r2, [pc, #296]	@ (8002780 <HAL_DMA_IRQHandler+0x1ec>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d004      	beq.n	8002666 <HAL_DMA_IRQHandler+0xd2>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a48      	ldr	r2, [pc, #288]	@ (8002784 <HAL_DMA_IRQHandler+0x1f0>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d101      	bne.n	800266a <HAL_DMA_IRQHandler+0xd6>
 8002666:	2301      	movs	r3, #1
 8002668:	e000      	b.n	800266c <HAL_DMA_IRQHandler+0xd8>
 800266a:	2300      	movs	r3, #0
 800266c:	2b00      	cmp	r3, #0
 800266e:	f000 842b 	beq.w	8002ec8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002676:	f003 031f 	and.w	r3, r3, #31
 800267a:	2208      	movs	r2, #8
 800267c:	409a      	lsls	r2, r3
 800267e:	69bb      	ldr	r3, [r7, #24]
 8002680:	4013      	ands	r3, r2
 8002682:	2b00      	cmp	r3, #0
 8002684:	f000 80a2 	beq.w	80027cc <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a2e      	ldr	r2, [pc, #184]	@ (8002748 <HAL_DMA_IRQHandler+0x1b4>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d04a      	beq.n	8002728 <HAL_DMA_IRQHandler+0x194>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a2d      	ldr	r2, [pc, #180]	@ (800274c <HAL_DMA_IRQHandler+0x1b8>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d045      	beq.n	8002728 <HAL_DMA_IRQHandler+0x194>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a2b      	ldr	r2, [pc, #172]	@ (8002750 <HAL_DMA_IRQHandler+0x1bc>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d040      	beq.n	8002728 <HAL_DMA_IRQHandler+0x194>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a2a      	ldr	r2, [pc, #168]	@ (8002754 <HAL_DMA_IRQHandler+0x1c0>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d03b      	beq.n	8002728 <HAL_DMA_IRQHandler+0x194>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a28      	ldr	r2, [pc, #160]	@ (8002758 <HAL_DMA_IRQHandler+0x1c4>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d036      	beq.n	8002728 <HAL_DMA_IRQHandler+0x194>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a27      	ldr	r2, [pc, #156]	@ (800275c <HAL_DMA_IRQHandler+0x1c8>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d031      	beq.n	8002728 <HAL_DMA_IRQHandler+0x194>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a25      	ldr	r2, [pc, #148]	@ (8002760 <HAL_DMA_IRQHandler+0x1cc>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d02c      	beq.n	8002728 <HAL_DMA_IRQHandler+0x194>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a24      	ldr	r2, [pc, #144]	@ (8002764 <HAL_DMA_IRQHandler+0x1d0>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d027      	beq.n	8002728 <HAL_DMA_IRQHandler+0x194>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a22      	ldr	r2, [pc, #136]	@ (8002768 <HAL_DMA_IRQHandler+0x1d4>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d022      	beq.n	8002728 <HAL_DMA_IRQHandler+0x194>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a21      	ldr	r2, [pc, #132]	@ (800276c <HAL_DMA_IRQHandler+0x1d8>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d01d      	beq.n	8002728 <HAL_DMA_IRQHandler+0x194>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a1f      	ldr	r2, [pc, #124]	@ (8002770 <HAL_DMA_IRQHandler+0x1dc>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d018      	beq.n	8002728 <HAL_DMA_IRQHandler+0x194>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a1e      	ldr	r2, [pc, #120]	@ (8002774 <HAL_DMA_IRQHandler+0x1e0>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d013      	beq.n	8002728 <HAL_DMA_IRQHandler+0x194>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a1c      	ldr	r2, [pc, #112]	@ (8002778 <HAL_DMA_IRQHandler+0x1e4>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d00e      	beq.n	8002728 <HAL_DMA_IRQHandler+0x194>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a1b      	ldr	r2, [pc, #108]	@ (800277c <HAL_DMA_IRQHandler+0x1e8>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d009      	beq.n	8002728 <HAL_DMA_IRQHandler+0x194>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a19      	ldr	r2, [pc, #100]	@ (8002780 <HAL_DMA_IRQHandler+0x1ec>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d004      	beq.n	8002728 <HAL_DMA_IRQHandler+0x194>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a18      	ldr	r2, [pc, #96]	@ (8002784 <HAL_DMA_IRQHandler+0x1f0>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d12f      	bne.n	8002788 <HAL_DMA_IRQHandler+0x1f4>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 0304 	and.w	r3, r3, #4
 8002732:	2b00      	cmp	r3, #0
 8002734:	bf14      	ite	ne
 8002736:	2301      	movne	r3, #1
 8002738:	2300      	moveq	r3, #0
 800273a:	b2db      	uxtb	r3, r3
 800273c:	e02e      	b.n	800279c <HAL_DMA_IRQHandler+0x208>
 800273e:	bf00      	nop
 8002740:	24000000 	.word	0x24000000
 8002744:	1b4e81b5 	.word	0x1b4e81b5
 8002748:	40020010 	.word	0x40020010
 800274c:	40020028 	.word	0x40020028
 8002750:	40020040 	.word	0x40020040
 8002754:	40020058 	.word	0x40020058
 8002758:	40020070 	.word	0x40020070
 800275c:	40020088 	.word	0x40020088
 8002760:	400200a0 	.word	0x400200a0
 8002764:	400200b8 	.word	0x400200b8
 8002768:	40020410 	.word	0x40020410
 800276c:	40020428 	.word	0x40020428
 8002770:	40020440 	.word	0x40020440
 8002774:	40020458 	.word	0x40020458
 8002778:	40020470 	.word	0x40020470
 800277c:	40020488 	.word	0x40020488
 8002780:	400204a0 	.word	0x400204a0
 8002784:	400204b8 	.word	0x400204b8
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 0308 	and.w	r3, r3, #8
 8002792:	2b00      	cmp	r3, #0
 8002794:	bf14      	ite	ne
 8002796:	2301      	movne	r3, #1
 8002798:	2300      	moveq	r3, #0
 800279a:	b2db      	uxtb	r3, r3
 800279c:	2b00      	cmp	r3, #0
 800279e:	d015      	beq.n	80027cc <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f022 0204 	bic.w	r2, r2, #4
 80027ae:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027b4:	f003 031f 	and.w	r3, r3, #31
 80027b8:	2208      	movs	r2, #8
 80027ba:	409a      	lsls	r2, r3
 80027bc:	6a3b      	ldr	r3, [r7, #32]
 80027be:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027c4:	f043 0201 	orr.w	r2, r3, #1
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027d0:	f003 031f 	and.w	r3, r3, #31
 80027d4:	69ba      	ldr	r2, [r7, #24]
 80027d6:	fa22 f303 	lsr.w	r3, r2, r3
 80027da:	f003 0301 	and.w	r3, r3, #1
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d06e      	beq.n	80028c0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a69      	ldr	r2, [pc, #420]	@ (800298c <HAL_DMA_IRQHandler+0x3f8>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d04a      	beq.n	8002882 <HAL_DMA_IRQHandler+0x2ee>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a67      	ldr	r2, [pc, #412]	@ (8002990 <HAL_DMA_IRQHandler+0x3fc>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d045      	beq.n	8002882 <HAL_DMA_IRQHandler+0x2ee>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a66      	ldr	r2, [pc, #408]	@ (8002994 <HAL_DMA_IRQHandler+0x400>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d040      	beq.n	8002882 <HAL_DMA_IRQHandler+0x2ee>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a64      	ldr	r2, [pc, #400]	@ (8002998 <HAL_DMA_IRQHandler+0x404>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d03b      	beq.n	8002882 <HAL_DMA_IRQHandler+0x2ee>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a63      	ldr	r2, [pc, #396]	@ (800299c <HAL_DMA_IRQHandler+0x408>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d036      	beq.n	8002882 <HAL_DMA_IRQHandler+0x2ee>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a61      	ldr	r2, [pc, #388]	@ (80029a0 <HAL_DMA_IRQHandler+0x40c>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d031      	beq.n	8002882 <HAL_DMA_IRQHandler+0x2ee>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a60      	ldr	r2, [pc, #384]	@ (80029a4 <HAL_DMA_IRQHandler+0x410>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d02c      	beq.n	8002882 <HAL_DMA_IRQHandler+0x2ee>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a5e      	ldr	r2, [pc, #376]	@ (80029a8 <HAL_DMA_IRQHandler+0x414>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d027      	beq.n	8002882 <HAL_DMA_IRQHandler+0x2ee>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a5d      	ldr	r2, [pc, #372]	@ (80029ac <HAL_DMA_IRQHandler+0x418>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d022      	beq.n	8002882 <HAL_DMA_IRQHandler+0x2ee>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a5b      	ldr	r2, [pc, #364]	@ (80029b0 <HAL_DMA_IRQHandler+0x41c>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d01d      	beq.n	8002882 <HAL_DMA_IRQHandler+0x2ee>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a5a      	ldr	r2, [pc, #360]	@ (80029b4 <HAL_DMA_IRQHandler+0x420>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d018      	beq.n	8002882 <HAL_DMA_IRQHandler+0x2ee>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a58      	ldr	r2, [pc, #352]	@ (80029b8 <HAL_DMA_IRQHandler+0x424>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d013      	beq.n	8002882 <HAL_DMA_IRQHandler+0x2ee>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a57      	ldr	r2, [pc, #348]	@ (80029bc <HAL_DMA_IRQHandler+0x428>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d00e      	beq.n	8002882 <HAL_DMA_IRQHandler+0x2ee>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a55      	ldr	r2, [pc, #340]	@ (80029c0 <HAL_DMA_IRQHandler+0x42c>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d009      	beq.n	8002882 <HAL_DMA_IRQHandler+0x2ee>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a54      	ldr	r2, [pc, #336]	@ (80029c4 <HAL_DMA_IRQHandler+0x430>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d004      	beq.n	8002882 <HAL_DMA_IRQHandler+0x2ee>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a52      	ldr	r2, [pc, #328]	@ (80029c8 <HAL_DMA_IRQHandler+0x434>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d10a      	bne.n	8002898 <HAL_DMA_IRQHandler+0x304>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	695b      	ldr	r3, [r3, #20]
 8002888:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800288c:	2b00      	cmp	r3, #0
 800288e:	bf14      	ite	ne
 8002890:	2301      	movne	r3, #1
 8002892:	2300      	moveq	r3, #0
 8002894:	b2db      	uxtb	r3, r3
 8002896:	e003      	b.n	80028a0 <HAL_DMA_IRQHandler+0x30c>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	2300      	movs	r3, #0
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d00d      	beq.n	80028c0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028a8:	f003 031f 	and.w	r3, r3, #31
 80028ac:	2201      	movs	r2, #1
 80028ae:	409a      	lsls	r2, r3
 80028b0:	6a3b      	ldr	r3, [r7, #32]
 80028b2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028b8:	f043 0202 	orr.w	r2, r3, #2
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028c4:	f003 031f 	and.w	r3, r3, #31
 80028c8:	2204      	movs	r2, #4
 80028ca:	409a      	lsls	r2, r3
 80028cc:	69bb      	ldr	r3, [r7, #24]
 80028ce:	4013      	ands	r3, r2
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	f000 808f 	beq.w	80029f4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a2c      	ldr	r2, [pc, #176]	@ (800298c <HAL_DMA_IRQHandler+0x3f8>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d04a      	beq.n	8002976 <HAL_DMA_IRQHandler+0x3e2>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a2a      	ldr	r2, [pc, #168]	@ (8002990 <HAL_DMA_IRQHandler+0x3fc>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d045      	beq.n	8002976 <HAL_DMA_IRQHandler+0x3e2>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a29      	ldr	r2, [pc, #164]	@ (8002994 <HAL_DMA_IRQHandler+0x400>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d040      	beq.n	8002976 <HAL_DMA_IRQHandler+0x3e2>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a27      	ldr	r2, [pc, #156]	@ (8002998 <HAL_DMA_IRQHandler+0x404>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d03b      	beq.n	8002976 <HAL_DMA_IRQHandler+0x3e2>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a26      	ldr	r2, [pc, #152]	@ (800299c <HAL_DMA_IRQHandler+0x408>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d036      	beq.n	8002976 <HAL_DMA_IRQHandler+0x3e2>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a24      	ldr	r2, [pc, #144]	@ (80029a0 <HAL_DMA_IRQHandler+0x40c>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d031      	beq.n	8002976 <HAL_DMA_IRQHandler+0x3e2>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a23      	ldr	r2, [pc, #140]	@ (80029a4 <HAL_DMA_IRQHandler+0x410>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d02c      	beq.n	8002976 <HAL_DMA_IRQHandler+0x3e2>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a21      	ldr	r2, [pc, #132]	@ (80029a8 <HAL_DMA_IRQHandler+0x414>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d027      	beq.n	8002976 <HAL_DMA_IRQHandler+0x3e2>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a20      	ldr	r2, [pc, #128]	@ (80029ac <HAL_DMA_IRQHandler+0x418>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d022      	beq.n	8002976 <HAL_DMA_IRQHandler+0x3e2>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a1e      	ldr	r2, [pc, #120]	@ (80029b0 <HAL_DMA_IRQHandler+0x41c>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d01d      	beq.n	8002976 <HAL_DMA_IRQHandler+0x3e2>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a1d      	ldr	r2, [pc, #116]	@ (80029b4 <HAL_DMA_IRQHandler+0x420>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d018      	beq.n	8002976 <HAL_DMA_IRQHandler+0x3e2>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a1b      	ldr	r2, [pc, #108]	@ (80029b8 <HAL_DMA_IRQHandler+0x424>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d013      	beq.n	8002976 <HAL_DMA_IRQHandler+0x3e2>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a1a      	ldr	r2, [pc, #104]	@ (80029bc <HAL_DMA_IRQHandler+0x428>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d00e      	beq.n	8002976 <HAL_DMA_IRQHandler+0x3e2>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a18      	ldr	r2, [pc, #96]	@ (80029c0 <HAL_DMA_IRQHandler+0x42c>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d009      	beq.n	8002976 <HAL_DMA_IRQHandler+0x3e2>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a17      	ldr	r2, [pc, #92]	@ (80029c4 <HAL_DMA_IRQHandler+0x430>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d004      	beq.n	8002976 <HAL_DMA_IRQHandler+0x3e2>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a15      	ldr	r2, [pc, #84]	@ (80029c8 <HAL_DMA_IRQHandler+0x434>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d12a      	bne.n	80029cc <HAL_DMA_IRQHandler+0x438>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 0302 	and.w	r3, r3, #2
 8002980:	2b00      	cmp	r3, #0
 8002982:	bf14      	ite	ne
 8002984:	2301      	movne	r3, #1
 8002986:	2300      	moveq	r3, #0
 8002988:	b2db      	uxtb	r3, r3
 800298a:	e023      	b.n	80029d4 <HAL_DMA_IRQHandler+0x440>
 800298c:	40020010 	.word	0x40020010
 8002990:	40020028 	.word	0x40020028
 8002994:	40020040 	.word	0x40020040
 8002998:	40020058 	.word	0x40020058
 800299c:	40020070 	.word	0x40020070
 80029a0:	40020088 	.word	0x40020088
 80029a4:	400200a0 	.word	0x400200a0
 80029a8:	400200b8 	.word	0x400200b8
 80029ac:	40020410 	.word	0x40020410
 80029b0:	40020428 	.word	0x40020428
 80029b4:	40020440 	.word	0x40020440
 80029b8:	40020458 	.word	0x40020458
 80029bc:	40020470 	.word	0x40020470
 80029c0:	40020488 	.word	0x40020488
 80029c4:	400204a0 	.word	0x400204a0
 80029c8:	400204b8 	.word	0x400204b8
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	2300      	movs	r3, #0
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d00d      	beq.n	80029f4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029dc:	f003 031f 	and.w	r3, r3, #31
 80029e0:	2204      	movs	r2, #4
 80029e2:	409a      	lsls	r2, r3
 80029e4:	6a3b      	ldr	r3, [r7, #32]
 80029e6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029ec:	f043 0204 	orr.w	r2, r3, #4
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029f8:	f003 031f 	and.w	r3, r3, #31
 80029fc:	2210      	movs	r2, #16
 80029fe:	409a      	lsls	r2, r3
 8002a00:	69bb      	ldr	r3, [r7, #24]
 8002a02:	4013      	ands	r3, r2
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	f000 80a6 	beq.w	8002b56 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a85      	ldr	r2, [pc, #532]	@ (8002c24 <HAL_DMA_IRQHandler+0x690>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d04a      	beq.n	8002aaa <HAL_DMA_IRQHandler+0x516>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a83      	ldr	r2, [pc, #524]	@ (8002c28 <HAL_DMA_IRQHandler+0x694>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d045      	beq.n	8002aaa <HAL_DMA_IRQHandler+0x516>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a82      	ldr	r2, [pc, #520]	@ (8002c2c <HAL_DMA_IRQHandler+0x698>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d040      	beq.n	8002aaa <HAL_DMA_IRQHandler+0x516>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a80      	ldr	r2, [pc, #512]	@ (8002c30 <HAL_DMA_IRQHandler+0x69c>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d03b      	beq.n	8002aaa <HAL_DMA_IRQHandler+0x516>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a7f      	ldr	r2, [pc, #508]	@ (8002c34 <HAL_DMA_IRQHandler+0x6a0>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d036      	beq.n	8002aaa <HAL_DMA_IRQHandler+0x516>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a7d      	ldr	r2, [pc, #500]	@ (8002c38 <HAL_DMA_IRQHandler+0x6a4>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d031      	beq.n	8002aaa <HAL_DMA_IRQHandler+0x516>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a7c      	ldr	r2, [pc, #496]	@ (8002c3c <HAL_DMA_IRQHandler+0x6a8>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d02c      	beq.n	8002aaa <HAL_DMA_IRQHandler+0x516>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a7a      	ldr	r2, [pc, #488]	@ (8002c40 <HAL_DMA_IRQHandler+0x6ac>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d027      	beq.n	8002aaa <HAL_DMA_IRQHandler+0x516>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a79      	ldr	r2, [pc, #484]	@ (8002c44 <HAL_DMA_IRQHandler+0x6b0>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d022      	beq.n	8002aaa <HAL_DMA_IRQHandler+0x516>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a77      	ldr	r2, [pc, #476]	@ (8002c48 <HAL_DMA_IRQHandler+0x6b4>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d01d      	beq.n	8002aaa <HAL_DMA_IRQHandler+0x516>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a76      	ldr	r2, [pc, #472]	@ (8002c4c <HAL_DMA_IRQHandler+0x6b8>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d018      	beq.n	8002aaa <HAL_DMA_IRQHandler+0x516>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a74      	ldr	r2, [pc, #464]	@ (8002c50 <HAL_DMA_IRQHandler+0x6bc>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d013      	beq.n	8002aaa <HAL_DMA_IRQHandler+0x516>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a73      	ldr	r2, [pc, #460]	@ (8002c54 <HAL_DMA_IRQHandler+0x6c0>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d00e      	beq.n	8002aaa <HAL_DMA_IRQHandler+0x516>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a71      	ldr	r2, [pc, #452]	@ (8002c58 <HAL_DMA_IRQHandler+0x6c4>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d009      	beq.n	8002aaa <HAL_DMA_IRQHandler+0x516>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a70      	ldr	r2, [pc, #448]	@ (8002c5c <HAL_DMA_IRQHandler+0x6c8>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d004      	beq.n	8002aaa <HAL_DMA_IRQHandler+0x516>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a6e      	ldr	r2, [pc, #440]	@ (8002c60 <HAL_DMA_IRQHandler+0x6cc>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d10a      	bne.n	8002ac0 <HAL_DMA_IRQHandler+0x52c>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f003 0308 	and.w	r3, r3, #8
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	bf14      	ite	ne
 8002ab8:	2301      	movne	r3, #1
 8002aba:	2300      	moveq	r3, #0
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	e009      	b.n	8002ad4 <HAL_DMA_IRQHandler+0x540>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 0304 	and.w	r3, r3, #4
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	bf14      	ite	ne
 8002ace:	2301      	movne	r3, #1
 8002ad0:	2300      	moveq	r3, #0
 8002ad2:	b2db      	uxtb	r3, r3
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d03e      	beq.n	8002b56 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002adc:	f003 031f 	and.w	r3, r3, #31
 8002ae0:	2210      	movs	r2, #16
 8002ae2:	409a      	lsls	r2, r3
 8002ae4:	6a3b      	ldr	r3, [r7, #32]
 8002ae6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d018      	beq.n	8002b28 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d108      	bne.n	8002b16 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d024      	beq.n	8002b56 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b10:	6878      	ldr	r0, [r7, #4]
 8002b12:	4798      	blx	r3
 8002b14:	e01f      	b.n	8002b56 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d01b      	beq.n	8002b56 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	4798      	blx	r3
 8002b26:	e016      	b.n	8002b56 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d107      	bne.n	8002b46 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f022 0208 	bic.w	r2, r2, #8
 8002b44:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d003      	beq.n	8002b56 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b5a:	f003 031f 	and.w	r3, r3, #31
 8002b5e:	2220      	movs	r2, #32
 8002b60:	409a      	lsls	r2, r3
 8002b62:	69bb      	ldr	r3, [r7, #24]
 8002b64:	4013      	ands	r3, r2
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	f000 8110 	beq.w	8002d8c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a2c      	ldr	r2, [pc, #176]	@ (8002c24 <HAL_DMA_IRQHandler+0x690>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d04a      	beq.n	8002c0c <HAL_DMA_IRQHandler+0x678>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a2b      	ldr	r2, [pc, #172]	@ (8002c28 <HAL_DMA_IRQHandler+0x694>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d045      	beq.n	8002c0c <HAL_DMA_IRQHandler+0x678>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a29      	ldr	r2, [pc, #164]	@ (8002c2c <HAL_DMA_IRQHandler+0x698>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d040      	beq.n	8002c0c <HAL_DMA_IRQHandler+0x678>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a28      	ldr	r2, [pc, #160]	@ (8002c30 <HAL_DMA_IRQHandler+0x69c>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d03b      	beq.n	8002c0c <HAL_DMA_IRQHandler+0x678>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a26      	ldr	r2, [pc, #152]	@ (8002c34 <HAL_DMA_IRQHandler+0x6a0>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d036      	beq.n	8002c0c <HAL_DMA_IRQHandler+0x678>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a25      	ldr	r2, [pc, #148]	@ (8002c38 <HAL_DMA_IRQHandler+0x6a4>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d031      	beq.n	8002c0c <HAL_DMA_IRQHandler+0x678>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a23      	ldr	r2, [pc, #140]	@ (8002c3c <HAL_DMA_IRQHandler+0x6a8>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d02c      	beq.n	8002c0c <HAL_DMA_IRQHandler+0x678>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a22      	ldr	r2, [pc, #136]	@ (8002c40 <HAL_DMA_IRQHandler+0x6ac>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d027      	beq.n	8002c0c <HAL_DMA_IRQHandler+0x678>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a20      	ldr	r2, [pc, #128]	@ (8002c44 <HAL_DMA_IRQHandler+0x6b0>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d022      	beq.n	8002c0c <HAL_DMA_IRQHandler+0x678>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a1f      	ldr	r2, [pc, #124]	@ (8002c48 <HAL_DMA_IRQHandler+0x6b4>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d01d      	beq.n	8002c0c <HAL_DMA_IRQHandler+0x678>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a1d      	ldr	r2, [pc, #116]	@ (8002c4c <HAL_DMA_IRQHandler+0x6b8>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d018      	beq.n	8002c0c <HAL_DMA_IRQHandler+0x678>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a1c      	ldr	r2, [pc, #112]	@ (8002c50 <HAL_DMA_IRQHandler+0x6bc>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d013      	beq.n	8002c0c <HAL_DMA_IRQHandler+0x678>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a1a      	ldr	r2, [pc, #104]	@ (8002c54 <HAL_DMA_IRQHandler+0x6c0>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d00e      	beq.n	8002c0c <HAL_DMA_IRQHandler+0x678>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a19      	ldr	r2, [pc, #100]	@ (8002c58 <HAL_DMA_IRQHandler+0x6c4>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d009      	beq.n	8002c0c <HAL_DMA_IRQHandler+0x678>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a17      	ldr	r2, [pc, #92]	@ (8002c5c <HAL_DMA_IRQHandler+0x6c8>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d004      	beq.n	8002c0c <HAL_DMA_IRQHandler+0x678>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a16      	ldr	r2, [pc, #88]	@ (8002c60 <HAL_DMA_IRQHandler+0x6cc>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d12b      	bne.n	8002c64 <HAL_DMA_IRQHandler+0x6d0>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 0310 	and.w	r3, r3, #16
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	bf14      	ite	ne
 8002c1a:	2301      	movne	r3, #1
 8002c1c:	2300      	moveq	r3, #0
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	e02a      	b.n	8002c78 <HAL_DMA_IRQHandler+0x6e4>
 8002c22:	bf00      	nop
 8002c24:	40020010 	.word	0x40020010
 8002c28:	40020028 	.word	0x40020028
 8002c2c:	40020040 	.word	0x40020040
 8002c30:	40020058 	.word	0x40020058
 8002c34:	40020070 	.word	0x40020070
 8002c38:	40020088 	.word	0x40020088
 8002c3c:	400200a0 	.word	0x400200a0
 8002c40:	400200b8 	.word	0x400200b8
 8002c44:	40020410 	.word	0x40020410
 8002c48:	40020428 	.word	0x40020428
 8002c4c:	40020440 	.word	0x40020440
 8002c50:	40020458 	.word	0x40020458
 8002c54:	40020470 	.word	0x40020470
 8002c58:	40020488 	.word	0x40020488
 8002c5c:	400204a0 	.word	0x400204a0
 8002c60:	400204b8 	.word	0x400204b8
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 0302 	and.w	r3, r3, #2
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	bf14      	ite	ne
 8002c72:	2301      	movne	r3, #1
 8002c74:	2300      	moveq	r3, #0
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	f000 8087 	beq.w	8002d8c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c82:	f003 031f 	and.w	r3, r3, #31
 8002c86:	2220      	movs	r2, #32
 8002c88:	409a      	lsls	r2, r3
 8002c8a:	6a3b      	ldr	r3, [r7, #32]
 8002c8c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	2b04      	cmp	r3, #4
 8002c98:	d139      	bne.n	8002d0e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f022 0216 	bic.w	r2, r2, #22
 8002ca8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	695a      	ldr	r2, [r3, #20]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002cb8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d103      	bne.n	8002cca <HAL_DMA_IRQHandler+0x736>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d007      	beq.n	8002cda <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f022 0208 	bic.w	r2, r2, #8
 8002cd8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cde:	f003 031f 	and.w	r3, r3, #31
 8002ce2:	223f      	movs	r2, #63	@ 0x3f
 8002ce4:	409a      	lsls	r2, r3
 8002ce6:	6a3b      	ldr	r3, [r7, #32]
 8002ce8:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2201      	movs	r2, #1
 8002cee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	f000 8382 	beq.w	8003408 <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d08:	6878      	ldr	r0, [r7, #4]
 8002d0a:	4798      	blx	r3
          }
          return;
 8002d0c:	e37c      	b.n	8003408 <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d018      	beq.n	8002d4e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d108      	bne.n	8002d3c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d02c      	beq.n	8002d8c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	4798      	blx	r3
 8002d3a:	e027      	b.n	8002d8c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d023      	beq.n	8002d8c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d48:	6878      	ldr	r0, [r7, #4]
 8002d4a:	4798      	blx	r3
 8002d4c:	e01e      	b.n	8002d8c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d10f      	bne.n	8002d7c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	681a      	ldr	r2, [r3, #0]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f022 0210 	bic.w	r2, r2, #16
 8002d6a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2201      	movs	r2, #1
 8002d70:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2200      	movs	r2, #0
 8002d78:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d003      	beq.n	8002d8c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d88:	6878      	ldr	r0, [r7, #4]
 8002d8a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	f000 833e 	beq.w	8003412 <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d9a:	f003 0301 	and.w	r3, r3, #1
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	f000 8088 	beq.w	8002eb4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2204      	movs	r2, #4
 8002da8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a89      	ldr	r2, [pc, #548]	@ (8002fd8 <HAL_DMA_IRQHandler+0xa44>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d04a      	beq.n	8002e4c <HAL_DMA_IRQHandler+0x8b8>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a88      	ldr	r2, [pc, #544]	@ (8002fdc <HAL_DMA_IRQHandler+0xa48>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d045      	beq.n	8002e4c <HAL_DMA_IRQHandler+0x8b8>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a86      	ldr	r2, [pc, #536]	@ (8002fe0 <HAL_DMA_IRQHandler+0xa4c>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d040      	beq.n	8002e4c <HAL_DMA_IRQHandler+0x8b8>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a85      	ldr	r2, [pc, #532]	@ (8002fe4 <HAL_DMA_IRQHandler+0xa50>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d03b      	beq.n	8002e4c <HAL_DMA_IRQHandler+0x8b8>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a83      	ldr	r2, [pc, #524]	@ (8002fe8 <HAL_DMA_IRQHandler+0xa54>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d036      	beq.n	8002e4c <HAL_DMA_IRQHandler+0x8b8>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a82      	ldr	r2, [pc, #520]	@ (8002fec <HAL_DMA_IRQHandler+0xa58>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d031      	beq.n	8002e4c <HAL_DMA_IRQHandler+0x8b8>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a80      	ldr	r2, [pc, #512]	@ (8002ff0 <HAL_DMA_IRQHandler+0xa5c>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d02c      	beq.n	8002e4c <HAL_DMA_IRQHandler+0x8b8>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a7f      	ldr	r2, [pc, #508]	@ (8002ff4 <HAL_DMA_IRQHandler+0xa60>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d027      	beq.n	8002e4c <HAL_DMA_IRQHandler+0x8b8>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a7d      	ldr	r2, [pc, #500]	@ (8002ff8 <HAL_DMA_IRQHandler+0xa64>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d022      	beq.n	8002e4c <HAL_DMA_IRQHandler+0x8b8>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a7c      	ldr	r2, [pc, #496]	@ (8002ffc <HAL_DMA_IRQHandler+0xa68>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d01d      	beq.n	8002e4c <HAL_DMA_IRQHandler+0x8b8>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a7a      	ldr	r2, [pc, #488]	@ (8003000 <HAL_DMA_IRQHandler+0xa6c>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d018      	beq.n	8002e4c <HAL_DMA_IRQHandler+0x8b8>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a79      	ldr	r2, [pc, #484]	@ (8003004 <HAL_DMA_IRQHandler+0xa70>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d013      	beq.n	8002e4c <HAL_DMA_IRQHandler+0x8b8>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a77      	ldr	r2, [pc, #476]	@ (8003008 <HAL_DMA_IRQHandler+0xa74>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d00e      	beq.n	8002e4c <HAL_DMA_IRQHandler+0x8b8>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a76      	ldr	r2, [pc, #472]	@ (800300c <HAL_DMA_IRQHandler+0xa78>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d009      	beq.n	8002e4c <HAL_DMA_IRQHandler+0x8b8>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a74      	ldr	r2, [pc, #464]	@ (8003010 <HAL_DMA_IRQHandler+0xa7c>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d004      	beq.n	8002e4c <HAL_DMA_IRQHandler+0x8b8>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a73      	ldr	r2, [pc, #460]	@ (8003014 <HAL_DMA_IRQHandler+0xa80>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d108      	bne.n	8002e5e <HAL_DMA_IRQHandler+0x8ca>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f022 0201 	bic.w	r2, r2, #1
 8002e5a:	601a      	str	r2, [r3, #0]
 8002e5c:	e007      	b.n	8002e6e <HAL_DMA_IRQHandler+0x8da>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f022 0201 	bic.w	r2, r2, #1
 8002e6c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	3301      	adds	r3, #1
 8002e72:	60fb      	str	r3, [r7, #12]
 8002e74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e76:	429a      	cmp	r2, r3
 8002e78:	d307      	bcc.n	8002e8a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f003 0301 	and.w	r3, r3, #1
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d1f2      	bne.n	8002e6e <HAL_DMA_IRQHandler+0x8da>
 8002e88:	e000      	b.n	8002e8c <HAL_DMA_IRQHandler+0x8f8>
            break;
 8002e8a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 0301 	and.w	r3, r3, #1
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d004      	beq.n	8002ea4 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2203      	movs	r2, #3
 8002e9e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8002ea2:	e003      	b.n	8002eac <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	f000 82aa 	beq.w	8003412 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	4798      	blx	r3
 8002ec6:	e2a4      	b.n	8003412 <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a52      	ldr	r2, [pc, #328]	@ (8003018 <HAL_DMA_IRQHandler+0xa84>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d04a      	beq.n	8002f68 <HAL_DMA_IRQHandler+0x9d4>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a51      	ldr	r2, [pc, #324]	@ (800301c <HAL_DMA_IRQHandler+0xa88>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d045      	beq.n	8002f68 <HAL_DMA_IRQHandler+0x9d4>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a4f      	ldr	r2, [pc, #316]	@ (8003020 <HAL_DMA_IRQHandler+0xa8c>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d040      	beq.n	8002f68 <HAL_DMA_IRQHandler+0x9d4>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a4e      	ldr	r2, [pc, #312]	@ (8003024 <HAL_DMA_IRQHandler+0xa90>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d03b      	beq.n	8002f68 <HAL_DMA_IRQHandler+0x9d4>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a4c      	ldr	r2, [pc, #304]	@ (8003028 <HAL_DMA_IRQHandler+0xa94>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d036      	beq.n	8002f68 <HAL_DMA_IRQHandler+0x9d4>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a4b      	ldr	r2, [pc, #300]	@ (800302c <HAL_DMA_IRQHandler+0xa98>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d031      	beq.n	8002f68 <HAL_DMA_IRQHandler+0x9d4>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a49      	ldr	r2, [pc, #292]	@ (8003030 <HAL_DMA_IRQHandler+0xa9c>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d02c      	beq.n	8002f68 <HAL_DMA_IRQHandler+0x9d4>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a48      	ldr	r2, [pc, #288]	@ (8003034 <HAL_DMA_IRQHandler+0xaa0>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d027      	beq.n	8002f68 <HAL_DMA_IRQHandler+0x9d4>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a46      	ldr	r2, [pc, #280]	@ (8003038 <HAL_DMA_IRQHandler+0xaa4>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d022      	beq.n	8002f68 <HAL_DMA_IRQHandler+0x9d4>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a45      	ldr	r2, [pc, #276]	@ (800303c <HAL_DMA_IRQHandler+0xaa8>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d01d      	beq.n	8002f68 <HAL_DMA_IRQHandler+0x9d4>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a43      	ldr	r2, [pc, #268]	@ (8003040 <HAL_DMA_IRQHandler+0xaac>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d018      	beq.n	8002f68 <HAL_DMA_IRQHandler+0x9d4>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a42      	ldr	r2, [pc, #264]	@ (8003044 <HAL_DMA_IRQHandler+0xab0>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d013      	beq.n	8002f68 <HAL_DMA_IRQHandler+0x9d4>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a40      	ldr	r2, [pc, #256]	@ (8003048 <HAL_DMA_IRQHandler+0xab4>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d00e      	beq.n	8002f68 <HAL_DMA_IRQHandler+0x9d4>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a3f      	ldr	r2, [pc, #252]	@ (800304c <HAL_DMA_IRQHandler+0xab8>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d009      	beq.n	8002f68 <HAL_DMA_IRQHandler+0x9d4>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a3d      	ldr	r2, [pc, #244]	@ (8003050 <HAL_DMA_IRQHandler+0xabc>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d004      	beq.n	8002f68 <HAL_DMA_IRQHandler+0x9d4>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a3c      	ldr	r2, [pc, #240]	@ (8003054 <HAL_DMA_IRQHandler+0xac0>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d101      	bne.n	8002f6c <HAL_DMA_IRQHandler+0x9d8>
 8002f68:	2301      	movs	r3, #1
 8002f6a:	e000      	b.n	8002f6e <HAL_DMA_IRQHandler+0x9da>
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	f000 824f 	beq.w	8003412 <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f80:	f003 031f 	and.w	r3, r3, #31
 8002f84:	2204      	movs	r2, #4
 8002f86:	409a      	lsls	r2, r3
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	f000 80dd 	beq.w	800314c <HAL_DMA_IRQHandler+0xbb8>
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	f003 0304 	and.w	r3, r3, #4
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	f000 80d7 	beq.w	800314c <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fa2:	f003 031f 	and.w	r3, r3, #31
 8002fa6:	2204      	movs	r2, #4
 8002fa8:	409a      	lsls	r2, r3
 8002faa:	69fb      	ldr	r3, [r7, #28]
 8002fac:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d059      	beq.n	800306c <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d14a      	bne.n	8003058 <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	f000 8220 	beq.w	800340c <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002fd0:	6878      	ldr	r0, [r7, #4]
 8002fd2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002fd4:	e21a      	b.n	800340c <HAL_DMA_IRQHandler+0xe78>
 8002fd6:	bf00      	nop
 8002fd8:	40020010 	.word	0x40020010
 8002fdc:	40020028 	.word	0x40020028
 8002fe0:	40020040 	.word	0x40020040
 8002fe4:	40020058 	.word	0x40020058
 8002fe8:	40020070 	.word	0x40020070
 8002fec:	40020088 	.word	0x40020088
 8002ff0:	400200a0 	.word	0x400200a0
 8002ff4:	400200b8 	.word	0x400200b8
 8002ff8:	40020410 	.word	0x40020410
 8002ffc:	40020428 	.word	0x40020428
 8003000:	40020440 	.word	0x40020440
 8003004:	40020458 	.word	0x40020458
 8003008:	40020470 	.word	0x40020470
 800300c:	40020488 	.word	0x40020488
 8003010:	400204a0 	.word	0x400204a0
 8003014:	400204b8 	.word	0x400204b8
 8003018:	48022c08 	.word	0x48022c08
 800301c:	48022c1c 	.word	0x48022c1c
 8003020:	48022c30 	.word	0x48022c30
 8003024:	48022c44 	.word	0x48022c44
 8003028:	48022c58 	.word	0x48022c58
 800302c:	48022c6c 	.word	0x48022c6c
 8003030:	48022c80 	.word	0x48022c80
 8003034:	48022c94 	.word	0x48022c94
 8003038:	58025408 	.word	0x58025408
 800303c:	5802541c 	.word	0x5802541c
 8003040:	58025430 	.word	0x58025430
 8003044:	58025444 	.word	0x58025444
 8003048:	58025458 	.word	0x58025458
 800304c:	5802546c 	.word	0x5802546c
 8003050:	58025480 	.word	0x58025480
 8003054:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800305c:	2b00      	cmp	r3, #0
 800305e:	f000 81d5 	beq.w	800340c <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800306a:	e1cf      	b.n	800340c <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	f003 0320 	and.w	r3, r3, #32
 8003072:	2b00      	cmp	r3, #0
 8003074:	d160      	bne.n	8003138 <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a7f      	ldr	r2, [pc, #508]	@ (8003278 <HAL_DMA_IRQHandler+0xce4>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d04a      	beq.n	8003116 <HAL_DMA_IRQHandler+0xb82>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a7d      	ldr	r2, [pc, #500]	@ (800327c <HAL_DMA_IRQHandler+0xce8>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d045      	beq.n	8003116 <HAL_DMA_IRQHandler+0xb82>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a7c      	ldr	r2, [pc, #496]	@ (8003280 <HAL_DMA_IRQHandler+0xcec>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d040      	beq.n	8003116 <HAL_DMA_IRQHandler+0xb82>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a7a      	ldr	r2, [pc, #488]	@ (8003284 <HAL_DMA_IRQHandler+0xcf0>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d03b      	beq.n	8003116 <HAL_DMA_IRQHandler+0xb82>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a79      	ldr	r2, [pc, #484]	@ (8003288 <HAL_DMA_IRQHandler+0xcf4>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d036      	beq.n	8003116 <HAL_DMA_IRQHandler+0xb82>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a77      	ldr	r2, [pc, #476]	@ (800328c <HAL_DMA_IRQHandler+0xcf8>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d031      	beq.n	8003116 <HAL_DMA_IRQHandler+0xb82>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a76      	ldr	r2, [pc, #472]	@ (8003290 <HAL_DMA_IRQHandler+0xcfc>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d02c      	beq.n	8003116 <HAL_DMA_IRQHandler+0xb82>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a74      	ldr	r2, [pc, #464]	@ (8003294 <HAL_DMA_IRQHandler+0xd00>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d027      	beq.n	8003116 <HAL_DMA_IRQHandler+0xb82>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a73      	ldr	r2, [pc, #460]	@ (8003298 <HAL_DMA_IRQHandler+0xd04>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d022      	beq.n	8003116 <HAL_DMA_IRQHandler+0xb82>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a71      	ldr	r2, [pc, #452]	@ (800329c <HAL_DMA_IRQHandler+0xd08>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d01d      	beq.n	8003116 <HAL_DMA_IRQHandler+0xb82>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a70      	ldr	r2, [pc, #448]	@ (80032a0 <HAL_DMA_IRQHandler+0xd0c>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d018      	beq.n	8003116 <HAL_DMA_IRQHandler+0xb82>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a6e      	ldr	r2, [pc, #440]	@ (80032a4 <HAL_DMA_IRQHandler+0xd10>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d013      	beq.n	8003116 <HAL_DMA_IRQHandler+0xb82>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a6d      	ldr	r2, [pc, #436]	@ (80032a8 <HAL_DMA_IRQHandler+0xd14>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d00e      	beq.n	8003116 <HAL_DMA_IRQHandler+0xb82>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a6b      	ldr	r2, [pc, #428]	@ (80032ac <HAL_DMA_IRQHandler+0xd18>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d009      	beq.n	8003116 <HAL_DMA_IRQHandler+0xb82>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a6a      	ldr	r2, [pc, #424]	@ (80032b0 <HAL_DMA_IRQHandler+0xd1c>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d004      	beq.n	8003116 <HAL_DMA_IRQHandler+0xb82>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a68      	ldr	r2, [pc, #416]	@ (80032b4 <HAL_DMA_IRQHandler+0xd20>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d108      	bne.n	8003128 <HAL_DMA_IRQHandler+0xb94>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f022 0208 	bic.w	r2, r2, #8
 8003124:	601a      	str	r2, [r3, #0]
 8003126:	e007      	b.n	8003138 <HAL_DMA_IRQHandler+0xba4>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f022 0204 	bic.w	r2, r2, #4
 8003136:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800313c:	2b00      	cmp	r3, #0
 800313e:	f000 8165 	beq.w	800340c <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800314a:	e15f      	b.n	800340c <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003150:	f003 031f 	and.w	r3, r3, #31
 8003154:	2202      	movs	r2, #2
 8003156:	409a      	lsls	r2, r3
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	4013      	ands	r3, r2
 800315c:	2b00      	cmp	r3, #0
 800315e:	f000 80c5 	beq.w	80032ec <HAL_DMA_IRQHandler+0xd58>
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	f003 0302 	and.w	r3, r3, #2
 8003168:	2b00      	cmp	r3, #0
 800316a:	f000 80bf 	beq.w	80032ec <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003172:	f003 031f 	and.w	r3, r3, #31
 8003176:	2202      	movs	r2, #2
 8003178:	409a      	lsls	r2, r3
 800317a:	69fb      	ldr	r3, [r7, #28]
 800317c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003184:	2b00      	cmp	r3, #0
 8003186:	d018      	beq.n	80031ba <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800318e:	2b00      	cmp	r3, #0
 8003190:	d109      	bne.n	80031a6 <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003196:	2b00      	cmp	r3, #0
 8003198:	f000 813a 	beq.w	8003410 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031a0:	6878      	ldr	r0, [r7, #4]
 80031a2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80031a4:	e134      	b.n	8003410 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	f000 8130 	beq.w	8003410 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031b4:	6878      	ldr	r0, [r7, #4]
 80031b6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80031b8:	e12a      	b.n	8003410 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	f003 0320 	and.w	r3, r3, #32
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	f040 8089 	bne.w	80032d8 <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a2b      	ldr	r2, [pc, #172]	@ (8003278 <HAL_DMA_IRQHandler+0xce4>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d04a      	beq.n	8003266 <HAL_DMA_IRQHandler+0xcd2>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a29      	ldr	r2, [pc, #164]	@ (800327c <HAL_DMA_IRQHandler+0xce8>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d045      	beq.n	8003266 <HAL_DMA_IRQHandler+0xcd2>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a28      	ldr	r2, [pc, #160]	@ (8003280 <HAL_DMA_IRQHandler+0xcec>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d040      	beq.n	8003266 <HAL_DMA_IRQHandler+0xcd2>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a26      	ldr	r2, [pc, #152]	@ (8003284 <HAL_DMA_IRQHandler+0xcf0>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d03b      	beq.n	8003266 <HAL_DMA_IRQHandler+0xcd2>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a25      	ldr	r2, [pc, #148]	@ (8003288 <HAL_DMA_IRQHandler+0xcf4>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d036      	beq.n	8003266 <HAL_DMA_IRQHandler+0xcd2>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a23      	ldr	r2, [pc, #140]	@ (800328c <HAL_DMA_IRQHandler+0xcf8>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d031      	beq.n	8003266 <HAL_DMA_IRQHandler+0xcd2>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a22      	ldr	r2, [pc, #136]	@ (8003290 <HAL_DMA_IRQHandler+0xcfc>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d02c      	beq.n	8003266 <HAL_DMA_IRQHandler+0xcd2>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a20      	ldr	r2, [pc, #128]	@ (8003294 <HAL_DMA_IRQHandler+0xd00>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d027      	beq.n	8003266 <HAL_DMA_IRQHandler+0xcd2>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a1f      	ldr	r2, [pc, #124]	@ (8003298 <HAL_DMA_IRQHandler+0xd04>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d022      	beq.n	8003266 <HAL_DMA_IRQHandler+0xcd2>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a1d      	ldr	r2, [pc, #116]	@ (800329c <HAL_DMA_IRQHandler+0xd08>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d01d      	beq.n	8003266 <HAL_DMA_IRQHandler+0xcd2>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a1c      	ldr	r2, [pc, #112]	@ (80032a0 <HAL_DMA_IRQHandler+0xd0c>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d018      	beq.n	8003266 <HAL_DMA_IRQHandler+0xcd2>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a1a      	ldr	r2, [pc, #104]	@ (80032a4 <HAL_DMA_IRQHandler+0xd10>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d013      	beq.n	8003266 <HAL_DMA_IRQHandler+0xcd2>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a19      	ldr	r2, [pc, #100]	@ (80032a8 <HAL_DMA_IRQHandler+0xd14>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d00e      	beq.n	8003266 <HAL_DMA_IRQHandler+0xcd2>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a17      	ldr	r2, [pc, #92]	@ (80032ac <HAL_DMA_IRQHandler+0xd18>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d009      	beq.n	8003266 <HAL_DMA_IRQHandler+0xcd2>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a16      	ldr	r2, [pc, #88]	@ (80032b0 <HAL_DMA_IRQHandler+0xd1c>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d004      	beq.n	8003266 <HAL_DMA_IRQHandler+0xcd2>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a14      	ldr	r2, [pc, #80]	@ (80032b4 <HAL_DMA_IRQHandler+0xd20>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d128      	bne.n	80032b8 <HAL_DMA_IRQHandler+0xd24>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f022 0214 	bic.w	r2, r2, #20
 8003274:	601a      	str	r2, [r3, #0]
 8003276:	e027      	b.n	80032c8 <HAL_DMA_IRQHandler+0xd34>
 8003278:	40020010 	.word	0x40020010
 800327c:	40020028 	.word	0x40020028
 8003280:	40020040 	.word	0x40020040
 8003284:	40020058 	.word	0x40020058
 8003288:	40020070 	.word	0x40020070
 800328c:	40020088 	.word	0x40020088
 8003290:	400200a0 	.word	0x400200a0
 8003294:	400200b8 	.word	0x400200b8
 8003298:	40020410 	.word	0x40020410
 800329c:	40020428 	.word	0x40020428
 80032a0:	40020440 	.word	0x40020440
 80032a4:	40020458 	.word	0x40020458
 80032a8:	40020470 	.word	0x40020470
 80032ac:	40020488 	.word	0x40020488
 80032b0:	400204a0 	.word	0x400204a0
 80032b4:	400204b8 	.word	0x400204b8
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f022 020a 	bic.w	r2, r2, #10
 80032c6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2201      	movs	r2, #1
 80032cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2200      	movs	r2, #0
 80032d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032dc:	2b00      	cmp	r3, #0
 80032de:	f000 8097 	beq.w	8003410 <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80032ea:	e091      	b.n	8003410 <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032f0:	f003 031f 	and.w	r3, r3, #31
 80032f4:	2208      	movs	r2, #8
 80032f6:	409a      	lsls	r2, r3
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	4013      	ands	r3, r2
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	f000 8088 	beq.w	8003412 <HAL_DMA_IRQHandler+0xe7e>
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	f003 0308 	and.w	r3, r3, #8
 8003308:	2b00      	cmp	r3, #0
 800330a:	f000 8082 	beq.w	8003412 <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a41      	ldr	r2, [pc, #260]	@ (8003418 <HAL_DMA_IRQHandler+0xe84>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d04a      	beq.n	80033ae <HAL_DMA_IRQHandler+0xe1a>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a3f      	ldr	r2, [pc, #252]	@ (800341c <HAL_DMA_IRQHandler+0xe88>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d045      	beq.n	80033ae <HAL_DMA_IRQHandler+0xe1a>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a3e      	ldr	r2, [pc, #248]	@ (8003420 <HAL_DMA_IRQHandler+0xe8c>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d040      	beq.n	80033ae <HAL_DMA_IRQHandler+0xe1a>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a3c      	ldr	r2, [pc, #240]	@ (8003424 <HAL_DMA_IRQHandler+0xe90>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d03b      	beq.n	80033ae <HAL_DMA_IRQHandler+0xe1a>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a3b      	ldr	r2, [pc, #236]	@ (8003428 <HAL_DMA_IRQHandler+0xe94>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d036      	beq.n	80033ae <HAL_DMA_IRQHandler+0xe1a>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a39      	ldr	r2, [pc, #228]	@ (800342c <HAL_DMA_IRQHandler+0xe98>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d031      	beq.n	80033ae <HAL_DMA_IRQHandler+0xe1a>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a38      	ldr	r2, [pc, #224]	@ (8003430 <HAL_DMA_IRQHandler+0xe9c>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d02c      	beq.n	80033ae <HAL_DMA_IRQHandler+0xe1a>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a36      	ldr	r2, [pc, #216]	@ (8003434 <HAL_DMA_IRQHandler+0xea0>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d027      	beq.n	80033ae <HAL_DMA_IRQHandler+0xe1a>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a35      	ldr	r2, [pc, #212]	@ (8003438 <HAL_DMA_IRQHandler+0xea4>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d022      	beq.n	80033ae <HAL_DMA_IRQHandler+0xe1a>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a33      	ldr	r2, [pc, #204]	@ (800343c <HAL_DMA_IRQHandler+0xea8>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d01d      	beq.n	80033ae <HAL_DMA_IRQHandler+0xe1a>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a32      	ldr	r2, [pc, #200]	@ (8003440 <HAL_DMA_IRQHandler+0xeac>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d018      	beq.n	80033ae <HAL_DMA_IRQHandler+0xe1a>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a30      	ldr	r2, [pc, #192]	@ (8003444 <HAL_DMA_IRQHandler+0xeb0>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d013      	beq.n	80033ae <HAL_DMA_IRQHandler+0xe1a>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a2f      	ldr	r2, [pc, #188]	@ (8003448 <HAL_DMA_IRQHandler+0xeb4>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d00e      	beq.n	80033ae <HAL_DMA_IRQHandler+0xe1a>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a2d      	ldr	r2, [pc, #180]	@ (800344c <HAL_DMA_IRQHandler+0xeb8>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d009      	beq.n	80033ae <HAL_DMA_IRQHandler+0xe1a>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a2c      	ldr	r2, [pc, #176]	@ (8003450 <HAL_DMA_IRQHandler+0xebc>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d004      	beq.n	80033ae <HAL_DMA_IRQHandler+0xe1a>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a2a      	ldr	r2, [pc, #168]	@ (8003454 <HAL_DMA_IRQHandler+0xec0>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d108      	bne.n	80033c0 <HAL_DMA_IRQHandler+0xe2c>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f022 021c 	bic.w	r2, r2, #28
 80033bc:	601a      	str	r2, [r3, #0]
 80033be:	e007      	b.n	80033d0 <HAL_DMA_IRQHandler+0xe3c>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f022 020e 	bic.w	r2, r2, #14
 80033ce:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033d4:	f003 031f 	and.w	r3, r3, #31
 80033d8:	2201      	movs	r2, #1
 80033da:	409a      	lsls	r2, r3
 80033dc:	69fb      	ldr	r3, [r7, #28]
 80033de:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2201      	movs	r2, #1
 80033e4:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2201      	movs	r2, #1
 80033ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2200      	movs	r2, #0
 80033f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d009      	beq.n	8003412 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	4798      	blx	r3
 8003406:	e004      	b.n	8003412 <HAL_DMA_IRQHandler+0xe7e>
          return;
 8003408:	bf00      	nop
 800340a:	e002      	b.n	8003412 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800340c:	bf00      	nop
 800340e:	e000      	b.n	8003412 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003410:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003412:	3728      	adds	r7, #40	@ 0x28
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}
 8003418:	40020010 	.word	0x40020010
 800341c:	40020028 	.word	0x40020028
 8003420:	40020040 	.word	0x40020040
 8003424:	40020058 	.word	0x40020058
 8003428:	40020070 	.word	0x40020070
 800342c:	40020088 	.word	0x40020088
 8003430:	400200a0 	.word	0x400200a0
 8003434:	400200b8 	.word	0x400200b8
 8003438:	40020410 	.word	0x40020410
 800343c:	40020428 	.word	0x40020428
 8003440:	40020440 	.word	0x40020440
 8003444:	40020458 	.word	0x40020458
 8003448:	40020470 	.word	0x40020470
 800344c:	40020488 	.word	0x40020488
 8003450:	400204a0 	.word	0x400204a0
 8003454:	400204b8 	.word	0x400204b8

08003458 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003458:	b480      	push	{r7}
 800345a:	b087      	sub	sp, #28
 800345c:	af00      	add	r7, sp, #0
 800345e:	60f8      	str	r0, [r7, #12]
 8003460:	60b9      	str	r1, [r7, #8]
 8003462:	607a      	str	r2, [r7, #4]
 8003464:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800346a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003470:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a7f      	ldr	r2, [pc, #508]	@ (8003674 <DMA_SetConfig+0x21c>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d072      	beq.n	8003562 <DMA_SetConfig+0x10a>
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a7d      	ldr	r2, [pc, #500]	@ (8003678 <DMA_SetConfig+0x220>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d06d      	beq.n	8003562 <DMA_SetConfig+0x10a>
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a7c      	ldr	r2, [pc, #496]	@ (800367c <DMA_SetConfig+0x224>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d068      	beq.n	8003562 <DMA_SetConfig+0x10a>
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a7a      	ldr	r2, [pc, #488]	@ (8003680 <DMA_SetConfig+0x228>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d063      	beq.n	8003562 <DMA_SetConfig+0x10a>
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a79      	ldr	r2, [pc, #484]	@ (8003684 <DMA_SetConfig+0x22c>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d05e      	beq.n	8003562 <DMA_SetConfig+0x10a>
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a77      	ldr	r2, [pc, #476]	@ (8003688 <DMA_SetConfig+0x230>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d059      	beq.n	8003562 <DMA_SetConfig+0x10a>
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a76      	ldr	r2, [pc, #472]	@ (800368c <DMA_SetConfig+0x234>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d054      	beq.n	8003562 <DMA_SetConfig+0x10a>
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a74      	ldr	r2, [pc, #464]	@ (8003690 <DMA_SetConfig+0x238>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d04f      	beq.n	8003562 <DMA_SetConfig+0x10a>
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a73      	ldr	r2, [pc, #460]	@ (8003694 <DMA_SetConfig+0x23c>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d04a      	beq.n	8003562 <DMA_SetConfig+0x10a>
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a71      	ldr	r2, [pc, #452]	@ (8003698 <DMA_SetConfig+0x240>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d045      	beq.n	8003562 <DMA_SetConfig+0x10a>
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a70      	ldr	r2, [pc, #448]	@ (800369c <DMA_SetConfig+0x244>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d040      	beq.n	8003562 <DMA_SetConfig+0x10a>
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a6e      	ldr	r2, [pc, #440]	@ (80036a0 <DMA_SetConfig+0x248>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d03b      	beq.n	8003562 <DMA_SetConfig+0x10a>
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a6d      	ldr	r2, [pc, #436]	@ (80036a4 <DMA_SetConfig+0x24c>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d036      	beq.n	8003562 <DMA_SetConfig+0x10a>
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a6b      	ldr	r2, [pc, #428]	@ (80036a8 <DMA_SetConfig+0x250>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d031      	beq.n	8003562 <DMA_SetConfig+0x10a>
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a6a      	ldr	r2, [pc, #424]	@ (80036ac <DMA_SetConfig+0x254>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d02c      	beq.n	8003562 <DMA_SetConfig+0x10a>
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a68      	ldr	r2, [pc, #416]	@ (80036b0 <DMA_SetConfig+0x258>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d027      	beq.n	8003562 <DMA_SetConfig+0x10a>
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a67      	ldr	r2, [pc, #412]	@ (80036b4 <DMA_SetConfig+0x25c>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d022      	beq.n	8003562 <DMA_SetConfig+0x10a>
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a65      	ldr	r2, [pc, #404]	@ (80036b8 <DMA_SetConfig+0x260>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d01d      	beq.n	8003562 <DMA_SetConfig+0x10a>
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a64      	ldr	r2, [pc, #400]	@ (80036bc <DMA_SetConfig+0x264>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d018      	beq.n	8003562 <DMA_SetConfig+0x10a>
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a62      	ldr	r2, [pc, #392]	@ (80036c0 <DMA_SetConfig+0x268>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d013      	beq.n	8003562 <DMA_SetConfig+0x10a>
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a61      	ldr	r2, [pc, #388]	@ (80036c4 <DMA_SetConfig+0x26c>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d00e      	beq.n	8003562 <DMA_SetConfig+0x10a>
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a5f      	ldr	r2, [pc, #380]	@ (80036c8 <DMA_SetConfig+0x270>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d009      	beq.n	8003562 <DMA_SetConfig+0x10a>
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a5e      	ldr	r2, [pc, #376]	@ (80036cc <DMA_SetConfig+0x274>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d004      	beq.n	8003562 <DMA_SetConfig+0x10a>
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a5c      	ldr	r2, [pc, #368]	@ (80036d0 <DMA_SetConfig+0x278>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d101      	bne.n	8003566 <DMA_SetConfig+0x10e>
 8003562:	2301      	movs	r3, #1
 8003564:	e000      	b.n	8003568 <DMA_SetConfig+0x110>
 8003566:	2300      	movs	r3, #0
 8003568:	2b00      	cmp	r3, #0
 800356a:	d00d      	beq.n	8003588 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003570:	68fa      	ldr	r2, [r7, #12]
 8003572:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003574:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800357a:	2b00      	cmp	r3, #0
 800357c:	d004      	beq.n	8003588 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003582:	68fa      	ldr	r2, [r7, #12]
 8003584:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003586:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a39      	ldr	r2, [pc, #228]	@ (8003674 <DMA_SetConfig+0x21c>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d04a      	beq.n	8003628 <DMA_SetConfig+0x1d0>
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a38      	ldr	r2, [pc, #224]	@ (8003678 <DMA_SetConfig+0x220>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d045      	beq.n	8003628 <DMA_SetConfig+0x1d0>
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a36      	ldr	r2, [pc, #216]	@ (800367c <DMA_SetConfig+0x224>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d040      	beq.n	8003628 <DMA_SetConfig+0x1d0>
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a35      	ldr	r2, [pc, #212]	@ (8003680 <DMA_SetConfig+0x228>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d03b      	beq.n	8003628 <DMA_SetConfig+0x1d0>
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a33      	ldr	r2, [pc, #204]	@ (8003684 <DMA_SetConfig+0x22c>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d036      	beq.n	8003628 <DMA_SetConfig+0x1d0>
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a32      	ldr	r2, [pc, #200]	@ (8003688 <DMA_SetConfig+0x230>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d031      	beq.n	8003628 <DMA_SetConfig+0x1d0>
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a30      	ldr	r2, [pc, #192]	@ (800368c <DMA_SetConfig+0x234>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d02c      	beq.n	8003628 <DMA_SetConfig+0x1d0>
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a2f      	ldr	r2, [pc, #188]	@ (8003690 <DMA_SetConfig+0x238>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d027      	beq.n	8003628 <DMA_SetConfig+0x1d0>
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a2d      	ldr	r2, [pc, #180]	@ (8003694 <DMA_SetConfig+0x23c>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d022      	beq.n	8003628 <DMA_SetConfig+0x1d0>
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a2c      	ldr	r2, [pc, #176]	@ (8003698 <DMA_SetConfig+0x240>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d01d      	beq.n	8003628 <DMA_SetConfig+0x1d0>
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a2a      	ldr	r2, [pc, #168]	@ (800369c <DMA_SetConfig+0x244>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d018      	beq.n	8003628 <DMA_SetConfig+0x1d0>
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a29      	ldr	r2, [pc, #164]	@ (80036a0 <DMA_SetConfig+0x248>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d013      	beq.n	8003628 <DMA_SetConfig+0x1d0>
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a27      	ldr	r2, [pc, #156]	@ (80036a4 <DMA_SetConfig+0x24c>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d00e      	beq.n	8003628 <DMA_SetConfig+0x1d0>
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a26      	ldr	r2, [pc, #152]	@ (80036a8 <DMA_SetConfig+0x250>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d009      	beq.n	8003628 <DMA_SetConfig+0x1d0>
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a24      	ldr	r2, [pc, #144]	@ (80036ac <DMA_SetConfig+0x254>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d004      	beq.n	8003628 <DMA_SetConfig+0x1d0>
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a23      	ldr	r2, [pc, #140]	@ (80036b0 <DMA_SetConfig+0x258>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d101      	bne.n	800362c <DMA_SetConfig+0x1d4>
 8003628:	2301      	movs	r3, #1
 800362a:	e000      	b.n	800362e <DMA_SetConfig+0x1d6>
 800362c:	2300      	movs	r3, #0
 800362e:	2b00      	cmp	r3, #0
 8003630:	d059      	beq.n	80036e6 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003636:	f003 031f 	and.w	r3, r3, #31
 800363a:	223f      	movs	r2, #63	@ 0x3f
 800363c:	409a      	lsls	r2, r3
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003650:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	683a      	ldr	r2, [r7, #0]
 8003658:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	2b40      	cmp	r3, #64	@ 0x40
 8003660:	d138      	bne.n	80036d4 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	687a      	ldr	r2, [r7, #4]
 8003668:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	68ba      	ldr	r2, [r7, #8]
 8003670:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003672:	e0ae      	b.n	80037d2 <DMA_SetConfig+0x37a>
 8003674:	40020010 	.word	0x40020010
 8003678:	40020028 	.word	0x40020028
 800367c:	40020040 	.word	0x40020040
 8003680:	40020058 	.word	0x40020058
 8003684:	40020070 	.word	0x40020070
 8003688:	40020088 	.word	0x40020088
 800368c:	400200a0 	.word	0x400200a0
 8003690:	400200b8 	.word	0x400200b8
 8003694:	40020410 	.word	0x40020410
 8003698:	40020428 	.word	0x40020428
 800369c:	40020440 	.word	0x40020440
 80036a0:	40020458 	.word	0x40020458
 80036a4:	40020470 	.word	0x40020470
 80036a8:	40020488 	.word	0x40020488
 80036ac:	400204a0 	.word	0x400204a0
 80036b0:	400204b8 	.word	0x400204b8
 80036b4:	58025408 	.word	0x58025408
 80036b8:	5802541c 	.word	0x5802541c
 80036bc:	58025430 	.word	0x58025430
 80036c0:	58025444 	.word	0x58025444
 80036c4:	58025458 	.word	0x58025458
 80036c8:	5802546c 	.word	0x5802546c
 80036cc:	58025480 	.word	0x58025480
 80036d0:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	68ba      	ldr	r2, [r7, #8]
 80036da:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	687a      	ldr	r2, [r7, #4]
 80036e2:	60da      	str	r2, [r3, #12]
}
 80036e4:	e075      	b.n	80037d2 <DMA_SetConfig+0x37a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a3d      	ldr	r2, [pc, #244]	@ (80037e0 <DMA_SetConfig+0x388>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d04a      	beq.n	8003786 <DMA_SetConfig+0x32e>
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a3b      	ldr	r2, [pc, #236]	@ (80037e4 <DMA_SetConfig+0x38c>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d045      	beq.n	8003786 <DMA_SetConfig+0x32e>
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a3a      	ldr	r2, [pc, #232]	@ (80037e8 <DMA_SetConfig+0x390>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d040      	beq.n	8003786 <DMA_SetConfig+0x32e>
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a38      	ldr	r2, [pc, #224]	@ (80037ec <DMA_SetConfig+0x394>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d03b      	beq.n	8003786 <DMA_SetConfig+0x32e>
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a37      	ldr	r2, [pc, #220]	@ (80037f0 <DMA_SetConfig+0x398>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d036      	beq.n	8003786 <DMA_SetConfig+0x32e>
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a35      	ldr	r2, [pc, #212]	@ (80037f4 <DMA_SetConfig+0x39c>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d031      	beq.n	8003786 <DMA_SetConfig+0x32e>
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a34      	ldr	r2, [pc, #208]	@ (80037f8 <DMA_SetConfig+0x3a0>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d02c      	beq.n	8003786 <DMA_SetConfig+0x32e>
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a32      	ldr	r2, [pc, #200]	@ (80037fc <DMA_SetConfig+0x3a4>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d027      	beq.n	8003786 <DMA_SetConfig+0x32e>
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a31      	ldr	r2, [pc, #196]	@ (8003800 <DMA_SetConfig+0x3a8>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d022      	beq.n	8003786 <DMA_SetConfig+0x32e>
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a2f      	ldr	r2, [pc, #188]	@ (8003804 <DMA_SetConfig+0x3ac>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d01d      	beq.n	8003786 <DMA_SetConfig+0x32e>
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a2e      	ldr	r2, [pc, #184]	@ (8003808 <DMA_SetConfig+0x3b0>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d018      	beq.n	8003786 <DMA_SetConfig+0x32e>
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a2c      	ldr	r2, [pc, #176]	@ (800380c <DMA_SetConfig+0x3b4>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d013      	beq.n	8003786 <DMA_SetConfig+0x32e>
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a2b      	ldr	r2, [pc, #172]	@ (8003810 <DMA_SetConfig+0x3b8>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d00e      	beq.n	8003786 <DMA_SetConfig+0x32e>
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a29      	ldr	r2, [pc, #164]	@ (8003814 <DMA_SetConfig+0x3bc>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d009      	beq.n	8003786 <DMA_SetConfig+0x32e>
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a28      	ldr	r2, [pc, #160]	@ (8003818 <DMA_SetConfig+0x3c0>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d004      	beq.n	8003786 <DMA_SetConfig+0x32e>
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a26      	ldr	r2, [pc, #152]	@ (800381c <DMA_SetConfig+0x3c4>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d101      	bne.n	800378a <DMA_SetConfig+0x332>
 8003786:	2301      	movs	r3, #1
 8003788:	e000      	b.n	800378c <DMA_SetConfig+0x334>
 800378a:	2300      	movs	r3, #0
 800378c:	2b00      	cmp	r3, #0
 800378e:	d020      	beq.n	80037d2 <DMA_SetConfig+0x37a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003794:	f003 031f 	and.w	r3, r3, #31
 8003798:	2201      	movs	r2, #1
 800379a:	409a      	lsls	r2, r3
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	683a      	ldr	r2, [r7, #0]
 80037a6:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	2b40      	cmp	r3, #64	@ 0x40
 80037ae:	d108      	bne.n	80037c2 <DMA_SetConfig+0x36a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	687a      	ldr	r2, [r7, #4]
 80037b6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	68ba      	ldr	r2, [r7, #8]
 80037be:	60da      	str	r2, [r3, #12]
}
 80037c0:	e007      	b.n	80037d2 <DMA_SetConfig+0x37a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	68ba      	ldr	r2, [r7, #8]
 80037c8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	687a      	ldr	r2, [r7, #4]
 80037d0:	60da      	str	r2, [r3, #12]
}
 80037d2:	bf00      	nop
 80037d4:	371c      	adds	r7, #28
 80037d6:	46bd      	mov	sp, r7
 80037d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037dc:	4770      	bx	lr
 80037de:	bf00      	nop
 80037e0:	48022c08 	.word	0x48022c08
 80037e4:	48022c1c 	.word	0x48022c1c
 80037e8:	48022c30 	.word	0x48022c30
 80037ec:	48022c44 	.word	0x48022c44
 80037f0:	48022c58 	.word	0x48022c58
 80037f4:	48022c6c 	.word	0x48022c6c
 80037f8:	48022c80 	.word	0x48022c80
 80037fc:	48022c94 	.word	0x48022c94
 8003800:	58025408 	.word	0x58025408
 8003804:	5802541c 	.word	0x5802541c
 8003808:	58025430 	.word	0x58025430
 800380c:	58025444 	.word	0x58025444
 8003810:	58025458 	.word	0x58025458
 8003814:	5802546c 	.word	0x5802546c
 8003818:	58025480 	.word	0x58025480
 800381c:	58025494 	.word	0x58025494

08003820 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003820:	b480      	push	{r7}
 8003822:	b085      	sub	sp, #20
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a42      	ldr	r2, [pc, #264]	@ (8003938 <DMA_CalcBaseAndBitshift+0x118>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d04a      	beq.n	80038c8 <DMA_CalcBaseAndBitshift+0xa8>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a41      	ldr	r2, [pc, #260]	@ (800393c <DMA_CalcBaseAndBitshift+0x11c>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d045      	beq.n	80038c8 <DMA_CalcBaseAndBitshift+0xa8>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a3f      	ldr	r2, [pc, #252]	@ (8003940 <DMA_CalcBaseAndBitshift+0x120>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d040      	beq.n	80038c8 <DMA_CalcBaseAndBitshift+0xa8>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a3e      	ldr	r2, [pc, #248]	@ (8003944 <DMA_CalcBaseAndBitshift+0x124>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d03b      	beq.n	80038c8 <DMA_CalcBaseAndBitshift+0xa8>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a3c      	ldr	r2, [pc, #240]	@ (8003948 <DMA_CalcBaseAndBitshift+0x128>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d036      	beq.n	80038c8 <DMA_CalcBaseAndBitshift+0xa8>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a3b      	ldr	r2, [pc, #236]	@ (800394c <DMA_CalcBaseAndBitshift+0x12c>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d031      	beq.n	80038c8 <DMA_CalcBaseAndBitshift+0xa8>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a39      	ldr	r2, [pc, #228]	@ (8003950 <DMA_CalcBaseAndBitshift+0x130>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d02c      	beq.n	80038c8 <DMA_CalcBaseAndBitshift+0xa8>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a38      	ldr	r2, [pc, #224]	@ (8003954 <DMA_CalcBaseAndBitshift+0x134>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d027      	beq.n	80038c8 <DMA_CalcBaseAndBitshift+0xa8>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a36      	ldr	r2, [pc, #216]	@ (8003958 <DMA_CalcBaseAndBitshift+0x138>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d022      	beq.n	80038c8 <DMA_CalcBaseAndBitshift+0xa8>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a35      	ldr	r2, [pc, #212]	@ (800395c <DMA_CalcBaseAndBitshift+0x13c>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d01d      	beq.n	80038c8 <DMA_CalcBaseAndBitshift+0xa8>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a33      	ldr	r2, [pc, #204]	@ (8003960 <DMA_CalcBaseAndBitshift+0x140>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d018      	beq.n	80038c8 <DMA_CalcBaseAndBitshift+0xa8>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a32      	ldr	r2, [pc, #200]	@ (8003964 <DMA_CalcBaseAndBitshift+0x144>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d013      	beq.n	80038c8 <DMA_CalcBaseAndBitshift+0xa8>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a30      	ldr	r2, [pc, #192]	@ (8003968 <DMA_CalcBaseAndBitshift+0x148>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d00e      	beq.n	80038c8 <DMA_CalcBaseAndBitshift+0xa8>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a2f      	ldr	r2, [pc, #188]	@ (800396c <DMA_CalcBaseAndBitshift+0x14c>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d009      	beq.n	80038c8 <DMA_CalcBaseAndBitshift+0xa8>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a2d      	ldr	r2, [pc, #180]	@ (8003970 <DMA_CalcBaseAndBitshift+0x150>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d004      	beq.n	80038c8 <DMA_CalcBaseAndBitshift+0xa8>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a2c      	ldr	r2, [pc, #176]	@ (8003974 <DMA_CalcBaseAndBitshift+0x154>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d101      	bne.n	80038cc <DMA_CalcBaseAndBitshift+0xac>
 80038c8:	2301      	movs	r3, #1
 80038ca:	e000      	b.n	80038ce <DMA_CalcBaseAndBitshift+0xae>
 80038cc:	2300      	movs	r3, #0
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d024      	beq.n	800391c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	b2db      	uxtb	r3, r3
 80038d8:	3b10      	subs	r3, #16
 80038da:	4a27      	ldr	r2, [pc, #156]	@ (8003978 <DMA_CalcBaseAndBitshift+0x158>)
 80038dc:	fba2 2303 	umull	r2, r3, r2, r3
 80038e0:	091b      	lsrs	r3, r3, #4
 80038e2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	f003 0307 	and.w	r3, r3, #7
 80038ea:	4a24      	ldr	r2, [pc, #144]	@ (800397c <DMA_CalcBaseAndBitshift+0x15c>)
 80038ec:	5cd3      	ldrb	r3, [r2, r3]
 80038ee:	461a      	mov	r2, r3
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2b03      	cmp	r3, #3
 80038f8:	d908      	bls.n	800390c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	461a      	mov	r2, r3
 8003900:	4b1f      	ldr	r3, [pc, #124]	@ (8003980 <DMA_CalcBaseAndBitshift+0x160>)
 8003902:	4013      	ands	r3, r2
 8003904:	1d1a      	adds	r2, r3, #4
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	659a      	str	r2, [r3, #88]	@ 0x58
 800390a:	e00d      	b.n	8003928 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	461a      	mov	r2, r3
 8003912:	4b1b      	ldr	r3, [pc, #108]	@ (8003980 <DMA_CalcBaseAndBitshift+0x160>)
 8003914:	4013      	ands	r3, r2
 8003916:	687a      	ldr	r2, [r7, #4]
 8003918:	6593      	str	r3, [r2, #88]	@ 0x58
 800391a:	e005      	b.n	8003928 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800392c:	4618      	mov	r0, r3
 800392e:	3714      	adds	r7, #20
 8003930:	46bd      	mov	sp, r7
 8003932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003936:	4770      	bx	lr
 8003938:	40020010 	.word	0x40020010
 800393c:	40020028 	.word	0x40020028
 8003940:	40020040 	.word	0x40020040
 8003944:	40020058 	.word	0x40020058
 8003948:	40020070 	.word	0x40020070
 800394c:	40020088 	.word	0x40020088
 8003950:	400200a0 	.word	0x400200a0
 8003954:	400200b8 	.word	0x400200b8
 8003958:	40020410 	.word	0x40020410
 800395c:	40020428 	.word	0x40020428
 8003960:	40020440 	.word	0x40020440
 8003964:	40020458 	.word	0x40020458
 8003968:	40020470 	.word	0x40020470
 800396c:	40020488 	.word	0x40020488
 8003970:	400204a0 	.word	0x400204a0
 8003974:	400204b8 	.word	0x400204b8
 8003978:	aaaaaaab 	.word	0xaaaaaaab
 800397c:	08009f30 	.word	0x08009f30
 8003980:	fffffc00 	.word	0xfffffc00

08003984 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003984:	b480      	push	{r7}
 8003986:	b085      	sub	sp, #20
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800398c:	2300      	movs	r3, #0
 800398e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	699b      	ldr	r3, [r3, #24]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d120      	bne.n	80039da <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800399c:	2b03      	cmp	r3, #3
 800399e:	d858      	bhi.n	8003a52 <DMA_CheckFifoParam+0xce>
 80039a0:	a201      	add	r2, pc, #4	@ (adr r2, 80039a8 <DMA_CheckFifoParam+0x24>)
 80039a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039a6:	bf00      	nop
 80039a8:	080039b9 	.word	0x080039b9
 80039ac:	080039cb 	.word	0x080039cb
 80039b0:	080039b9 	.word	0x080039b9
 80039b4:	08003a53 	.word	0x08003a53
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039bc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d048      	beq.n	8003a56 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80039c4:	2301      	movs	r3, #1
 80039c6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80039c8:	e045      	b.n	8003a56 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039ce:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80039d2:	d142      	bne.n	8003a5a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80039d8:	e03f      	b.n	8003a5a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	699b      	ldr	r3, [r3, #24]
 80039de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80039e2:	d123      	bne.n	8003a2c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039e8:	2b03      	cmp	r3, #3
 80039ea:	d838      	bhi.n	8003a5e <DMA_CheckFifoParam+0xda>
 80039ec:	a201      	add	r2, pc, #4	@ (adr r2, 80039f4 <DMA_CheckFifoParam+0x70>)
 80039ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039f2:	bf00      	nop
 80039f4:	08003a05 	.word	0x08003a05
 80039f8:	08003a0b 	.word	0x08003a0b
 80039fc:	08003a05 	.word	0x08003a05
 8003a00:	08003a1d 	.word	0x08003a1d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	73fb      	strb	r3, [r7, #15]
        break;
 8003a08:	e030      	b.n	8003a6c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a0e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d025      	beq.n	8003a62 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003a1a:	e022      	b.n	8003a62 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a20:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003a24:	d11f      	bne.n	8003a66 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003a2a:	e01c      	b.n	8003a66 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a30:	2b02      	cmp	r3, #2
 8003a32:	d902      	bls.n	8003a3a <DMA_CheckFifoParam+0xb6>
 8003a34:	2b03      	cmp	r3, #3
 8003a36:	d003      	beq.n	8003a40 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003a38:	e018      	b.n	8003a6c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	73fb      	strb	r3, [r7, #15]
        break;
 8003a3e:	e015      	b.n	8003a6c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a44:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d00e      	beq.n	8003a6a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	73fb      	strb	r3, [r7, #15]
    break;
 8003a50:	e00b      	b.n	8003a6a <DMA_CheckFifoParam+0xe6>
        break;
 8003a52:	bf00      	nop
 8003a54:	e00a      	b.n	8003a6c <DMA_CheckFifoParam+0xe8>
        break;
 8003a56:	bf00      	nop
 8003a58:	e008      	b.n	8003a6c <DMA_CheckFifoParam+0xe8>
        break;
 8003a5a:	bf00      	nop
 8003a5c:	e006      	b.n	8003a6c <DMA_CheckFifoParam+0xe8>
        break;
 8003a5e:	bf00      	nop
 8003a60:	e004      	b.n	8003a6c <DMA_CheckFifoParam+0xe8>
        break;
 8003a62:	bf00      	nop
 8003a64:	e002      	b.n	8003a6c <DMA_CheckFifoParam+0xe8>
        break;
 8003a66:	bf00      	nop
 8003a68:	e000      	b.n	8003a6c <DMA_CheckFifoParam+0xe8>
    break;
 8003a6a:	bf00      	nop
    }
  }

  return status;
 8003a6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3714      	adds	r7, #20
 8003a72:	46bd      	mov	sp, r7
 8003a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a78:	4770      	bx	lr
 8003a7a:	bf00      	nop

08003a7c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b085      	sub	sp, #20
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a38      	ldr	r2, [pc, #224]	@ (8003b70 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d022      	beq.n	8003ada <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a36      	ldr	r2, [pc, #216]	@ (8003b74 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d01d      	beq.n	8003ada <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a35      	ldr	r2, [pc, #212]	@ (8003b78 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d018      	beq.n	8003ada <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a33      	ldr	r2, [pc, #204]	@ (8003b7c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d013      	beq.n	8003ada <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a32      	ldr	r2, [pc, #200]	@ (8003b80 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d00e      	beq.n	8003ada <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a30      	ldr	r2, [pc, #192]	@ (8003b84 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d009      	beq.n	8003ada <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a2f      	ldr	r2, [pc, #188]	@ (8003b88 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d004      	beq.n	8003ada <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a2d      	ldr	r2, [pc, #180]	@ (8003b8c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d101      	bne.n	8003ade <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8003ada:	2301      	movs	r3, #1
 8003adc:	e000      	b.n	8003ae0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8003ade:	2300      	movs	r3, #0
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d01a      	beq.n	8003b1a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	3b08      	subs	r3, #8
 8003aec:	4a28      	ldr	r2, [pc, #160]	@ (8003b90 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8003aee:	fba2 2303 	umull	r2, r3, r2, r3
 8003af2:	091b      	lsrs	r3, r3, #4
 8003af4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003af6:	68fa      	ldr	r2, [r7, #12]
 8003af8:	4b26      	ldr	r3, [pc, #152]	@ (8003b94 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8003afa:	4413      	add	r3, r2
 8003afc:	009b      	lsls	r3, r3, #2
 8003afe:	461a      	mov	r2, r3
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	4a24      	ldr	r2, [pc, #144]	@ (8003b98 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8003b08:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	f003 031f 	and.w	r3, r3, #31
 8003b10:	2201      	movs	r2, #1
 8003b12:	409a      	lsls	r2, r3
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8003b18:	e024      	b.n	8003b64 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	b2db      	uxtb	r3, r3
 8003b20:	3b10      	subs	r3, #16
 8003b22:	4a1e      	ldr	r2, [pc, #120]	@ (8003b9c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8003b24:	fba2 2303 	umull	r2, r3, r2, r3
 8003b28:	091b      	lsrs	r3, r3, #4
 8003b2a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	4a1c      	ldr	r2, [pc, #112]	@ (8003ba0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d806      	bhi.n	8003b42 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	4a1b      	ldr	r2, [pc, #108]	@ (8003ba4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d902      	bls.n	8003b42 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	3308      	adds	r3, #8
 8003b40:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003b42:	68fa      	ldr	r2, [r7, #12]
 8003b44:	4b18      	ldr	r3, [pc, #96]	@ (8003ba8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8003b46:	4413      	add	r3, r2
 8003b48:	009b      	lsls	r3, r3, #2
 8003b4a:	461a      	mov	r2, r3
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	4a16      	ldr	r2, [pc, #88]	@ (8003bac <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8003b54:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	f003 031f 	and.w	r3, r3, #31
 8003b5c:	2201      	movs	r2, #1
 8003b5e:	409a      	lsls	r2, r3
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003b64:	bf00      	nop
 8003b66:	3714      	adds	r7, #20
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6e:	4770      	bx	lr
 8003b70:	58025408 	.word	0x58025408
 8003b74:	5802541c 	.word	0x5802541c
 8003b78:	58025430 	.word	0x58025430
 8003b7c:	58025444 	.word	0x58025444
 8003b80:	58025458 	.word	0x58025458
 8003b84:	5802546c 	.word	0x5802546c
 8003b88:	58025480 	.word	0x58025480
 8003b8c:	58025494 	.word	0x58025494
 8003b90:	cccccccd 	.word	0xcccccccd
 8003b94:	16009600 	.word	0x16009600
 8003b98:	58025880 	.word	0x58025880
 8003b9c:	aaaaaaab 	.word	0xaaaaaaab
 8003ba0:	400204b8 	.word	0x400204b8
 8003ba4:	4002040f 	.word	0x4002040f
 8003ba8:	10008200 	.word	0x10008200
 8003bac:	40020880 	.word	0x40020880

08003bb0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b085      	sub	sp, #20
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d04a      	beq.n	8003c5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	2b08      	cmp	r3, #8
 8003bca:	d847      	bhi.n	8003c5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a25      	ldr	r2, [pc, #148]	@ (8003c68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d022      	beq.n	8003c1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a24      	ldr	r2, [pc, #144]	@ (8003c6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d01d      	beq.n	8003c1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a22      	ldr	r2, [pc, #136]	@ (8003c70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d018      	beq.n	8003c1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a21      	ldr	r2, [pc, #132]	@ (8003c74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d013      	beq.n	8003c1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a1f      	ldr	r2, [pc, #124]	@ (8003c78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d00e      	beq.n	8003c1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a1e      	ldr	r2, [pc, #120]	@ (8003c7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d009      	beq.n	8003c1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a1c      	ldr	r2, [pc, #112]	@ (8003c80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d004      	beq.n	8003c1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a1b      	ldr	r2, [pc, #108]	@ (8003c84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d101      	bne.n	8003c20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	e000      	b.n	8003c22 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8003c20:	2300      	movs	r3, #0
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d00a      	beq.n	8003c3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8003c26:	68fa      	ldr	r2, [r7, #12]
 8003c28:	4b17      	ldr	r3, [pc, #92]	@ (8003c88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8003c2a:	4413      	add	r3, r2
 8003c2c:	009b      	lsls	r3, r3, #2
 8003c2e:	461a      	mov	r2, r3
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	4a15      	ldr	r2, [pc, #84]	@ (8003c8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8003c38:	671a      	str	r2, [r3, #112]	@ 0x70
 8003c3a:	e009      	b.n	8003c50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003c3c:	68fa      	ldr	r2, [r7, #12]
 8003c3e:	4b14      	ldr	r3, [pc, #80]	@ (8003c90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8003c40:	4413      	add	r3, r2
 8003c42:	009b      	lsls	r3, r3, #2
 8003c44:	461a      	mov	r2, r3
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	4a11      	ldr	r2, [pc, #68]	@ (8003c94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8003c4e:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	3b01      	subs	r3, #1
 8003c54:	2201      	movs	r2, #1
 8003c56:	409a      	lsls	r2, r3
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8003c5c:	bf00      	nop
 8003c5e:	3714      	adds	r7, #20
 8003c60:	46bd      	mov	sp, r7
 8003c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c66:	4770      	bx	lr
 8003c68:	58025408 	.word	0x58025408
 8003c6c:	5802541c 	.word	0x5802541c
 8003c70:	58025430 	.word	0x58025430
 8003c74:	58025444 	.word	0x58025444
 8003c78:	58025458 	.word	0x58025458
 8003c7c:	5802546c 	.word	0x5802546c
 8003c80:	58025480 	.word	0x58025480
 8003c84:	58025494 	.word	0x58025494
 8003c88:	1600963f 	.word	0x1600963f
 8003c8c:	58025940 	.word	0x58025940
 8003c90:	1000823f 	.word	0x1000823f
 8003c94:	40020940 	.word	0x40020940

08003c98 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b089      	sub	sp, #36	@ 0x24
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
 8003ca0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003ca6:	4b89      	ldr	r3, [pc, #548]	@ (8003ecc <HAL_GPIO_Init+0x234>)
 8003ca8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003caa:	e194      	b.n	8003fd6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	2101      	movs	r1, #1
 8003cb2:	69fb      	ldr	r3, [r7, #28]
 8003cb4:	fa01 f303 	lsl.w	r3, r1, r3
 8003cb8:	4013      	ands	r3, r2
 8003cba:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	f000 8186 	beq.w	8003fd0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	f003 0303 	and.w	r3, r3, #3
 8003ccc:	2b01      	cmp	r3, #1
 8003cce:	d005      	beq.n	8003cdc <HAL_GPIO_Init+0x44>
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	f003 0303 	and.w	r3, r3, #3
 8003cd8:	2b02      	cmp	r3, #2
 8003cda:	d130      	bne.n	8003d3e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003ce2:	69fb      	ldr	r3, [r7, #28]
 8003ce4:	005b      	lsls	r3, r3, #1
 8003ce6:	2203      	movs	r2, #3
 8003ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cec:	43db      	mvns	r3, r3
 8003cee:	69ba      	ldr	r2, [r7, #24]
 8003cf0:	4013      	ands	r3, r2
 8003cf2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	68da      	ldr	r2, [r3, #12]
 8003cf8:	69fb      	ldr	r3, [r7, #28]
 8003cfa:	005b      	lsls	r3, r3, #1
 8003cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8003d00:	69ba      	ldr	r2, [r7, #24]
 8003d02:	4313      	orrs	r3, r2
 8003d04:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	69ba      	ldr	r2, [r7, #24]
 8003d0a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003d12:	2201      	movs	r2, #1
 8003d14:	69fb      	ldr	r3, [r7, #28]
 8003d16:	fa02 f303 	lsl.w	r3, r2, r3
 8003d1a:	43db      	mvns	r3, r3
 8003d1c:	69ba      	ldr	r2, [r7, #24]
 8003d1e:	4013      	ands	r3, r2
 8003d20:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	091b      	lsrs	r3, r3, #4
 8003d28:	f003 0201 	and.w	r2, r3, #1
 8003d2c:	69fb      	ldr	r3, [r7, #28]
 8003d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d32:	69ba      	ldr	r2, [r7, #24]
 8003d34:	4313      	orrs	r3, r2
 8003d36:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	69ba      	ldr	r2, [r7, #24]
 8003d3c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	f003 0303 	and.w	r3, r3, #3
 8003d46:	2b03      	cmp	r3, #3
 8003d48:	d017      	beq.n	8003d7a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	68db      	ldr	r3, [r3, #12]
 8003d4e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003d50:	69fb      	ldr	r3, [r7, #28]
 8003d52:	005b      	lsls	r3, r3, #1
 8003d54:	2203      	movs	r2, #3
 8003d56:	fa02 f303 	lsl.w	r3, r2, r3
 8003d5a:	43db      	mvns	r3, r3
 8003d5c:	69ba      	ldr	r2, [r7, #24]
 8003d5e:	4013      	ands	r3, r2
 8003d60:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	689a      	ldr	r2, [r3, #8]
 8003d66:	69fb      	ldr	r3, [r7, #28]
 8003d68:	005b      	lsls	r3, r3, #1
 8003d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d6e:	69ba      	ldr	r2, [r7, #24]
 8003d70:	4313      	orrs	r3, r2
 8003d72:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	69ba      	ldr	r2, [r7, #24]
 8003d78:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	f003 0303 	and.w	r3, r3, #3
 8003d82:	2b02      	cmp	r3, #2
 8003d84:	d123      	bne.n	8003dce <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003d86:	69fb      	ldr	r3, [r7, #28]
 8003d88:	08da      	lsrs	r2, r3, #3
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	3208      	adds	r2, #8
 8003d8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003d94:	69fb      	ldr	r3, [r7, #28]
 8003d96:	f003 0307 	and.w	r3, r3, #7
 8003d9a:	009b      	lsls	r3, r3, #2
 8003d9c:	220f      	movs	r2, #15
 8003d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003da2:	43db      	mvns	r3, r3
 8003da4:	69ba      	ldr	r2, [r7, #24]
 8003da6:	4013      	ands	r3, r2
 8003da8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	691a      	ldr	r2, [r3, #16]
 8003dae:	69fb      	ldr	r3, [r7, #28]
 8003db0:	f003 0307 	and.w	r3, r3, #7
 8003db4:	009b      	lsls	r3, r3, #2
 8003db6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dba:	69ba      	ldr	r2, [r7, #24]
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003dc0:	69fb      	ldr	r3, [r7, #28]
 8003dc2:	08da      	lsrs	r2, r3, #3
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	3208      	adds	r2, #8
 8003dc8:	69b9      	ldr	r1, [r7, #24]
 8003dca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003dd4:	69fb      	ldr	r3, [r7, #28]
 8003dd6:	005b      	lsls	r3, r3, #1
 8003dd8:	2203      	movs	r2, #3
 8003dda:	fa02 f303 	lsl.w	r3, r2, r3
 8003dde:	43db      	mvns	r3, r3
 8003de0:	69ba      	ldr	r2, [r7, #24]
 8003de2:	4013      	ands	r3, r2
 8003de4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	f003 0203 	and.w	r2, r3, #3
 8003dee:	69fb      	ldr	r3, [r7, #28]
 8003df0:	005b      	lsls	r3, r3, #1
 8003df2:	fa02 f303 	lsl.w	r3, r2, r3
 8003df6:	69ba      	ldr	r2, [r7, #24]
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	69ba      	ldr	r2, [r7, #24]
 8003e00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	f000 80e0 	beq.w	8003fd0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e10:	4b2f      	ldr	r3, [pc, #188]	@ (8003ed0 <HAL_GPIO_Init+0x238>)
 8003e12:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8003e16:	4a2e      	ldr	r2, [pc, #184]	@ (8003ed0 <HAL_GPIO_Init+0x238>)
 8003e18:	f043 0302 	orr.w	r3, r3, #2
 8003e1c:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8003e20:	4b2b      	ldr	r3, [pc, #172]	@ (8003ed0 <HAL_GPIO_Init+0x238>)
 8003e22:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8003e26:	f003 0302 	and.w	r3, r3, #2
 8003e2a:	60fb      	str	r3, [r7, #12]
 8003e2c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003e2e:	4a29      	ldr	r2, [pc, #164]	@ (8003ed4 <HAL_GPIO_Init+0x23c>)
 8003e30:	69fb      	ldr	r3, [r7, #28]
 8003e32:	089b      	lsrs	r3, r3, #2
 8003e34:	3302      	adds	r3, #2
 8003e36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003e3c:	69fb      	ldr	r3, [r7, #28]
 8003e3e:	f003 0303 	and.w	r3, r3, #3
 8003e42:	009b      	lsls	r3, r3, #2
 8003e44:	220f      	movs	r2, #15
 8003e46:	fa02 f303 	lsl.w	r3, r2, r3
 8003e4a:	43db      	mvns	r3, r3
 8003e4c:	69ba      	ldr	r2, [r7, #24]
 8003e4e:	4013      	ands	r3, r2
 8003e50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	4a20      	ldr	r2, [pc, #128]	@ (8003ed8 <HAL_GPIO_Init+0x240>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d052      	beq.n	8003f00 <HAL_GPIO_Init+0x268>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	4a1f      	ldr	r2, [pc, #124]	@ (8003edc <HAL_GPIO_Init+0x244>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d031      	beq.n	8003ec6 <HAL_GPIO_Init+0x22e>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	4a1e      	ldr	r2, [pc, #120]	@ (8003ee0 <HAL_GPIO_Init+0x248>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d02b      	beq.n	8003ec2 <HAL_GPIO_Init+0x22a>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	4a1d      	ldr	r2, [pc, #116]	@ (8003ee4 <HAL_GPIO_Init+0x24c>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d025      	beq.n	8003ebe <HAL_GPIO_Init+0x226>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	4a1c      	ldr	r2, [pc, #112]	@ (8003ee8 <HAL_GPIO_Init+0x250>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d01f      	beq.n	8003eba <HAL_GPIO_Init+0x222>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	4a1b      	ldr	r2, [pc, #108]	@ (8003eec <HAL_GPIO_Init+0x254>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d019      	beq.n	8003eb6 <HAL_GPIO_Init+0x21e>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	4a1a      	ldr	r2, [pc, #104]	@ (8003ef0 <HAL_GPIO_Init+0x258>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d013      	beq.n	8003eb2 <HAL_GPIO_Init+0x21a>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	4a19      	ldr	r2, [pc, #100]	@ (8003ef4 <HAL_GPIO_Init+0x25c>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d00d      	beq.n	8003eae <HAL_GPIO_Init+0x216>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	4a18      	ldr	r2, [pc, #96]	@ (8003ef8 <HAL_GPIO_Init+0x260>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d007      	beq.n	8003eaa <HAL_GPIO_Init+0x212>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	4a17      	ldr	r2, [pc, #92]	@ (8003efc <HAL_GPIO_Init+0x264>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d101      	bne.n	8003ea6 <HAL_GPIO_Init+0x20e>
 8003ea2:	2309      	movs	r3, #9
 8003ea4:	e02d      	b.n	8003f02 <HAL_GPIO_Init+0x26a>
 8003ea6:	230a      	movs	r3, #10
 8003ea8:	e02b      	b.n	8003f02 <HAL_GPIO_Init+0x26a>
 8003eaa:	2308      	movs	r3, #8
 8003eac:	e029      	b.n	8003f02 <HAL_GPIO_Init+0x26a>
 8003eae:	2307      	movs	r3, #7
 8003eb0:	e027      	b.n	8003f02 <HAL_GPIO_Init+0x26a>
 8003eb2:	2306      	movs	r3, #6
 8003eb4:	e025      	b.n	8003f02 <HAL_GPIO_Init+0x26a>
 8003eb6:	2305      	movs	r3, #5
 8003eb8:	e023      	b.n	8003f02 <HAL_GPIO_Init+0x26a>
 8003eba:	2304      	movs	r3, #4
 8003ebc:	e021      	b.n	8003f02 <HAL_GPIO_Init+0x26a>
 8003ebe:	2303      	movs	r3, #3
 8003ec0:	e01f      	b.n	8003f02 <HAL_GPIO_Init+0x26a>
 8003ec2:	2302      	movs	r3, #2
 8003ec4:	e01d      	b.n	8003f02 <HAL_GPIO_Init+0x26a>
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	e01b      	b.n	8003f02 <HAL_GPIO_Init+0x26a>
 8003eca:	bf00      	nop
 8003ecc:	58000080 	.word	0x58000080
 8003ed0:	58024400 	.word	0x58024400
 8003ed4:	58000400 	.word	0x58000400
 8003ed8:	58020000 	.word	0x58020000
 8003edc:	58020400 	.word	0x58020400
 8003ee0:	58020800 	.word	0x58020800
 8003ee4:	58020c00 	.word	0x58020c00
 8003ee8:	58021000 	.word	0x58021000
 8003eec:	58021400 	.word	0x58021400
 8003ef0:	58021800 	.word	0x58021800
 8003ef4:	58021c00 	.word	0x58021c00
 8003ef8:	58022000 	.word	0x58022000
 8003efc:	58022400 	.word	0x58022400
 8003f00:	2300      	movs	r3, #0
 8003f02:	69fa      	ldr	r2, [r7, #28]
 8003f04:	f002 0203 	and.w	r2, r2, #3
 8003f08:	0092      	lsls	r2, r2, #2
 8003f0a:	4093      	lsls	r3, r2
 8003f0c:	69ba      	ldr	r2, [r7, #24]
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003f12:	4938      	ldr	r1, [pc, #224]	@ (8003ff4 <HAL_GPIO_Init+0x35c>)
 8003f14:	69fb      	ldr	r3, [r7, #28]
 8003f16:	089b      	lsrs	r3, r3, #2
 8003f18:	3302      	adds	r3, #2
 8003f1a:	69ba      	ldr	r2, [r7, #24]
 8003f1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003f20:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	43db      	mvns	r3, r3
 8003f2c:	69ba      	ldr	r2, [r7, #24]
 8003f2e:	4013      	ands	r3, r2
 8003f30:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d003      	beq.n	8003f46 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003f3e:	69ba      	ldr	r2, [r7, #24]
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	4313      	orrs	r3, r2
 8003f44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003f46:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003f4a:	69bb      	ldr	r3, [r7, #24]
 8003f4c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003f4e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	43db      	mvns	r3, r3
 8003f5a:	69ba      	ldr	r2, [r7, #24]
 8003f5c:	4013      	ands	r3, r2
 8003f5e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d003      	beq.n	8003f74 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003f6c:	69ba      	ldr	r2, [r7, #24]
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	4313      	orrs	r3, r2
 8003f72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003f74:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003f78:	69bb      	ldr	r3, [r7, #24]
 8003f7a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	43db      	mvns	r3, r3
 8003f86:	69ba      	ldr	r2, [r7, #24]
 8003f88:	4013      	ands	r3, r2
 8003f8a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d003      	beq.n	8003fa0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003f98:	69ba      	ldr	r2, [r7, #24]
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	69ba      	ldr	r2, [r7, #24]
 8003fa4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	43db      	mvns	r3, r3
 8003fb0:	69ba      	ldr	r2, [r7, #24]
 8003fb2:	4013      	ands	r3, r2
 8003fb4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d003      	beq.n	8003fca <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003fc2:	69ba      	ldr	r2, [r7, #24]
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	69ba      	ldr	r2, [r7, #24]
 8003fce:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003fd0:	69fb      	ldr	r3, [r7, #28]
 8003fd2:	3301      	adds	r3, #1
 8003fd4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	681a      	ldr	r2, [r3, #0]
 8003fda:	69fb      	ldr	r3, [r7, #28]
 8003fdc:	fa22 f303 	lsr.w	r3, r2, r3
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	f47f ae63 	bne.w	8003cac <HAL_GPIO_Init+0x14>
  }
}
 8003fe6:	bf00      	nop
 8003fe8:	bf00      	nop
 8003fea:	3724      	adds	r7, #36	@ 0x24
 8003fec:	46bd      	mov	sp, r7
 8003fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff2:	4770      	bx	lr
 8003ff4:	58000400 	.word	0x58000400

08003ff8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b083      	sub	sp, #12
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
 8004000:	460b      	mov	r3, r1
 8004002:	807b      	strh	r3, [r7, #2]
 8004004:	4613      	mov	r3, r2
 8004006:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004008:	787b      	ldrb	r3, [r7, #1]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d003      	beq.n	8004016 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800400e:	887a      	ldrh	r2, [r7, #2]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004014:	e003      	b.n	800401e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004016:	887b      	ldrh	r3, [r7, #2]
 8004018:	041a      	lsls	r2, r3, #16
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	619a      	str	r2, [r3, #24]
}
 800401e:	bf00      	nop
 8004020:	370c      	adds	r7, #12
 8004022:	46bd      	mov	sp, r7
 8004024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004028:	4770      	bx	lr
	...

0800402c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b084      	sub	sp, #16
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8004034:	4b29      	ldr	r3, [pc, #164]	@ (80040dc <HAL_PWREx_ConfigSupply+0xb0>)
 8004036:	68db      	ldr	r3, [r3, #12]
 8004038:	f003 0307 	and.w	r3, r3, #7
 800403c:	2b06      	cmp	r3, #6
 800403e:	d00a      	beq.n	8004056 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004040:	4b26      	ldr	r3, [pc, #152]	@ (80040dc <HAL_PWREx_ConfigSupply+0xb0>)
 8004042:	68db      	ldr	r3, [r3, #12]
 8004044:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004048:	687a      	ldr	r2, [r7, #4]
 800404a:	429a      	cmp	r2, r3
 800404c:	d001      	beq.n	8004052 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	e040      	b.n	80040d4 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004052:	2300      	movs	r3, #0
 8004054:	e03e      	b.n	80040d4 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004056:	4b21      	ldr	r3, [pc, #132]	@ (80040dc <HAL_PWREx_ConfigSupply+0xb0>)
 8004058:	68db      	ldr	r3, [r3, #12]
 800405a:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 800405e:	491f      	ldr	r1, [pc, #124]	@ (80040dc <HAL_PWREx_ConfigSupply+0xb0>)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	4313      	orrs	r3, r2
 8004064:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004066:	f7fd fb5d 	bl	8001724 <HAL_GetTick>
 800406a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800406c:	e009      	b.n	8004082 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800406e:	f7fd fb59 	bl	8001724 <HAL_GetTick>
 8004072:	4602      	mov	r2, r0
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	1ad3      	subs	r3, r2, r3
 8004078:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800407c:	d901      	bls.n	8004082 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	e028      	b.n	80040d4 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004082:	4b16      	ldr	r3, [pc, #88]	@ (80040dc <HAL_PWREx_ConfigSupply+0xb0>)
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800408a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800408e:	d1ee      	bne.n	800406e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2b1e      	cmp	r3, #30
 8004094:	d008      	beq.n	80040a8 <HAL_PWREx_ConfigSupply+0x7c>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2b2e      	cmp	r3, #46	@ 0x2e
 800409a:	d005      	beq.n	80040a8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2b1d      	cmp	r3, #29
 80040a0:	d002      	beq.n	80040a8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2b2d      	cmp	r3, #45	@ 0x2d
 80040a6:	d114      	bne.n	80040d2 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80040a8:	f7fd fb3c 	bl	8001724 <HAL_GetTick>
 80040ac:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80040ae:	e009      	b.n	80040c4 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80040b0:	f7fd fb38 	bl	8001724 <HAL_GetTick>
 80040b4:	4602      	mov	r2, r0
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	1ad3      	subs	r3, r2, r3
 80040ba:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80040be:	d901      	bls.n	80040c4 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80040c0:	2301      	movs	r3, #1
 80040c2:	e007      	b.n	80040d4 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80040c4:	4b05      	ldr	r3, [pc, #20]	@ (80040dc <HAL_PWREx_ConfigSupply+0xb0>)
 80040c6:	68db      	ldr	r3, [r3, #12]
 80040c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80040cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040d0:	d1ee      	bne.n	80040b0 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80040d2:	2300      	movs	r3, #0
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	3710      	adds	r7, #16
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}
 80040dc:	58024800 	.word	0x58024800

080040e0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b08c      	sub	sp, #48	@ 0x30
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d102      	bne.n	80040f4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	f000 bc1f 	b.w	8004932 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f003 0301 	and.w	r3, r3, #1
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	f000 80b3 	beq.w	8004268 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004102:	4b95      	ldr	r3, [pc, #596]	@ (8004358 <HAL_RCC_OscConfig+0x278>)
 8004104:	691b      	ldr	r3, [r3, #16]
 8004106:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800410a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800410c:	4b92      	ldr	r3, [pc, #584]	@ (8004358 <HAL_RCC_OscConfig+0x278>)
 800410e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004110:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004112:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004114:	2b10      	cmp	r3, #16
 8004116:	d007      	beq.n	8004128 <HAL_RCC_OscConfig+0x48>
 8004118:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800411a:	2b18      	cmp	r3, #24
 800411c:	d112      	bne.n	8004144 <HAL_RCC_OscConfig+0x64>
 800411e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004120:	f003 0303 	and.w	r3, r3, #3
 8004124:	2b02      	cmp	r3, #2
 8004126:	d10d      	bne.n	8004144 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004128:	4b8b      	ldr	r3, [pc, #556]	@ (8004358 <HAL_RCC_OscConfig+0x278>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004130:	2b00      	cmp	r3, #0
 8004132:	f000 8098 	beq.w	8004266 <HAL_RCC_OscConfig+0x186>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	2b00      	cmp	r3, #0
 800413c:	f040 8093 	bne.w	8004266 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004140:	2301      	movs	r3, #1
 8004142:	e3f6      	b.n	8004932 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800414c:	d106      	bne.n	800415c <HAL_RCC_OscConfig+0x7c>
 800414e:	4b82      	ldr	r3, [pc, #520]	@ (8004358 <HAL_RCC_OscConfig+0x278>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a81      	ldr	r2, [pc, #516]	@ (8004358 <HAL_RCC_OscConfig+0x278>)
 8004154:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004158:	6013      	str	r3, [r2, #0]
 800415a:	e058      	b.n	800420e <HAL_RCC_OscConfig+0x12e>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d112      	bne.n	800418a <HAL_RCC_OscConfig+0xaa>
 8004164:	4b7c      	ldr	r3, [pc, #496]	@ (8004358 <HAL_RCC_OscConfig+0x278>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a7b      	ldr	r2, [pc, #492]	@ (8004358 <HAL_RCC_OscConfig+0x278>)
 800416a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800416e:	6013      	str	r3, [r2, #0]
 8004170:	4b79      	ldr	r3, [pc, #484]	@ (8004358 <HAL_RCC_OscConfig+0x278>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a78      	ldr	r2, [pc, #480]	@ (8004358 <HAL_RCC_OscConfig+0x278>)
 8004176:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800417a:	6013      	str	r3, [r2, #0]
 800417c:	4b76      	ldr	r3, [pc, #472]	@ (8004358 <HAL_RCC_OscConfig+0x278>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a75      	ldr	r2, [pc, #468]	@ (8004358 <HAL_RCC_OscConfig+0x278>)
 8004182:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004186:	6013      	str	r3, [r2, #0]
 8004188:	e041      	b.n	800420e <HAL_RCC_OscConfig+0x12e>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004192:	d112      	bne.n	80041ba <HAL_RCC_OscConfig+0xda>
 8004194:	4b70      	ldr	r3, [pc, #448]	@ (8004358 <HAL_RCC_OscConfig+0x278>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a6f      	ldr	r2, [pc, #444]	@ (8004358 <HAL_RCC_OscConfig+0x278>)
 800419a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800419e:	6013      	str	r3, [r2, #0]
 80041a0:	4b6d      	ldr	r3, [pc, #436]	@ (8004358 <HAL_RCC_OscConfig+0x278>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a6c      	ldr	r2, [pc, #432]	@ (8004358 <HAL_RCC_OscConfig+0x278>)
 80041a6:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80041aa:	6013      	str	r3, [r2, #0]
 80041ac:	4b6a      	ldr	r3, [pc, #424]	@ (8004358 <HAL_RCC_OscConfig+0x278>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a69      	ldr	r2, [pc, #420]	@ (8004358 <HAL_RCC_OscConfig+0x278>)
 80041b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041b6:	6013      	str	r3, [r2, #0]
 80041b8:	e029      	b.n	800420e <HAL_RCC_OscConfig+0x12e>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 80041c2:	d112      	bne.n	80041ea <HAL_RCC_OscConfig+0x10a>
 80041c4:	4b64      	ldr	r3, [pc, #400]	@ (8004358 <HAL_RCC_OscConfig+0x278>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a63      	ldr	r2, [pc, #396]	@ (8004358 <HAL_RCC_OscConfig+0x278>)
 80041ca:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80041ce:	6013      	str	r3, [r2, #0]
 80041d0:	4b61      	ldr	r3, [pc, #388]	@ (8004358 <HAL_RCC_OscConfig+0x278>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a60      	ldr	r2, [pc, #384]	@ (8004358 <HAL_RCC_OscConfig+0x278>)
 80041d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80041da:	6013      	str	r3, [r2, #0]
 80041dc:	4b5e      	ldr	r3, [pc, #376]	@ (8004358 <HAL_RCC_OscConfig+0x278>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a5d      	ldr	r2, [pc, #372]	@ (8004358 <HAL_RCC_OscConfig+0x278>)
 80041e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041e6:	6013      	str	r3, [r2, #0]
 80041e8:	e011      	b.n	800420e <HAL_RCC_OscConfig+0x12e>
 80041ea:	4b5b      	ldr	r3, [pc, #364]	@ (8004358 <HAL_RCC_OscConfig+0x278>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a5a      	ldr	r2, [pc, #360]	@ (8004358 <HAL_RCC_OscConfig+0x278>)
 80041f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80041f4:	6013      	str	r3, [r2, #0]
 80041f6:	4b58      	ldr	r3, [pc, #352]	@ (8004358 <HAL_RCC_OscConfig+0x278>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a57      	ldr	r2, [pc, #348]	@ (8004358 <HAL_RCC_OscConfig+0x278>)
 80041fc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004200:	6013      	str	r3, [r2, #0]
 8004202:	4b55      	ldr	r3, [pc, #340]	@ (8004358 <HAL_RCC_OscConfig+0x278>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a54      	ldr	r2, [pc, #336]	@ (8004358 <HAL_RCC_OscConfig+0x278>)
 8004208:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800420c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d013      	beq.n	800423e <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004216:	f7fd fa85 	bl	8001724 <HAL_GetTick>
 800421a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800421c:	e008      	b.n	8004230 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800421e:	f7fd fa81 	bl	8001724 <HAL_GetTick>
 8004222:	4602      	mov	r2, r0
 8004224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004226:	1ad3      	subs	r3, r2, r3
 8004228:	2b64      	cmp	r3, #100	@ 0x64
 800422a:	d901      	bls.n	8004230 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 800422c:	2303      	movs	r3, #3
 800422e:	e380      	b.n	8004932 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004230:	4b49      	ldr	r3, [pc, #292]	@ (8004358 <HAL_RCC_OscConfig+0x278>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004238:	2b00      	cmp	r3, #0
 800423a:	d0f0      	beq.n	800421e <HAL_RCC_OscConfig+0x13e>
 800423c:	e014      	b.n	8004268 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800423e:	f7fd fa71 	bl	8001724 <HAL_GetTick>
 8004242:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004244:	e008      	b.n	8004258 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004246:	f7fd fa6d 	bl	8001724 <HAL_GetTick>
 800424a:	4602      	mov	r2, r0
 800424c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800424e:	1ad3      	subs	r3, r2, r3
 8004250:	2b64      	cmp	r3, #100	@ 0x64
 8004252:	d901      	bls.n	8004258 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8004254:	2303      	movs	r3, #3
 8004256:	e36c      	b.n	8004932 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004258:	4b3f      	ldr	r3, [pc, #252]	@ (8004358 <HAL_RCC_OscConfig+0x278>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004260:	2b00      	cmp	r3, #0
 8004262:	d1f0      	bne.n	8004246 <HAL_RCC_OscConfig+0x166>
 8004264:	e000      	b.n	8004268 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004266:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f003 0302 	and.w	r3, r3, #2
 8004270:	2b00      	cmp	r3, #0
 8004272:	f000 808c 	beq.w	800438e <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004276:	4b38      	ldr	r3, [pc, #224]	@ (8004358 <HAL_RCC_OscConfig+0x278>)
 8004278:	691b      	ldr	r3, [r3, #16]
 800427a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800427e:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004280:	4b35      	ldr	r3, [pc, #212]	@ (8004358 <HAL_RCC_OscConfig+0x278>)
 8004282:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004284:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004286:	6a3b      	ldr	r3, [r7, #32]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d007      	beq.n	800429c <HAL_RCC_OscConfig+0x1bc>
 800428c:	6a3b      	ldr	r3, [r7, #32]
 800428e:	2b18      	cmp	r3, #24
 8004290:	d137      	bne.n	8004302 <HAL_RCC_OscConfig+0x222>
 8004292:	69fb      	ldr	r3, [r7, #28]
 8004294:	f003 0303 	and.w	r3, r3, #3
 8004298:	2b00      	cmp	r3, #0
 800429a:	d132      	bne.n	8004302 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800429c:	4b2e      	ldr	r3, [pc, #184]	@ (8004358 <HAL_RCC_OscConfig+0x278>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f003 0304 	and.w	r3, r3, #4
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d005      	beq.n	80042b4 <HAL_RCC_OscConfig+0x1d4>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	68db      	ldr	r3, [r3, #12]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d101      	bne.n	80042b4 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 80042b0:	2301      	movs	r3, #1
 80042b2:	e33e      	b.n	8004932 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80042b4:	4b28      	ldr	r3, [pc, #160]	@ (8004358 <HAL_RCC_OscConfig+0x278>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f023 0219 	bic.w	r2, r3, #25
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	68db      	ldr	r3, [r3, #12]
 80042c0:	4925      	ldr	r1, [pc, #148]	@ (8004358 <HAL_RCC_OscConfig+0x278>)
 80042c2:	4313      	orrs	r3, r2
 80042c4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042c6:	f7fd fa2d 	bl	8001724 <HAL_GetTick>
 80042ca:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80042cc:	e008      	b.n	80042e0 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042ce:	f7fd fa29 	bl	8001724 <HAL_GetTick>
 80042d2:	4602      	mov	r2, r0
 80042d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042d6:	1ad3      	subs	r3, r2, r3
 80042d8:	2b02      	cmp	r3, #2
 80042da:	d901      	bls.n	80042e0 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80042dc:	2303      	movs	r3, #3
 80042de:	e328      	b.n	8004932 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80042e0:	4b1d      	ldr	r3, [pc, #116]	@ (8004358 <HAL_RCC_OscConfig+0x278>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f003 0304 	and.w	r3, r3, #4
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d0f0      	beq.n	80042ce <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042ec:	4b1a      	ldr	r3, [pc, #104]	@ (8004358 <HAL_RCC_OscConfig+0x278>)
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	691b      	ldr	r3, [r3, #16]
 80042f8:	061b      	lsls	r3, r3, #24
 80042fa:	4917      	ldr	r1, [pc, #92]	@ (8004358 <HAL_RCC_OscConfig+0x278>)
 80042fc:	4313      	orrs	r3, r2
 80042fe:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004300:	e045      	b.n	800438e <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	68db      	ldr	r3, [r3, #12]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d028      	beq.n	800435c <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800430a:	4b13      	ldr	r3, [pc, #76]	@ (8004358 <HAL_RCC_OscConfig+0x278>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f023 0219 	bic.w	r2, r3, #25
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	68db      	ldr	r3, [r3, #12]
 8004316:	4910      	ldr	r1, [pc, #64]	@ (8004358 <HAL_RCC_OscConfig+0x278>)
 8004318:	4313      	orrs	r3, r2
 800431a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800431c:	f7fd fa02 	bl	8001724 <HAL_GetTick>
 8004320:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004322:	e008      	b.n	8004336 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004324:	f7fd f9fe 	bl	8001724 <HAL_GetTick>
 8004328:	4602      	mov	r2, r0
 800432a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800432c:	1ad3      	subs	r3, r2, r3
 800432e:	2b02      	cmp	r3, #2
 8004330:	d901      	bls.n	8004336 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8004332:	2303      	movs	r3, #3
 8004334:	e2fd      	b.n	8004932 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004336:	4b08      	ldr	r3, [pc, #32]	@ (8004358 <HAL_RCC_OscConfig+0x278>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f003 0304 	and.w	r3, r3, #4
 800433e:	2b00      	cmp	r3, #0
 8004340:	d0f0      	beq.n	8004324 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004342:	4b05      	ldr	r3, [pc, #20]	@ (8004358 <HAL_RCC_OscConfig+0x278>)
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	691b      	ldr	r3, [r3, #16]
 800434e:	061b      	lsls	r3, r3, #24
 8004350:	4901      	ldr	r1, [pc, #4]	@ (8004358 <HAL_RCC_OscConfig+0x278>)
 8004352:	4313      	orrs	r3, r2
 8004354:	604b      	str	r3, [r1, #4]
 8004356:	e01a      	b.n	800438e <HAL_RCC_OscConfig+0x2ae>
 8004358:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800435c:	4b97      	ldr	r3, [pc, #604]	@ (80045bc <HAL_RCC_OscConfig+0x4dc>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a96      	ldr	r2, [pc, #600]	@ (80045bc <HAL_RCC_OscConfig+0x4dc>)
 8004362:	f023 0301 	bic.w	r3, r3, #1
 8004366:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004368:	f7fd f9dc 	bl	8001724 <HAL_GetTick>
 800436c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800436e:	e008      	b.n	8004382 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004370:	f7fd f9d8 	bl	8001724 <HAL_GetTick>
 8004374:	4602      	mov	r2, r0
 8004376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004378:	1ad3      	subs	r3, r2, r3
 800437a:	2b02      	cmp	r3, #2
 800437c:	d901      	bls.n	8004382 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 800437e:	2303      	movs	r3, #3
 8004380:	e2d7      	b.n	8004932 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004382:	4b8e      	ldr	r3, [pc, #568]	@ (80045bc <HAL_RCC_OscConfig+0x4dc>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f003 0304 	and.w	r3, r3, #4
 800438a:	2b00      	cmp	r3, #0
 800438c:	d1f0      	bne.n	8004370 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f003 0310 	and.w	r3, r3, #16
 8004396:	2b00      	cmp	r3, #0
 8004398:	d06a      	beq.n	8004470 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800439a:	4b88      	ldr	r3, [pc, #544]	@ (80045bc <HAL_RCC_OscConfig+0x4dc>)
 800439c:	691b      	ldr	r3, [r3, #16]
 800439e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80043a2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80043a4:	4b85      	ldr	r3, [pc, #532]	@ (80045bc <HAL_RCC_OscConfig+0x4dc>)
 80043a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043a8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80043aa:	69bb      	ldr	r3, [r7, #24]
 80043ac:	2b08      	cmp	r3, #8
 80043ae:	d007      	beq.n	80043c0 <HAL_RCC_OscConfig+0x2e0>
 80043b0:	69bb      	ldr	r3, [r7, #24]
 80043b2:	2b18      	cmp	r3, #24
 80043b4:	d11b      	bne.n	80043ee <HAL_RCC_OscConfig+0x30e>
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	f003 0303 	and.w	r3, r3, #3
 80043bc:	2b01      	cmp	r3, #1
 80043be:	d116      	bne.n	80043ee <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80043c0:	4b7e      	ldr	r3, [pc, #504]	@ (80045bc <HAL_RCC_OscConfig+0x4dc>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d005      	beq.n	80043d8 <HAL_RCC_OscConfig+0x2f8>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	69db      	ldr	r3, [r3, #28]
 80043d0:	2b80      	cmp	r3, #128	@ 0x80
 80043d2:	d001      	beq.n	80043d8 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 80043d4:	2301      	movs	r3, #1
 80043d6:	e2ac      	b.n	8004932 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80043d8:	4b78      	ldr	r3, [pc, #480]	@ (80045bc <HAL_RCC_OscConfig+0x4dc>)
 80043da:	68db      	ldr	r3, [r3, #12]
 80043dc:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6a1b      	ldr	r3, [r3, #32]
 80043e4:	061b      	lsls	r3, r3, #24
 80043e6:	4975      	ldr	r1, [pc, #468]	@ (80045bc <HAL_RCC_OscConfig+0x4dc>)
 80043e8:	4313      	orrs	r3, r2
 80043ea:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80043ec:	e040      	b.n	8004470 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	69db      	ldr	r3, [r3, #28]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d023      	beq.n	800443e <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80043f6:	4b71      	ldr	r3, [pc, #452]	@ (80045bc <HAL_RCC_OscConfig+0x4dc>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a70      	ldr	r2, [pc, #448]	@ (80045bc <HAL_RCC_OscConfig+0x4dc>)
 80043fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004400:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004402:	f7fd f98f 	bl	8001724 <HAL_GetTick>
 8004406:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004408:	e008      	b.n	800441c <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800440a:	f7fd f98b 	bl	8001724 <HAL_GetTick>
 800440e:	4602      	mov	r2, r0
 8004410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004412:	1ad3      	subs	r3, r2, r3
 8004414:	2b02      	cmp	r3, #2
 8004416:	d901      	bls.n	800441c <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8004418:	2303      	movs	r3, #3
 800441a:	e28a      	b.n	8004932 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800441c:	4b67      	ldr	r3, [pc, #412]	@ (80045bc <HAL_RCC_OscConfig+0x4dc>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004424:	2b00      	cmp	r3, #0
 8004426:	d0f0      	beq.n	800440a <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004428:	4b64      	ldr	r3, [pc, #400]	@ (80045bc <HAL_RCC_OscConfig+0x4dc>)
 800442a:	68db      	ldr	r3, [r3, #12]
 800442c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6a1b      	ldr	r3, [r3, #32]
 8004434:	061b      	lsls	r3, r3, #24
 8004436:	4961      	ldr	r1, [pc, #388]	@ (80045bc <HAL_RCC_OscConfig+0x4dc>)
 8004438:	4313      	orrs	r3, r2
 800443a:	60cb      	str	r3, [r1, #12]
 800443c:	e018      	b.n	8004470 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800443e:	4b5f      	ldr	r3, [pc, #380]	@ (80045bc <HAL_RCC_OscConfig+0x4dc>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a5e      	ldr	r2, [pc, #376]	@ (80045bc <HAL_RCC_OscConfig+0x4dc>)
 8004444:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004448:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800444a:	f7fd f96b 	bl	8001724 <HAL_GetTick>
 800444e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004450:	e008      	b.n	8004464 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004452:	f7fd f967 	bl	8001724 <HAL_GetTick>
 8004456:	4602      	mov	r2, r0
 8004458:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800445a:	1ad3      	subs	r3, r2, r3
 800445c:	2b02      	cmp	r3, #2
 800445e:	d901      	bls.n	8004464 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8004460:	2303      	movs	r3, #3
 8004462:	e266      	b.n	8004932 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004464:	4b55      	ldr	r3, [pc, #340]	@ (80045bc <HAL_RCC_OscConfig+0x4dc>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800446c:	2b00      	cmp	r3, #0
 800446e:	d1f0      	bne.n	8004452 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f003 0308 	and.w	r3, r3, #8
 8004478:	2b00      	cmp	r3, #0
 800447a:	d036      	beq.n	80044ea <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	695b      	ldr	r3, [r3, #20]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d019      	beq.n	80044b8 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004484:	4b4d      	ldr	r3, [pc, #308]	@ (80045bc <HAL_RCC_OscConfig+0x4dc>)
 8004486:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004488:	4a4c      	ldr	r2, [pc, #304]	@ (80045bc <HAL_RCC_OscConfig+0x4dc>)
 800448a:	f043 0301 	orr.w	r3, r3, #1
 800448e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004490:	f7fd f948 	bl	8001724 <HAL_GetTick>
 8004494:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004496:	e008      	b.n	80044aa <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004498:	f7fd f944 	bl	8001724 <HAL_GetTick>
 800449c:	4602      	mov	r2, r0
 800449e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044a0:	1ad3      	subs	r3, r2, r3
 80044a2:	2b02      	cmp	r3, #2
 80044a4:	d901      	bls.n	80044aa <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80044a6:	2303      	movs	r3, #3
 80044a8:	e243      	b.n	8004932 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80044aa:	4b44      	ldr	r3, [pc, #272]	@ (80045bc <HAL_RCC_OscConfig+0x4dc>)
 80044ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044ae:	f003 0302 	and.w	r3, r3, #2
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d0f0      	beq.n	8004498 <HAL_RCC_OscConfig+0x3b8>
 80044b6:	e018      	b.n	80044ea <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044b8:	4b40      	ldr	r3, [pc, #256]	@ (80045bc <HAL_RCC_OscConfig+0x4dc>)
 80044ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044bc:	4a3f      	ldr	r2, [pc, #252]	@ (80045bc <HAL_RCC_OscConfig+0x4dc>)
 80044be:	f023 0301 	bic.w	r3, r3, #1
 80044c2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044c4:	f7fd f92e 	bl	8001724 <HAL_GetTick>
 80044c8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80044ca:	e008      	b.n	80044de <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044cc:	f7fd f92a 	bl	8001724 <HAL_GetTick>
 80044d0:	4602      	mov	r2, r0
 80044d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044d4:	1ad3      	subs	r3, r2, r3
 80044d6:	2b02      	cmp	r3, #2
 80044d8:	d901      	bls.n	80044de <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80044da:	2303      	movs	r3, #3
 80044dc:	e229      	b.n	8004932 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80044de:	4b37      	ldr	r3, [pc, #220]	@ (80045bc <HAL_RCC_OscConfig+0x4dc>)
 80044e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044e2:	f003 0302 	and.w	r3, r3, #2
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d1f0      	bne.n	80044cc <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f003 0320 	and.w	r3, r3, #32
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d036      	beq.n	8004564 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	699b      	ldr	r3, [r3, #24]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d019      	beq.n	8004532 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80044fe:	4b2f      	ldr	r3, [pc, #188]	@ (80045bc <HAL_RCC_OscConfig+0x4dc>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a2e      	ldr	r2, [pc, #184]	@ (80045bc <HAL_RCC_OscConfig+0x4dc>)
 8004504:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004508:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800450a:	f7fd f90b 	bl	8001724 <HAL_GetTick>
 800450e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004510:	e008      	b.n	8004524 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004512:	f7fd f907 	bl	8001724 <HAL_GetTick>
 8004516:	4602      	mov	r2, r0
 8004518:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800451a:	1ad3      	subs	r3, r2, r3
 800451c:	2b02      	cmp	r3, #2
 800451e:	d901      	bls.n	8004524 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8004520:	2303      	movs	r3, #3
 8004522:	e206      	b.n	8004932 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004524:	4b25      	ldr	r3, [pc, #148]	@ (80045bc <HAL_RCC_OscConfig+0x4dc>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800452c:	2b00      	cmp	r3, #0
 800452e:	d0f0      	beq.n	8004512 <HAL_RCC_OscConfig+0x432>
 8004530:	e018      	b.n	8004564 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004532:	4b22      	ldr	r3, [pc, #136]	@ (80045bc <HAL_RCC_OscConfig+0x4dc>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a21      	ldr	r2, [pc, #132]	@ (80045bc <HAL_RCC_OscConfig+0x4dc>)
 8004538:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800453c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800453e:	f7fd f8f1 	bl	8001724 <HAL_GetTick>
 8004542:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004544:	e008      	b.n	8004558 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004546:	f7fd f8ed 	bl	8001724 <HAL_GetTick>
 800454a:	4602      	mov	r2, r0
 800454c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800454e:	1ad3      	subs	r3, r2, r3
 8004550:	2b02      	cmp	r3, #2
 8004552:	d901      	bls.n	8004558 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8004554:	2303      	movs	r3, #3
 8004556:	e1ec      	b.n	8004932 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004558:	4b18      	ldr	r3, [pc, #96]	@ (80045bc <HAL_RCC_OscConfig+0x4dc>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004560:	2b00      	cmp	r3, #0
 8004562:	d1f0      	bne.n	8004546 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f003 0304 	and.w	r3, r3, #4
 800456c:	2b00      	cmp	r3, #0
 800456e:	f000 80af 	beq.w	80046d0 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004572:	4b13      	ldr	r3, [pc, #76]	@ (80045c0 <HAL_RCC_OscConfig+0x4e0>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a12      	ldr	r2, [pc, #72]	@ (80045c0 <HAL_RCC_OscConfig+0x4e0>)
 8004578:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800457c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800457e:	f7fd f8d1 	bl	8001724 <HAL_GetTick>
 8004582:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004584:	e008      	b.n	8004598 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004586:	f7fd f8cd 	bl	8001724 <HAL_GetTick>
 800458a:	4602      	mov	r2, r0
 800458c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800458e:	1ad3      	subs	r3, r2, r3
 8004590:	2b64      	cmp	r3, #100	@ 0x64
 8004592:	d901      	bls.n	8004598 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8004594:	2303      	movs	r3, #3
 8004596:	e1cc      	b.n	8004932 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004598:	4b09      	ldr	r3, [pc, #36]	@ (80045c0 <HAL_RCC_OscConfig+0x4e0>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d0f0      	beq.n	8004586 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	2b01      	cmp	r3, #1
 80045aa:	d10b      	bne.n	80045c4 <HAL_RCC_OscConfig+0x4e4>
 80045ac:	4b03      	ldr	r3, [pc, #12]	@ (80045bc <HAL_RCC_OscConfig+0x4dc>)
 80045ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045b0:	4a02      	ldr	r2, [pc, #8]	@ (80045bc <HAL_RCC_OscConfig+0x4dc>)
 80045b2:	f043 0301 	orr.w	r3, r3, #1
 80045b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80045b8:	e05b      	b.n	8004672 <HAL_RCC_OscConfig+0x592>
 80045ba:	bf00      	nop
 80045bc:	58024400 	.word	0x58024400
 80045c0:	58024800 	.word	0x58024800
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	689b      	ldr	r3, [r3, #8]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d112      	bne.n	80045f2 <HAL_RCC_OscConfig+0x512>
 80045cc:	4b9d      	ldr	r3, [pc, #628]	@ (8004844 <HAL_RCC_OscConfig+0x764>)
 80045ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045d0:	4a9c      	ldr	r2, [pc, #624]	@ (8004844 <HAL_RCC_OscConfig+0x764>)
 80045d2:	f023 0301 	bic.w	r3, r3, #1
 80045d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80045d8:	4b9a      	ldr	r3, [pc, #616]	@ (8004844 <HAL_RCC_OscConfig+0x764>)
 80045da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045dc:	4a99      	ldr	r2, [pc, #612]	@ (8004844 <HAL_RCC_OscConfig+0x764>)
 80045de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80045e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80045e4:	4b97      	ldr	r3, [pc, #604]	@ (8004844 <HAL_RCC_OscConfig+0x764>)
 80045e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045e8:	4a96      	ldr	r2, [pc, #600]	@ (8004844 <HAL_RCC_OscConfig+0x764>)
 80045ea:	f023 0304 	bic.w	r3, r3, #4
 80045ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80045f0:	e03f      	b.n	8004672 <HAL_RCC_OscConfig+0x592>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	689b      	ldr	r3, [r3, #8]
 80045f6:	2b05      	cmp	r3, #5
 80045f8:	d112      	bne.n	8004620 <HAL_RCC_OscConfig+0x540>
 80045fa:	4b92      	ldr	r3, [pc, #584]	@ (8004844 <HAL_RCC_OscConfig+0x764>)
 80045fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045fe:	4a91      	ldr	r2, [pc, #580]	@ (8004844 <HAL_RCC_OscConfig+0x764>)
 8004600:	f043 0304 	orr.w	r3, r3, #4
 8004604:	6713      	str	r3, [r2, #112]	@ 0x70
 8004606:	4b8f      	ldr	r3, [pc, #572]	@ (8004844 <HAL_RCC_OscConfig+0x764>)
 8004608:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800460a:	4a8e      	ldr	r2, [pc, #568]	@ (8004844 <HAL_RCC_OscConfig+0x764>)
 800460c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004610:	6713      	str	r3, [r2, #112]	@ 0x70
 8004612:	4b8c      	ldr	r3, [pc, #560]	@ (8004844 <HAL_RCC_OscConfig+0x764>)
 8004614:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004616:	4a8b      	ldr	r2, [pc, #556]	@ (8004844 <HAL_RCC_OscConfig+0x764>)
 8004618:	f043 0301 	orr.w	r3, r3, #1
 800461c:	6713      	str	r3, [r2, #112]	@ 0x70
 800461e:	e028      	b.n	8004672 <HAL_RCC_OscConfig+0x592>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	689b      	ldr	r3, [r3, #8]
 8004624:	2b85      	cmp	r3, #133	@ 0x85
 8004626:	d112      	bne.n	800464e <HAL_RCC_OscConfig+0x56e>
 8004628:	4b86      	ldr	r3, [pc, #536]	@ (8004844 <HAL_RCC_OscConfig+0x764>)
 800462a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800462c:	4a85      	ldr	r2, [pc, #532]	@ (8004844 <HAL_RCC_OscConfig+0x764>)
 800462e:	f043 0304 	orr.w	r3, r3, #4
 8004632:	6713      	str	r3, [r2, #112]	@ 0x70
 8004634:	4b83      	ldr	r3, [pc, #524]	@ (8004844 <HAL_RCC_OscConfig+0x764>)
 8004636:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004638:	4a82      	ldr	r2, [pc, #520]	@ (8004844 <HAL_RCC_OscConfig+0x764>)
 800463a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800463e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004640:	4b80      	ldr	r3, [pc, #512]	@ (8004844 <HAL_RCC_OscConfig+0x764>)
 8004642:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004644:	4a7f      	ldr	r2, [pc, #508]	@ (8004844 <HAL_RCC_OscConfig+0x764>)
 8004646:	f043 0301 	orr.w	r3, r3, #1
 800464a:	6713      	str	r3, [r2, #112]	@ 0x70
 800464c:	e011      	b.n	8004672 <HAL_RCC_OscConfig+0x592>
 800464e:	4b7d      	ldr	r3, [pc, #500]	@ (8004844 <HAL_RCC_OscConfig+0x764>)
 8004650:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004652:	4a7c      	ldr	r2, [pc, #496]	@ (8004844 <HAL_RCC_OscConfig+0x764>)
 8004654:	f023 0301 	bic.w	r3, r3, #1
 8004658:	6713      	str	r3, [r2, #112]	@ 0x70
 800465a:	4b7a      	ldr	r3, [pc, #488]	@ (8004844 <HAL_RCC_OscConfig+0x764>)
 800465c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800465e:	4a79      	ldr	r2, [pc, #484]	@ (8004844 <HAL_RCC_OscConfig+0x764>)
 8004660:	f023 0304 	bic.w	r3, r3, #4
 8004664:	6713      	str	r3, [r2, #112]	@ 0x70
 8004666:	4b77      	ldr	r3, [pc, #476]	@ (8004844 <HAL_RCC_OscConfig+0x764>)
 8004668:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800466a:	4a76      	ldr	r2, [pc, #472]	@ (8004844 <HAL_RCC_OscConfig+0x764>)
 800466c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004670:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d015      	beq.n	80046a6 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800467a:	f7fd f853 	bl	8001724 <HAL_GetTick>
 800467e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004680:	e00a      	b.n	8004698 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004682:	f7fd f84f 	bl	8001724 <HAL_GetTick>
 8004686:	4602      	mov	r2, r0
 8004688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800468a:	1ad3      	subs	r3, r2, r3
 800468c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004690:	4293      	cmp	r3, r2
 8004692:	d901      	bls.n	8004698 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8004694:	2303      	movs	r3, #3
 8004696:	e14c      	b.n	8004932 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004698:	4b6a      	ldr	r3, [pc, #424]	@ (8004844 <HAL_RCC_OscConfig+0x764>)
 800469a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800469c:	f003 0302 	and.w	r3, r3, #2
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d0ee      	beq.n	8004682 <HAL_RCC_OscConfig+0x5a2>
 80046a4:	e014      	b.n	80046d0 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046a6:	f7fd f83d 	bl	8001724 <HAL_GetTick>
 80046aa:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80046ac:	e00a      	b.n	80046c4 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046ae:	f7fd f839 	bl	8001724 <HAL_GetTick>
 80046b2:	4602      	mov	r2, r0
 80046b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046b6:	1ad3      	subs	r3, r2, r3
 80046b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046bc:	4293      	cmp	r3, r2
 80046be:	d901      	bls.n	80046c4 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 80046c0:	2303      	movs	r3, #3
 80046c2:	e136      	b.n	8004932 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80046c4:	4b5f      	ldr	r3, [pc, #380]	@ (8004844 <HAL_RCC_OscConfig+0x764>)
 80046c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046c8:	f003 0302 	and.w	r3, r3, #2
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d1ee      	bne.n	80046ae <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	f000 812b 	beq.w	8004930 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80046da:	4b5a      	ldr	r3, [pc, #360]	@ (8004844 <HAL_RCC_OscConfig+0x764>)
 80046dc:	691b      	ldr	r3, [r3, #16]
 80046de:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80046e2:	2b18      	cmp	r3, #24
 80046e4:	f000 80bb 	beq.w	800485e <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046ec:	2b02      	cmp	r3, #2
 80046ee:	f040 8095 	bne.w	800481c <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046f2:	4b54      	ldr	r3, [pc, #336]	@ (8004844 <HAL_RCC_OscConfig+0x764>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a53      	ldr	r2, [pc, #332]	@ (8004844 <HAL_RCC_OscConfig+0x764>)
 80046f8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80046fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046fe:	f7fd f811 	bl	8001724 <HAL_GetTick>
 8004702:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004704:	e008      	b.n	8004718 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004706:	f7fd f80d 	bl	8001724 <HAL_GetTick>
 800470a:	4602      	mov	r2, r0
 800470c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800470e:	1ad3      	subs	r3, r2, r3
 8004710:	2b02      	cmp	r3, #2
 8004712:	d901      	bls.n	8004718 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8004714:	2303      	movs	r3, #3
 8004716:	e10c      	b.n	8004932 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004718:	4b4a      	ldr	r3, [pc, #296]	@ (8004844 <HAL_RCC_OscConfig+0x764>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004720:	2b00      	cmp	r3, #0
 8004722:	d1f0      	bne.n	8004706 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004724:	4b47      	ldr	r3, [pc, #284]	@ (8004844 <HAL_RCC_OscConfig+0x764>)
 8004726:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004728:	4b47      	ldr	r3, [pc, #284]	@ (8004848 <HAL_RCC_OscConfig+0x768>)
 800472a:	4013      	ands	r3, r2
 800472c:	687a      	ldr	r2, [r7, #4]
 800472e:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8004730:	687a      	ldr	r2, [r7, #4]
 8004732:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004734:	0112      	lsls	r2, r2, #4
 8004736:	430a      	orrs	r2, r1
 8004738:	4942      	ldr	r1, [pc, #264]	@ (8004844 <HAL_RCC_OscConfig+0x764>)
 800473a:	4313      	orrs	r3, r2
 800473c:	628b      	str	r3, [r1, #40]	@ 0x28
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004742:	3b01      	subs	r3, #1
 8004744:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800474c:	3b01      	subs	r3, #1
 800474e:	025b      	lsls	r3, r3, #9
 8004750:	b29b      	uxth	r3, r3
 8004752:	431a      	orrs	r2, r3
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004758:	3b01      	subs	r3, #1
 800475a:	041b      	lsls	r3, r3, #16
 800475c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004760:	431a      	orrs	r2, r3
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004766:	3b01      	subs	r3, #1
 8004768:	061b      	lsls	r3, r3, #24
 800476a:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800476e:	4935      	ldr	r1, [pc, #212]	@ (8004844 <HAL_RCC_OscConfig+0x764>)
 8004770:	4313      	orrs	r3, r2
 8004772:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004774:	4b33      	ldr	r3, [pc, #204]	@ (8004844 <HAL_RCC_OscConfig+0x764>)
 8004776:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004778:	4a32      	ldr	r2, [pc, #200]	@ (8004844 <HAL_RCC_OscConfig+0x764>)
 800477a:	f023 0301 	bic.w	r3, r3, #1
 800477e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004780:	4b30      	ldr	r3, [pc, #192]	@ (8004844 <HAL_RCC_OscConfig+0x764>)
 8004782:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004784:	4b31      	ldr	r3, [pc, #196]	@ (800484c <HAL_RCC_OscConfig+0x76c>)
 8004786:	4013      	ands	r3, r2
 8004788:	687a      	ldr	r2, [r7, #4]
 800478a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800478c:	00d2      	lsls	r2, r2, #3
 800478e:	492d      	ldr	r1, [pc, #180]	@ (8004844 <HAL_RCC_OscConfig+0x764>)
 8004790:	4313      	orrs	r3, r2
 8004792:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004794:	4b2b      	ldr	r3, [pc, #172]	@ (8004844 <HAL_RCC_OscConfig+0x764>)
 8004796:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004798:	f023 020c 	bic.w	r2, r3, #12
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047a0:	4928      	ldr	r1, [pc, #160]	@ (8004844 <HAL_RCC_OscConfig+0x764>)
 80047a2:	4313      	orrs	r3, r2
 80047a4:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80047a6:	4b27      	ldr	r3, [pc, #156]	@ (8004844 <HAL_RCC_OscConfig+0x764>)
 80047a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047aa:	f023 0202 	bic.w	r2, r3, #2
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047b2:	4924      	ldr	r1, [pc, #144]	@ (8004844 <HAL_RCC_OscConfig+0x764>)
 80047b4:	4313      	orrs	r3, r2
 80047b6:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80047b8:	4b22      	ldr	r3, [pc, #136]	@ (8004844 <HAL_RCC_OscConfig+0x764>)
 80047ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047bc:	4a21      	ldr	r2, [pc, #132]	@ (8004844 <HAL_RCC_OscConfig+0x764>)
 80047be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80047c2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047c4:	4b1f      	ldr	r3, [pc, #124]	@ (8004844 <HAL_RCC_OscConfig+0x764>)
 80047c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047c8:	4a1e      	ldr	r2, [pc, #120]	@ (8004844 <HAL_RCC_OscConfig+0x764>)
 80047ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80047ce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80047d0:	4b1c      	ldr	r3, [pc, #112]	@ (8004844 <HAL_RCC_OscConfig+0x764>)
 80047d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047d4:	4a1b      	ldr	r2, [pc, #108]	@ (8004844 <HAL_RCC_OscConfig+0x764>)
 80047d6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80047da:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80047dc:	4b19      	ldr	r3, [pc, #100]	@ (8004844 <HAL_RCC_OscConfig+0x764>)
 80047de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047e0:	4a18      	ldr	r2, [pc, #96]	@ (8004844 <HAL_RCC_OscConfig+0x764>)
 80047e2:	f043 0301 	orr.w	r3, r3, #1
 80047e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80047e8:	4b16      	ldr	r3, [pc, #88]	@ (8004844 <HAL_RCC_OscConfig+0x764>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a15      	ldr	r2, [pc, #84]	@ (8004844 <HAL_RCC_OscConfig+0x764>)
 80047ee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80047f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047f4:	f7fc ff96 	bl	8001724 <HAL_GetTick>
 80047f8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80047fa:	e008      	b.n	800480e <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047fc:	f7fc ff92 	bl	8001724 <HAL_GetTick>
 8004800:	4602      	mov	r2, r0
 8004802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004804:	1ad3      	subs	r3, r2, r3
 8004806:	2b02      	cmp	r3, #2
 8004808:	d901      	bls.n	800480e <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 800480a:	2303      	movs	r3, #3
 800480c:	e091      	b.n	8004932 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800480e:	4b0d      	ldr	r3, [pc, #52]	@ (8004844 <HAL_RCC_OscConfig+0x764>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004816:	2b00      	cmp	r3, #0
 8004818:	d0f0      	beq.n	80047fc <HAL_RCC_OscConfig+0x71c>
 800481a:	e089      	b.n	8004930 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800481c:	4b09      	ldr	r3, [pc, #36]	@ (8004844 <HAL_RCC_OscConfig+0x764>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a08      	ldr	r2, [pc, #32]	@ (8004844 <HAL_RCC_OscConfig+0x764>)
 8004822:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004826:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004828:	f7fc ff7c 	bl	8001724 <HAL_GetTick>
 800482c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800482e:	e00f      	b.n	8004850 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004830:	f7fc ff78 	bl	8001724 <HAL_GetTick>
 8004834:	4602      	mov	r2, r0
 8004836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004838:	1ad3      	subs	r3, r2, r3
 800483a:	2b02      	cmp	r3, #2
 800483c:	d908      	bls.n	8004850 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 800483e:	2303      	movs	r3, #3
 8004840:	e077      	b.n	8004932 <HAL_RCC_OscConfig+0x852>
 8004842:	bf00      	nop
 8004844:	58024400 	.word	0x58024400
 8004848:	fffffc0c 	.word	0xfffffc0c
 800484c:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004850:	4b3a      	ldr	r3, [pc, #232]	@ (800493c <HAL_RCC_OscConfig+0x85c>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004858:	2b00      	cmp	r3, #0
 800485a:	d1e9      	bne.n	8004830 <HAL_RCC_OscConfig+0x750>
 800485c:	e068      	b.n	8004930 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800485e:	4b37      	ldr	r3, [pc, #220]	@ (800493c <HAL_RCC_OscConfig+0x85c>)
 8004860:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004862:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004864:	4b35      	ldr	r3, [pc, #212]	@ (800493c <HAL_RCC_OscConfig+0x85c>)
 8004866:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004868:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800486e:	2b01      	cmp	r3, #1
 8004870:	d031      	beq.n	80048d6 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004872:	693b      	ldr	r3, [r7, #16]
 8004874:	f003 0203 	and.w	r2, r3, #3
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800487c:	429a      	cmp	r2, r3
 800487e:	d12a      	bne.n	80048d6 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	091b      	lsrs	r3, r3, #4
 8004884:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800488c:	429a      	cmp	r2, r3
 800488e:	d122      	bne.n	80048d6 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800489a:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800489c:	429a      	cmp	r2, r3
 800489e:	d11a      	bne.n	80048d6 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	0a5b      	lsrs	r3, r3, #9
 80048a4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048ac:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80048ae:	429a      	cmp	r2, r3
 80048b0:	d111      	bne.n	80048d6 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	0c1b      	lsrs	r3, r3, #16
 80048b6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048be:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80048c0:	429a      	cmp	r2, r3
 80048c2:	d108      	bne.n	80048d6 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	0e1b      	lsrs	r3, r3, #24
 80048c8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048d0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80048d2:	429a      	cmp	r2, r3
 80048d4:	d001      	beq.n	80048da <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	e02b      	b.n	8004932 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80048da:	4b18      	ldr	r3, [pc, #96]	@ (800493c <HAL_RCC_OscConfig+0x85c>)
 80048dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048de:	08db      	lsrs	r3, r3, #3
 80048e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80048e4:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048ea:	693a      	ldr	r2, [r7, #16]
 80048ec:	429a      	cmp	r2, r3
 80048ee:	d01f      	beq.n	8004930 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80048f0:	4b12      	ldr	r3, [pc, #72]	@ (800493c <HAL_RCC_OscConfig+0x85c>)
 80048f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048f4:	4a11      	ldr	r2, [pc, #68]	@ (800493c <HAL_RCC_OscConfig+0x85c>)
 80048f6:	f023 0301 	bic.w	r3, r3, #1
 80048fa:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80048fc:	f7fc ff12 	bl	8001724 <HAL_GetTick>
 8004900:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004902:	bf00      	nop
 8004904:	f7fc ff0e 	bl	8001724 <HAL_GetTick>
 8004908:	4602      	mov	r2, r0
 800490a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800490c:	4293      	cmp	r3, r2
 800490e:	d0f9      	beq.n	8004904 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004910:	4b0a      	ldr	r3, [pc, #40]	@ (800493c <HAL_RCC_OscConfig+0x85c>)
 8004912:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004914:	4b0a      	ldr	r3, [pc, #40]	@ (8004940 <HAL_RCC_OscConfig+0x860>)
 8004916:	4013      	ands	r3, r2
 8004918:	687a      	ldr	r2, [r7, #4]
 800491a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800491c:	00d2      	lsls	r2, r2, #3
 800491e:	4907      	ldr	r1, [pc, #28]	@ (800493c <HAL_RCC_OscConfig+0x85c>)
 8004920:	4313      	orrs	r3, r2
 8004922:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004924:	4b05      	ldr	r3, [pc, #20]	@ (800493c <HAL_RCC_OscConfig+0x85c>)
 8004926:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004928:	4a04      	ldr	r2, [pc, #16]	@ (800493c <HAL_RCC_OscConfig+0x85c>)
 800492a:	f043 0301 	orr.w	r3, r3, #1
 800492e:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004930:	2300      	movs	r3, #0
}
 8004932:	4618      	mov	r0, r3
 8004934:	3730      	adds	r7, #48	@ 0x30
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}
 800493a:	bf00      	nop
 800493c:	58024400 	.word	0x58024400
 8004940:	ffff0007 	.word	0xffff0007

08004944 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b086      	sub	sp, #24
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
 800494c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d101      	bne.n	8004958 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004954:	2301      	movs	r3, #1
 8004956:	e19c      	b.n	8004c92 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004958:	4b8a      	ldr	r3, [pc, #552]	@ (8004b84 <HAL_RCC_ClockConfig+0x240>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f003 030f 	and.w	r3, r3, #15
 8004960:	683a      	ldr	r2, [r7, #0]
 8004962:	429a      	cmp	r2, r3
 8004964:	d910      	bls.n	8004988 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004966:	4b87      	ldr	r3, [pc, #540]	@ (8004b84 <HAL_RCC_ClockConfig+0x240>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f023 020f 	bic.w	r2, r3, #15
 800496e:	4985      	ldr	r1, [pc, #532]	@ (8004b84 <HAL_RCC_ClockConfig+0x240>)
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	4313      	orrs	r3, r2
 8004974:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004976:	4b83      	ldr	r3, [pc, #524]	@ (8004b84 <HAL_RCC_ClockConfig+0x240>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f003 030f 	and.w	r3, r3, #15
 800497e:	683a      	ldr	r2, [r7, #0]
 8004980:	429a      	cmp	r2, r3
 8004982:	d001      	beq.n	8004988 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004984:	2301      	movs	r3, #1
 8004986:	e184      	b.n	8004c92 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f003 0304 	and.w	r3, r3, #4
 8004990:	2b00      	cmp	r3, #0
 8004992:	d010      	beq.n	80049b6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	691a      	ldr	r2, [r3, #16]
 8004998:	4b7b      	ldr	r3, [pc, #492]	@ (8004b88 <HAL_RCC_ClockConfig+0x244>)
 800499a:	699b      	ldr	r3, [r3, #24]
 800499c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d908      	bls.n	80049b6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80049a4:	4b78      	ldr	r3, [pc, #480]	@ (8004b88 <HAL_RCC_ClockConfig+0x244>)
 80049a6:	699b      	ldr	r3, [r3, #24]
 80049a8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	691b      	ldr	r3, [r3, #16]
 80049b0:	4975      	ldr	r1, [pc, #468]	@ (8004b88 <HAL_RCC_ClockConfig+0x244>)
 80049b2:	4313      	orrs	r3, r2
 80049b4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f003 0308 	and.w	r3, r3, #8
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d010      	beq.n	80049e4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	695a      	ldr	r2, [r3, #20]
 80049c6:	4b70      	ldr	r3, [pc, #448]	@ (8004b88 <HAL_RCC_ClockConfig+0x244>)
 80049c8:	69db      	ldr	r3, [r3, #28]
 80049ca:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80049ce:	429a      	cmp	r2, r3
 80049d0:	d908      	bls.n	80049e4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80049d2:	4b6d      	ldr	r3, [pc, #436]	@ (8004b88 <HAL_RCC_ClockConfig+0x244>)
 80049d4:	69db      	ldr	r3, [r3, #28]
 80049d6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	695b      	ldr	r3, [r3, #20]
 80049de:	496a      	ldr	r1, [pc, #424]	@ (8004b88 <HAL_RCC_ClockConfig+0x244>)
 80049e0:	4313      	orrs	r3, r2
 80049e2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f003 0310 	and.w	r3, r3, #16
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d010      	beq.n	8004a12 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	699a      	ldr	r2, [r3, #24]
 80049f4:	4b64      	ldr	r3, [pc, #400]	@ (8004b88 <HAL_RCC_ClockConfig+0x244>)
 80049f6:	69db      	ldr	r3, [r3, #28]
 80049f8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80049fc:	429a      	cmp	r2, r3
 80049fe:	d908      	bls.n	8004a12 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004a00:	4b61      	ldr	r3, [pc, #388]	@ (8004b88 <HAL_RCC_ClockConfig+0x244>)
 8004a02:	69db      	ldr	r3, [r3, #28]
 8004a04:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	699b      	ldr	r3, [r3, #24]
 8004a0c:	495e      	ldr	r1, [pc, #376]	@ (8004b88 <HAL_RCC_ClockConfig+0x244>)
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f003 0320 	and.w	r3, r3, #32
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d010      	beq.n	8004a40 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	69da      	ldr	r2, [r3, #28]
 8004a22:	4b59      	ldr	r3, [pc, #356]	@ (8004b88 <HAL_RCC_ClockConfig+0x244>)
 8004a24:	6a1b      	ldr	r3, [r3, #32]
 8004a26:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004a2a:	429a      	cmp	r2, r3
 8004a2c:	d908      	bls.n	8004a40 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004a2e:	4b56      	ldr	r3, [pc, #344]	@ (8004b88 <HAL_RCC_ClockConfig+0x244>)
 8004a30:	6a1b      	ldr	r3, [r3, #32]
 8004a32:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	69db      	ldr	r3, [r3, #28]
 8004a3a:	4953      	ldr	r1, [pc, #332]	@ (8004b88 <HAL_RCC_ClockConfig+0x244>)
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f003 0302 	and.w	r3, r3, #2
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d010      	beq.n	8004a6e <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	68da      	ldr	r2, [r3, #12]
 8004a50:	4b4d      	ldr	r3, [pc, #308]	@ (8004b88 <HAL_RCC_ClockConfig+0x244>)
 8004a52:	699b      	ldr	r3, [r3, #24]
 8004a54:	f003 030f 	and.w	r3, r3, #15
 8004a58:	429a      	cmp	r2, r3
 8004a5a:	d908      	bls.n	8004a6e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a5c:	4b4a      	ldr	r3, [pc, #296]	@ (8004b88 <HAL_RCC_ClockConfig+0x244>)
 8004a5e:	699b      	ldr	r3, [r3, #24]
 8004a60:	f023 020f 	bic.w	r2, r3, #15
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	68db      	ldr	r3, [r3, #12]
 8004a68:	4947      	ldr	r1, [pc, #284]	@ (8004b88 <HAL_RCC_ClockConfig+0x244>)
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f003 0301 	and.w	r3, r3, #1
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d055      	beq.n	8004b26 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004a7a:	4b43      	ldr	r3, [pc, #268]	@ (8004b88 <HAL_RCC_ClockConfig+0x244>)
 8004a7c:	699b      	ldr	r3, [r3, #24]
 8004a7e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	689b      	ldr	r3, [r3, #8]
 8004a86:	4940      	ldr	r1, [pc, #256]	@ (8004b88 <HAL_RCC_ClockConfig+0x244>)
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	2b02      	cmp	r3, #2
 8004a92:	d107      	bne.n	8004aa4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004a94:	4b3c      	ldr	r3, [pc, #240]	@ (8004b88 <HAL_RCC_ClockConfig+0x244>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d121      	bne.n	8004ae4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	e0f6      	b.n	8004c92 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	2b03      	cmp	r3, #3
 8004aaa:	d107      	bne.n	8004abc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004aac:	4b36      	ldr	r3, [pc, #216]	@ (8004b88 <HAL_RCC_ClockConfig+0x244>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d115      	bne.n	8004ae4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004ab8:	2301      	movs	r3, #1
 8004aba:	e0ea      	b.n	8004c92 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	2b01      	cmp	r3, #1
 8004ac2:	d107      	bne.n	8004ad4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004ac4:	4b30      	ldr	r3, [pc, #192]	@ (8004b88 <HAL_RCC_ClockConfig+0x244>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d109      	bne.n	8004ae4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	e0de      	b.n	8004c92 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004ad4:	4b2c      	ldr	r3, [pc, #176]	@ (8004b88 <HAL_RCC_ClockConfig+0x244>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f003 0304 	and.w	r3, r3, #4
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d101      	bne.n	8004ae4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	e0d6      	b.n	8004c92 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004ae4:	4b28      	ldr	r3, [pc, #160]	@ (8004b88 <HAL_RCC_ClockConfig+0x244>)
 8004ae6:	691b      	ldr	r3, [r3, #16]
 8004ae8:	f023 0207 	bic.w	r2, r3, #7
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	4925      	ldr	r1, [pc, #148]	@ (8004b88 <HAL_RCC_ClockConfig+0x244>)
 8004af2:	4313      	orrs	r3, r2
 8004af4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004af6:	f7fc fe15 	bl	8001724 <HAL_GetTick>
 8004afa:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004afc:	e00a      	b.n	8004b14 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004afe:	f7fc fe11 	bl	8001724 <HAL_GetTick>
 8004b02:	4602      	mov	r2, r0
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	1ad3      	subs	r3, r2, r3
 8004b08:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d901      	bls.n	8004b14 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004b10:	2303      	movs	r3, #3
 8004b12:	e0be      	b.n	8004c92 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b14:	4b1c      	ldr	r3, [pc, #112]	@ (8004b88 <HAL_RCC_ClockConfig+0x244>)
 8004b16:	691b      	ldr	r3, [r3, #16]
 8004b18:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	00db      	lsls	r3, r3, #3
 8004b22:	429a      	cmp	r2, r3
 8004b24:	d1eb      	bne.n	8004afe <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f003 0302 	and.w	r3, r3, #2
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d010      	beq.n	8004b54 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	68da      	ldr	r2, [r3, #12]
 8004b36:	4b14      	ldr	r3, [pc, #80]	@ (8004b88 <HAL_RCC_ClockConfig+0x244>)
 8004b38:	699b      	ldr	r3, [r3, #24]
 8004b3a:	f003 030f 	and.w	r3, r3, #15
 8004b3e:	429a      	cmp	r2, r3
 8004b40:	d208      	bcs.n	8004b54 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b42:	4b11      	ldr	r3, [pc, #68]	@ (8004b88 <HAL_RCC_ClockConfig+0x244>)
 8004b44:	699b      	ldr	r3, [r3, #24]
 8004b46:	f023 020f 	bic.w	r2, r3, #15
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	68db      	ldr	r3, [r3, #12]
 8004b4e:	490e      	ldr	r1, [pc, #56]	@ (8004b88 <HAL_RCC_ClockConfig+0x244>)
 8004b50:	4313      	orrs	r3, r2
 8004b52:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004b54:	4b0b      	ldr	r3, [pc, #44]	@ (8004b84 <HAL_RCC_ClockConfig+0x240>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f003 030f 	and.w	r3, r3, #15
 8004b5c:	683a      	ldr	r2, [r7, #0]
 8004b5e:	429a      	cmp	r2, r3
 8004b60:	d214      	bcs.n	8004b8c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b62:	4b08      	ldr	r3, [pc, #32]	@ (8004b84 <HAL_RCC_ClockConfig+0x240>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f023 020f 	bic.w	r2, r3, #15
 8004b6a:	4906      	ldr	r1, [pc, #24]	@ (8004b84 <HAL_RCC_ClockConfig+0x240>)
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b72:	4b04      	ldr	r3, [pc, #16]	@ (8004b84 <HAL_RCC_ClockConfig+0x240>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f003 030f 	and.w	r3, r3, #15
 8004b7a:	683a      	ldr	r2, [r7, #0]
 8004b7c:	429a      	cmp	r2, r3
 8004b7e:	d005      	beq.n	8004b8c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004b80:	2301      	movs	r3, #1
 8004b82:	e086      	b.n	8004c92 <HAL_RCC_ClockConfig+0x34e>
 8004b84:	52002000 	.word	0x52002000
 8004b88:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f003 0304 	and.w	r3, r3, #4
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d010      	beq.n	8004bba <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	691a      	ldr	r2, [r3, #16]
 8004b9c:	4b3f      	ldr	r3, [pc, #252]	@ (8004c9c <HAL_RCC_ClockConfig+0x358>)
 8004b9e:	699b      	ldr	r3, [r3, #24]
 8004ba0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004ba4:	429a      	cmp	r2, r3
 8004ba6:	d208      	bcs.n	8004bba <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004ba8:	4b3c      	ldr	r3, [pc, #240]	@ (8004c9c <HAL_RCC_ClockConfig+0x358>)
 8004baa:	699b      	ldr	r3, [r3, #24]
 8004bac:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	691b      	ldr	r3, [r3, #16]
 8004bb4:	4939      	ldr	r1, [pc, #228]	@ (8004c9c <HAL_RCC_ClockConfig+0x358>)
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f003 0308 	and.w	r3, r3, #8
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d010      	beq.n	8004be8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	695a      	ldr	r2, [r3, #20]
 8004bca:	4b34      	ldr	r3, [pc, #208]	@ (8004c9c <HAL_RCC_ClockConfig+0x358>)
 8004bcc:	69db      	ldr	r3, [r3, #28]
 8004bce:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004bd2:	429a      	cmp	r2, r3
 8004bd4:	d208      	bcs.n	8004be8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004bd6:	4b31      	ldr	r3, [pc, #196]	@ (8004c9c <HAL_RCC_ClockConfig+0x358>)
 8004bd8:	69db      	ldr	r3, [r3, #28]
 8004bda:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	695b      	ldr	r3, [r3, #20]
 8004be2:	492e      	ldr	r1, [pc, #184]	@ (8004c9c <HAL_RCC_ClockConfig+0x358>)
 8004be4:	4313      	orrs	r3, r2
 8004be6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f003 0310 	and.w	r3, r3, #16
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d010      	beq.n	8004c16 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	699a      	ldr	r2, [r3, #24]
 8004bf8:	4b28      	ldr	r3, [pc, #160]	@ (8004c9c <HAL_RCC_ClockConfig+0x358>)
 8004bfa:	69db      	ldr	r3, [r3, #28]
 8004bfc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004c00:	429a      	cmp	r2, r3
 8004c02:	d208      	bcs.n	8004c16 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004c04:	4b25      	ldr	r3, [pc, #148]	@ (8004c9c <HAL_RCC_ClockConfig+0x358>)
 8004c06:	69db      	ldr	r3, [r3, #28]
 8004c08:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	699b      	ldr	r3, [r3, #24]
 8004c10:	4922      	ldr	r1, [pc, #136]	@ (8004c9c <HAL_RCC_ClockConfig+0x358>)
 8004c12:	4313      	orrs	r3, r2
 8004c14:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f003 0320 	and.w	r3, r3, #32
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d010      	beq.n	8004c44 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	69da      	ldr	r2, [r3, #28]
 8004c26:	4b1d      	ldr	r3, [pc, #116]	@ (8004c9c <HAL_RCC_ClockConfig+0x358>)
 8004c28:	6a1b      	ldr	r3, [r3, #32]
 8004c2a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004c2e:	429a      	cmp	r2, r3
 8004c30:	d208      	bcs.n	8004c44 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004c32:	4b1a      	ldr	r3, [pc, #104]	@ (8004c9c <HAL_RCC_ClockConfig+0x358>)
 8004c34:	6a1b      	ldr	r3, [r3, #32]
 8004c36:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	69db      	ldr	r3, [r3, #28]
 8004c3e:	4917      	ldr	r1, [pc, #92]	@ (8004c9c <HAL_RCC_ClockConfig+0x358>)
 8004c40:	4313      	orrs	r3, r2
 8004c42:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8004c44:	f000 f834 	bl	8004cb0 <HAL_RCC_GetSysClockFreq>
 8004c48:	4602      	mov	r2, r0
 8004c4a:	4b14      	ldr	r3, [pc, #80]	@ (8004c9c <HAL_RCC_ClockConfig+0x358>)
 8004c4c:	699b      	ldr	r3, [r3, #24]
 8004c4e:	0a1b      	lsrs	r3, r3, #8
 8004c50:	f003 030f 	and.w	r3, r3, #15
 8004c54:	4912      	ldr	r1, [pc, #72]	@ (8004ca0 <HAL_RCC_ClockConfig+0x35c>)
 8004c56:	5ccb      	ldrb	r3, [r1, r3]
 8004c58:	f003 031f 	and.w	r3, r3, #31
 8004c5c:	fa22 f303 	lsr.w	r3, r2, r3
 8004c60:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8004c62:	4b0e      	ldr	r3, [pc, #56]	@ (8004c9c <HAL_RCC_ClockConfig+0x358>)
 8004c64:	699b      	ldr	r3, [r3, #24]
 8004c66:	f003 030f 	and.w	r3, r3, #15
 8004c6a:	4a0d      	ldr	r2, [pc, #52]	@ (8004ca0 <HAL_RCC_ClockConfig+0x35c>)
 8004c6c:	5cd3      	ldrb	r3, [r2, r3]
 8004c6e:	f003 031f 	and.w	r3, r3, #31
 8004c72:	693a      	ldr	r2, [r7, #16]
 8004c74:	fa22 f303 	lsr.w	r3, r2, r3
 8004c78:	4a0a      	ldr	r2, [pc, #40]	@ (8004ca4 <HAL_RCC_ClockConfig+0x360>)
 8004c7a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004c7c:	4a0a      	ldr	r2, [pc, #40]	@ (8004ca8 <HAL_RCC_ClockConfig+0x364>)
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004c82:	4b0a      	ldr	r3, [pc, #40]	@ (8004cac <HAL_RCC_ClockConfig+0x368>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4618      	mov	r0, r3
 8004c88:	f7fc fd02 	bl	8001690 <HAL_InitTick>
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004c90:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	3718      	adds	r7, #24
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}
 8004c9a:	bf00      	nop
 8004c9c:	58024400 	.word	0x58024400
 8004ca0:	08009f20 	.word	0x08009f20
 8004ca4:	24000004 	.word	0x24000004
 8004ca8:	24000000 	.word	0x24000000
 8004cac:	24000008 	.word	0x24000008

08004cb0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b089      	sub	sp, #36	@ 0x24
 8004cb4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004cb6:	4bb3      	ldr	r3, [pc, #716]	@ (8004f84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004cb8:	691b      	ldr	r3, [r3, #16]
 8004cba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004cbe:	2b18      	cmp	r3, #24
 8004cc0:	f200 8155 	bhi.w	8004f6e <HAL_RCC_GetSysClockFreq+0x2be>
 8004cc4:	a201      	add	r2, pc, #4	@ (adr r2, 8004ccc <HAL_RCC_GetSysClockFreq+0x1c>)
 8004cc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cca:	bf00      	nop
 8004ccc:	08004d31 	.word	0x08004d31
 8004cd0:	08004f6f 	.word	0x08004f6f
 8004cd4:	08004f6f 	.word	0x08004f6f
 8004cd8:	08004f6f 	.word	0x08004f6f
 8004cdc:	08004f6f 	.word	0x08004f6f
 8004ce0:	08004f6f 	.word	0x08004f6f
 8004ce4:	08004f6f 	.word	0x08004f6f
 8004ce8:	08004f6f 	.word	0x08004f6f
 8004cec:	08004d57 	.word	0x08004d57
 8004cf0:	08004f6f 	.word	0x08004f6f
 8004cf4:	08004f6f 	.word	0x08004f6f
 8004cf8:	08004f6f 	.word	0x08004f6f
 8004cfc:	08004f6f 	.word	0x08004f6f
 8004d00:	08004f6f 	.word	0x08004f6f
 8004d04:	08004f6f 	.word	0x08004f6f
 8004d08:	08004f6f 	.word	0x08004f6f
 8004d0c:	08004d5d 	.word	0x08004d5d
 8004d10:	08004f6f 	.word	0x08004f6f
 8004d14:	08004f6f 	.word	0x08004f6f
 8004d18:	08004f6f 	.word	0x08004f6f
 8004d1c:	08004f6f 	.word	0x08004f6f
 8004d20:	08004f6f 	.word	0x08004f6f
 8004d24:	08004f6f 	.word	0x08004f6f
 8004d28:	08004f6f 	.word	0x08004f6f
 8004d2c:	08004d63 	.word	0x08004d63
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004d30:	4b94      	ldr	r3, [pc, #592]	@ (8004f84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f003 0320 	and.w	r3, r3, #32
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d009      	beq.n	8004d50 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004d3c:	4b91      	ldr	r3, [pc, #580]	@ (8004f84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	08db      	lsrs	r3, r3, #3
 8004d42:	f003 0303 	and.w	r3, r3, #3
 8004d46:	4a90      	ldr	r2, [pc, #576]	@ (8004f88 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004d48:	fa22 f303 	lsr.w	r3, r2, r3
 8004d4c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8004d4e:	e111      	b.n	8004f74 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004d50:	4b8d      	ldr	r3, [pc, #564]	@ (8004f88 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004d52:	61bb      	str	r3, [r7, #24]
      break;
 8004d54:	e10e      	b.n	8004f74 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8004d56:	4b8d      	ldr	r3, [pc, #564]	@ (8004f8c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004d58:	61bb      	str	r3, [r7, #24]
      break;
 8004d5a:	e10b      	b.n	8004f74 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004d5c:	4b8c      	ldr	r3, [pc, #560]	@ (8004f90 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004d5e:	61bb      	str	r3, [r7, #24]
      break;
 8004d60:	e108      	b.n	8004f74 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004d62:	4b88      	ldr	r3, [pc, #544]	@ (8004f84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d66:	f003 0303 	and.w	r3, r3, #3
 8004d6a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004d6c:	4b85      	ldr	r3, [pc, #532]	@ (8004f84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d70:	091b      	lsrs	r3, r3, #4
 8004d72:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004d76:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004d78:	4b82      	ldr	r3, [pc, #520]	@ (8004f84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d7c:	f003 0301 	and.w	r3, r3, #1
 8004d80:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004d82:	4b80      	ldr	r3, [pc, #512]	@ (8004f84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d86:	08db      	lsrs	r3, r3, #3
 8004d88:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004d8c:	68fa      	ldr	r2, [r7, #12]
 8004d8e:	fb02 f303 	mul.w	r3, r2, r3
 8004d92:	ee07 3a90 	vmov	s15, r3
 8004d96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d9a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8004d9e:	693b      	ldr	r3, [r7, #16]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	f000 80e1 	beq.w	8004f68 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	2b02      	cmp	r3, #2
 8004daa:	f000 8083 	beq.w	8004eb4 <HAL_RCC_GetSysClockFreq+0x204>
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	2b02      	cmp	r3, #2
 8004db2:	f200 80a1 	bhi.w	8004ef8 <HAL_RCC_GetSysClockFreq+0x248>
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d003      	beq.n	8004dc4 <HAL_RCC_GetSysClockFreq+0x114>
 8004dbc:	697b      	ldr	r3, [r7, #20]
 8004dbe:	2b01      	cmp	r3, #1
 8004dc0:	d056      	beq.n	8004e70 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004dc2:	e099      	b.n	8004ef8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004dc4:	4b6f      	ldr	r3, [pc, #444]	@ (8004f84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f003 0320 	and.w	r3, r3, #32
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d02d      	beq.n	8004e2c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004dd0:	4b6c      	ldr	r3, [pc, #432]	@ (8004f84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	08db      	lsrs	r3, r3, #3
 8004dd6:	f003 0303 	and.w	r3, r3, #3
 8004dda:	4a6b      	ldr	r2, [pc, #428]	@ (8004f88 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004ddc:	fa22 f303 	lsr.w	r3, r2, r3
 8004de0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	ee07 3a90 	vmov	s15, r3
 8004de8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004dec:	693b      	ldr	r3, [r7, #16]
 8004dee:	ee07 3a90 	vmov	s15, r3
 8004df2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004df6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004dfa:	4b62      	ldr	r3, [pc, #392]	@ (8004f84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004dfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e02:	ee07 3a90 	vmov	s15, r3
 8004e06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e0a:	ed97 6a02 	vldr	s12, [r7, #8]
 8004e0e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8004f94 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004e12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004e1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e26:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8004e2a:	e087      	b.n	8004f3c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	ee07 3a90 	vmov	s15, r3
 8004e32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e36:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8004f98 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004e3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e3e:	4b51      	ldr	r3, [pc, #324]	@ (8004f84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e46:	ee07 3a90 	vmov	s15, r3
 8004e4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e4e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004e52:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8004f94 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004e56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e5e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004e62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e6a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004e6e:	e065      	b.n	8004f3c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004e70:	693b      	ldr	r3, [r7, #16]
 8004e72:	ee07 3a90 	vmov	s15, r3
 8004e76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e7a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8004f9c <HAL_RCC_GetSysClockFreq+0x2ec>
 8004e7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e82:	4b40      	ldr	r3, [pc, #256]	@ (8004f84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e8a:	ee07 3a90 	vmov	s15, r3
 8004e8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e92:	ed97 6a02 	vldr	s12, [r7, #8]
 8004e96:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8004f94 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004e9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ea2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004ea6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004eaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004eae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004eb2:	e043      	b.n	8004f3c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	ee07 3a90 	vmov	s15, r3
 8004eba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ebe:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8004fa0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004ec2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ec6:	4b2f      	ldr	r3, [pc, #188]	@ (8004f84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004eca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ece:	ee07 3a90 	vmov	s15, r3
 8004ed2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ed6:	ed97 6a02 	vldr	s12, [r7, #8]
 8004eda:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8004f94 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004ede:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ee2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ee6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004eea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004eee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ef2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004ef6:	e021      	b.n	8004f3c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	ee07 3a90 	vmov	s15, r3
 8004efe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f02:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004f9c <HAL_RCC_GetSysClockFreq+0x2ec>
 8004f06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f0a:	4b1e      	ldr	r3, [pc, #120]	@ (8004f84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f12:	ee07 3a90 	vmov	s15, r3
 8004f16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f1a:	ed97 6a02 	vldr	s12, [r7, #8]
 8004f1e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8004f94 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004f22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004f2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f36:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004f3a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004f3c:	4b11      	ldr	r3, [pc, #68]	@ (8004f84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f40:	0a5b      	lsrs	r3, r3, #9
 8004f42:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004f46:	3301      	adds	r3, #1
 8004f48:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	ee07 3a90 	vmov	s15, r3
 8004f50:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004f54:	edd7 6a07 	vldr	s13, [r7, #28]
 8004f58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f60:	ee17 3a90 	vmov	r3, s15
 8004f64:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8004f66:	e005      	b.n	8004f74 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004f68:	2300      	movs	r3, #0
 8004f6a:	61bb      	str	r3, [r7, #24]
      break;
 8004f6c:	e002      	b.n	8004f74 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8004f6e:	4b07      	ldr	r3, [pc, #28]	@ (8004f8c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004f70:	61bb      	str	r3, [r7, #24]
      break;
 8004f72:	bf00      	nop
  }

  return sysclockfreq;
 8004f74:	69bb      	ldr	r3, [r7, #24]
}
 8004f76:	4618      	mov	r0, r3
 8004f78:	3724      	adds	r7, #36	@ 0x24
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f80:	4770      	bx	lr
 8004f82:	bf00      	nop
 8004f84:	58024400 	.word	0x58024400
 8004f88:	03d09000 	.word	0x03d09000
 8004f8c:	003d0900 	.word	0x003d0900
 8004f90:	007a1200 	.word	0x007a1200
 8004f94:	46000000 	.word	0x46000000
 8004f98:	4c742400 	.word	0x4c742400
 8004f9c:	4a742400 	.word	0x4a742400
 8004fa0:	4af42400 	.word	0x4af42400

08004fa4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b082      	sub	sp, #8
 8004fa8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8004faa:	f7ff fe81 	bl	8004cb0 <HAL_RCC_GetSysClockFreq>
 8004fae:	4602      	mov	r2, r0
 8004fb0:	4b10      	ldr	r3, [pc, #64]	@ (8004ff4 <HAL_RCC_GetHCLKFreq+0x50>)
 8004fb2:	699b      	ldr	r3, [r3, #24]
 8004fb4:	0a1b      	lsrs	r3, r3, #8
 8004fb6:	f003 030f 	and.w	r3, r3, #15
 8004fba:	490f      	ldr	r1, [pc, #60]	@ (8004ff8 <HAL_RCC_GetHCLKFreq+0x54>)
 8004fbc:	5ccb      	ldrb	r3, [r1, r3]
 8004fbe:	f003 031f 	and.w	r3, r3, #31
 8004fc2:	fa22 f303 	lsr.w	r3, r2, r3
 8004fc6:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8004fc8:	4b0a      	ldr	r3, [pc, #40]	@ (8004ff4 <HAL_RCC_GetHCLKFreq+0x50>)
 8004fca:	699b      	ldr	r3, [r3, #24]
 8004fcc:	f003 030f 	and.w	r3, r3, #15
 8004fd0:	4a09      	ldr	r2, [pc, #36]	@ (8004ff8 <HAL_RCC_GetHCLKFreq+0x54>)
 8004fd2:	5cd3      	ldrb	r3, [r2, r3]
 8004fd4:	f003 031f 	and.w	r3, r3, #31
 8004fd8:	687a      	ldr	r2, [r7, #4]
 8004fda:	fa22 f303 	lsr.w	r3, r2, r3
 8004fde:	4a07      	ldr	r2, [pc, #28]	@ (8004ffc <HAL_RCC_GetHCLKFreq+0x58>)
 8004fe0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004fe2:	4a07      	ldr	r2, [pc, #28]	@ (8005000 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004fe8:	4b04      	ldr	r3, [pc, #16]	@ (8004ffc <HAL_RCC_GetHCLKFreq+0x58>)
 8004fea:	681b      	ldr	r3, [r3, #0]
}
 8004fec:	4618      	mov	r0, r3
 8004fee:	3708      	adds	r7, #8
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	bd80      	pop	{r7, pc}
 8004ff4:	58024400 	.word	0x58024400
 8004ff8:	08009f20 	.word	0x08009f20
 8004ffc:	24000004 	.word	0x24000004
 8005000:	24000000 	.word	0x24000000

08005004 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8005008:	f7ff ffcc 	bl	8004fa4 <HAL_RCC_GetHCLKFreq>
 800500c:	4602      	mov	r2, r0
 800500e:	4b06      	ldr	r3, [pc, #24]	@ (8005028 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005010:	69db      	ldr	r3, [r3, #28]
 8005012:	091b      	lsrs	r3, r3, #4
 8005014:	f003 0307 	and.w	r3, r3, #7
 8005018:	4904      	ldr	r1, [pc, #16]	@ (800502c <HAL_RCC_GetPCLK1Freq+0x28>)
 800501a:	5ccb      	ldrb	r3, [r1, r3]
 800501c:	f003 031f 	and.w	r3, r3, #31
 8005020:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8005024:	4618      	mov	r0, r3
 8005026:	bd80      	pop	{r7, pc}
 8005028:	58024400 	.word	0x58024400
 800502c:	08009f20 	.word	0x08009f20

08005030 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8005034:	f7ff ffb6 	bl	8004fa4 <HAL_RCC_GetHCLKFreq>
 8005038:	4602      	mov	r2, r0
 800503a:	4b06      	ldr	r3, [pc, #24]	@ (8005054 <HAL_RCC_GetPCLK2Freq+0x24>)
 800503c:	69db      	ldr	r3, [r3, #28]
 800503e:	0a1b      	lsrs	r3, r3, #8
 8005040:	f003 0307 	and.w	r3, r3, #7
 8005044:	4904      	ldr	r1, [pc, #16]	@ (8005058 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005046:	5ccb      	ldrb	r3, [r1, r3]
 8005048:	f003 031f 	and.w	r3, r3, #31
 800504c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8005050:	4618      	mov	r0, r3
 8005052:	bd80      	pop	{r7, pc}
 8005054:	58024400 	.word	0x58024400
 8005058:	08009f20 	.word	0x08009f20

0800505c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800505c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005060:	b0c8      	sub	sp, #288	@ 0x120
 8005062:	af00      	add	r7, sp, #0
 8005064:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005068:	2300      	movs	r3, #0
 800506a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800506e:	2300      	movs	r3, #0
 8005070:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005074:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800507c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8005080:	2500      	movs	r5, #0
 8005082:	ea54 0305 	orrs.w	r3, r4, r5
 8005086:	d049      	beq.n	800511c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005088:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800508c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800508e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005092:	d02f      	beq.n	80050f4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005094:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005098:	d828      	bhi.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0x90>
 800509a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800509e:	d01a      	beq.n	80050d6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80050a0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80050a4:	d822      	bhi.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0x90>
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d003      	beq.n	80050b2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80050aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80050ae:	d007      	beq.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80050b0:	e01c      	b.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80050b2:	4ba7      	ldr	r3, [pc, #668]	@ (8005350 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80050b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050b6:	4aa6      	ldr	r2, [pc, #664]	@ (8005350 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80050b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80050bc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80050be:	e01a      	b.n	80050f6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80050c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80050c4:	3308      	adds	r3, #8
 80050c6:	2102      	movs	r1, #2
 80050c8:	4618      	mov	r0, r3
 80050ca:	f001 fc43 	bl	8006954 <RCCEx_PLL2_Config>
 80050ce:	4603      	mov	r3, r0
 80050d0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80050d4:	e00f      	b.n	80050f6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80050d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80050da:	3328      	adds	r3, #40	@ 0x28
 80050dc:	2102      	movs	r1, #2
 80050de:	4618      	mov	r0, r3
 80050e0:	f001 fcea 	bl	8006ab8 <RCCEx_PLL3_Config>
 80050e4:	4603      	mov	r3, r0
 80050e6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80050ea:	e004      	b.n	80050f6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80050ec:	2301      	movs	r3, #1
 80050ee:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80050f2:	e000      	b.n	80050f6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80050f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050f6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d10a      	bne.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80050fe:	4b94      	ldr	r3, [pc, #592]	@ (8005350 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005100:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005102:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005106:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800510a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800510c:	4a90      	ldr	r2, [pc, #576]	@ (8005350 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800510e:	430b      	orrs	r3, r1
 8005110:	6513      	str	r3, [r2, #80]	@ 0x50
 8005112:	e003      	b.n	800511c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005114:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005118:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800511c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005124:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8005128:	f04f 0900 	mov.w	r9, #0
 800512c:	ea58 0309 	orrs.w	r3, r8, r9
 8005130:	d047      	beq.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005132:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005136:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005138:	2b04      	cmp	r3, #4
 800513a:	d82a      	bhi.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800513c:	a201      	add	r2, pc, #4	@ (adr r2, 8005144 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800513e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005142:	bf00      	nop
 8005144:	08005159 	.word	0x08005159
 8005148:	08005167 	.word	0x08005167
 800514c:	0800517d 	.word	0x0800517d
 8005150:	0800519b 	.word	0x0800519b
 8005154:	0800519b 	.word	0x0800519b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005158:	4b7d      	ldr	r3, [pc, #500]	@ (8005350 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800515a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800515c:	4a7c      	ldr	r2, [pc, #496]	@ (8005350 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800515e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005162:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005164:	e01a      	b.n	800519c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005166:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800516a:	3308      	adds	r3, #8
 800516c:	2100      	movs	r1, #0
 800516e:	4618      	mov	r0, r3
 8005170:	f001 fbf0 	bl	8006954 <RCCEx_PLL2_Config>
 8005174:	4603      	mov	r3, r0
 8005176:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800517a:	e00f      	b.n	800519c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800517c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005180:	3328      	adds	r3, #40	@ 0x28
 8005182:	2100      	movs	r1, #0
 8005184:	4618      	mov	r0, r3
 8005186:	f001 fc97 	bl	8006ab8 <RCCEx_PLL3_Config>
 800518a:	4603      	mov	r3, r0
 800518c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005190:	e004      	b.n	800519c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005192:	2301      	movs	r3, #1
 8005194:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005198:	e000      	b.n	800519c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800519a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800519c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d10a      	bne.n	80051ba <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80051a4:	4b6a      	ldr	r3, [pc, #424]	@ (8005350 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80051a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051a8:	f023 0107 	bic.w	r1, r3, #7
 80051ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80051b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051b2:	4a67      	ldr	r2, [pc, #412]	@ (8005350 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80051b4:	430b      	orrs	r3, r1
 80051b6:	6513      	str	r3, [r2, #80]	@ 0x50
 80051b8:	e003      	b.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051ba:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80051be:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 80051c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80051c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ca:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80051ce:	f04f 0b00 	mov.w	fp, #0
 80051d2:	ea5a 030b 	orrs.w	r3, sl, fp
 80051d6:	d054      	beq.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 80051d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80051dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051de:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80051e2:	d036      	beq.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 80051e4:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80051e8:	d82f      	bhi.n	800524a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80051ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80051ee:	d032      	beq.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80051f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80051f4:	d829      	bhi.n	800524a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80051f6:	2bc0      	cmp	r3, #192	@ 0xc0
 80051f8:	d02f      	beq.n	800525a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 80051fa:	2bc0      	cmp	r3, #192	@ 0xc0
 80051fc:	d825      	bhi.n	800524a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80051fe:	2b80      	cmp	r3, #128	@ 0x80
 8005200:	d018      	beq.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8005202:	2b80      	cmp	r3, #128	@ 0x80
 8005204:	d821      	bhi.n	800524a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005206:	2b00      	cmp	r3, #0
 8005208:	d002      	beq.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800520a:	2b40      	cmp	r3, #64	@ 0x40
 800520c:	d007      	beq.n	800521e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 800520e:	e01c      	b.n	800524a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005210:	4b4f      	ldr	r3, [pc, #316]	@ (8005350 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005212:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005214:	4a4e      	ldr	r2, [pc, #312]	@ (8005350 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005216:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800521a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800521c:	e01e      	b.n	800525c <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800521e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005222:	3308      	adds	r3, #8
 8005224:	2100      	movs	r1, #0
 8005226:	4618      	mov	r0, r3
 8005228:	f001 fb94 	bl	8006954 <RCCEx_PLL2_Config>
 800522c:	4603      	mov	r3, r0
 800522e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8005232:	e013      	b.n	800525c <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005234:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005238:	3328      	adds	r3, #40	@ 0x28
 800523a:	2100      	movs	r1, #0
 800523c:	4618      	mov	r0, r3
 800523e:	f001 fc3b 	bl	8006ab8 <RCCEx_PLL3_Config>
 8005242:	4603      	mov	r3, r0
 8005244:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8005248:	e008      	b.n	800525c <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800524a:	2301      	movs	r3, #1
 800524c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005250:	e004      	b.n	800525c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8005252:	bf00      	nop
 8005254:	e002      	b.n	800525c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8005256:	bf00      	nop
 8005258:	e000      	b.n	800525c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800525a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800525c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005260:	2b00      	cmp	r3, #0
 8005262:	d10a      	bne.n	800527a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8005264:	4b3a      	ldr	r3, [pc, #232]	@ (8005350 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005266:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005268:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800526c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005270:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005272:	4a37      	ldr	r2, [pc, #220]	@ (8005350 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005274:	430b      	orrs	r3, r1
 8005276:	6513      	str	r3, [r2, #80]	@ 0x50
 8005278:	e003      	b.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800527a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800527e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8005282:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800528a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800528e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005292:	2300      	movs	r3, #0
 8005294:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005298:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800529c:	460b      	mov	r3, r1
 800529e:	4313      	orrs	r3, r2
 80052a0:	d05c      	beq.n	800535c <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 80052a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80052a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80052a8:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80052ac:	d03b      	beq.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80052ae:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80052b2:	d834      	bhi.n	800531e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80052b4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80052b8:	d037      	beq.n	800532a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 80052ba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80052be:	d82e      	bhi.n	800531e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80052c0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80052c4:	d033      	beq.n	800532e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80052c6:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80052ca:	d828      	bhi.n	800531e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80052cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80052d0:	d01a      	beq.n	8005308 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 80052d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80052d6:	d822      	bhi.n	800531e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d003      	beq.n	80052e4 <HAL_RCCEx_PeriphCLKConfig+0x288>
 80052dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80052e0:	d007      	beq.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0x296>
 80052e2:	e01c      	b.n	800531e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052e4:	4b1a      	ldr	r3, [pc, #104]	@ (8005350 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80052e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052e8:	4a19      	ldr	r2, [pc, #100]	@ (8005350 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80052ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80052ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80052f0:	e01e      	b.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80052f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80052f6:	3308      	adds	r3, #8
 80052f8:	2100      	movs	r1, #0
 80052fa:	4618      	mov	r0, r3
 80052fc:	f001 fb2a 	bl	8006954 <RCCEx_PLL2_Config>
 8005300:	4603      	mov	r3, r0
 8005302:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8005306:	e013      	b.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005308:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800530c:	3328      	adds	r3, #40	@ 0x28
 800530e:	2100      	movs	r1, #0
 8005310:	4618      	mov	r0, r3
 8005312:	f001 fbd1 	bl	8006ab8 <RCCEx_PLL3_Config>
 8005316:	4603      	mov	r3, r0
 8005318:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800531c:	e008      	b.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800531e:	2301      	movs	r3, #1
 8005320:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005324:	e004      	b.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8005326:	bf00      	nop
 8005328:	e002      	b.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800532a:	bf00      	nop
 800532c:	e000      	b.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800532e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005330:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005334:	2b00      	cmp	r3, #0
 8005336:	d10d      	bne.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8005338:	4b05      	ldr	r3, [pc, #20]	@ (8005350 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800533a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800533c:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8005340:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005344:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005346:	4a02      	ldr	r2, [pc, #8]	@ (8005350 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005348:	430b      	orrs	r3, r1
 800534a:	6513      	str	r3, [r2, #80]	@ 0x50
 800534c:	e006      	b.n	800535c <HAL_RCCEx_PeriphCLKConfig+0x300>
 800534e:	bf00      	nop
 8005350:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005354:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005358:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800535c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005364:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005368:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800536c:	2300      	movs	r3, #0
 800536e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005372:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8005376:	460b      	mov	r3, r1
 8005378:	4313      	orrs	r3, r2
 800537a:	d03a      	beq.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800537c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005380:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005382:	2b30      	cmp	r3, #48	@ 0x30
 8005384:	d01f      	beq.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8005386:	2b30      	cmp	r3, #48	@ 0x30
 8005388:	d819      	bhi.n	80053be <HAL_RCCEx_PeriphCLKConfig+0x362>
 800538a:	2b20      	cmp	r3, #32
 800538c:	d00c      	beq.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800538e:	2b20      	cmp	r3, #32
 8005390:	d815      	bhi.n	80053be <HAL_RCCEx_PeriphCLKConfig+0x362>
 8005392:	2b00      	cmp	r3, #0
 8005394:	d019      	beq.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8005396:	2b10      	cmp	r3, #16
 8005398:	d111      	bne.n	80053be <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800539a:	4bae      	ldr	r3, [pc, #696]	@ (8005654 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800539c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800539e:	4aad      	ldr	r2, [pc, #692]	@ (8005654 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80053a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80053a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80053a6:	e011      	b.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80053a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80053ac:	3308      	adds	r3, #8
 80053ae:	2102      	movs	r1, #2
 80053b0:	4618      	mov	r0, r3
 80053b2:	f001 facf 	bl	8006954 <RCCEx_PLL2_Config>
 80053b6:	4603      	mov	r3, r0
 80053b8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80053bc:	e006      	b.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80053be:	2301      	movs	r3, #1
 80053c0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80053c4:	e002      	b.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 80053c6:	bf00      	nop
 80053c8:	e000      	b.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 80053ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053cc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d10a      	bne.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80053d4:	4b9f      	ldr	r3, [pc, #636]	@ (8005654 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80053d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80053d8:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80053dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80053e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80053e2:	4a9c      	ldr	r2, [pc, #624]	@ (8005654 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80053e4:	430b      	orrs	r3, r1
 80053e6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80053e8:	e003      	b.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053ea:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80053ee:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80053f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80053f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053fa:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80053fe:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005402:	2300      	movs	r3, #0
 8005404:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005408:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800540c:	460b      	mov	r3, r1
 800540e:	4313      	orrs	r3, r2
 8005410:	d051      	beq.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005412:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005416:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005418:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800541c:	d035      	beq.n	800548a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800541e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005422:	d82e      	bhi.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8005424:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005428:	d031      	beq.n	800548e <HAL_RCCEx_PeriphCLKConfig+0x432>
 800542a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800542e:	d828      	bhi.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8005430:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005434:	d01a      	beq.n	800546c <HAL_RCCEx_PeriphCLKConfig+0x410>
 8005436:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800543a:	d822      	bhi.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0x426>
 800543c:	2b00      	cmp	r3, #0
 800543e:	d003      	beq.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8005440:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005444:	d007      	beq.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8005446:	e01c      	b.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005448:	4b82      	ldr	r3, [pc, #520]	@ (8005654 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800544a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800544c:	4a81      	ldr	r2, [pc, #516]	@ (8005654 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800544e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005452:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005454:	e01c      	b.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005456:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800545a:	3308      	adds	r3, #8
 800545c:	2100      	movs	r1, #0
 800545e:	4618      	mov	r0, r3
 8005460:	f001 fa78 	bl	8006954 <RCCEx_PLL2_Config>
 8005464:	4603      	mov	r3, r0
 8005466:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800546a:	e011      	b.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800546c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005470:	3328      	adds	r3, #40	@ 0x28
 8005472:	2100      	movs	r1, #0
 8005474:	4618      	mov	r0, r3
 8005476:	f001 fb1f 	bl	8006ab8 <RCCEx_PLL3_Config>
 800547a:	4603      	mov	r3, r0
 800547c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005480:	e006      	b.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005482:	2301      	movs	r3, #1
 8005484:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005488:	e002      	b.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800548a:	bf00      	nop
 800548c:	e000      	b.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800548e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005490:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005494:	2b00      	cmp	r3, #0
 8005496:	d10a      	bne.n	80054ae <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005498:	4b6e      	ldr	r3, [pc, #440]	@ (8005654 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800549a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800549c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80054a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80054a4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80054a6:	4a6b      	ldr	r2, [pc, #428]	@ (8005654 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80054a8:	430b      	orrs	r3, r1
 80054aa:	6513      	str	r3, [r2, #80]	@ 0x50
 80054ac:	e003      	b.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054ae:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80054b2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80054b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80054ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054be:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80054c2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80054c6:	2300      	movs	r3, #0
 80054c8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80054cc:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80054d0:	460b      	mov	r3, r1
 80054d2:	4313      	orrs	r3, r2
 80054d4:	d053      	beq.n	800557e <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80054d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80054da:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80054dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80054e0:	d033      	beq.n	800554a <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 80054e2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80054e6:	d82c      	bhi.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80054e8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80054ec:	d02f      	beq.n	800554e <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 80054ee:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80054f2:	d826      	bhi.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80054f4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80054f8:	d02b      	beq.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80054fa:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80054fe:	d820      	bhi.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8005500:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005504:	d012      	beq.n	800552c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8005506:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800550a:	d81a      	bhi.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800550c:	2b00      	cmp	r3, #0
 800550e:	d022      	beq.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8005510:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005514:	d115      	bne.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005516:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800551a:	3308      	adds	r3, #8
 800551c:	2101      	movs	r1, #1
 800551e:	4618      	mov	r0, r3
 8005520:	f001 fa18 	bl	8006954 <RCCEx_PLL2_Config>
 8005524:	4603      	mov	r3, r0
 8005526:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800552a:	e015      	b.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800552c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005530:	3328      	adds	r3, #40	@ 0x28
 8005532:	2101      	movs	r1, #1
 8005534:	4618      	mov	r0, r3
 8005536:	f001 fabf 	bl	8006ab8 <RCCEx_PLL3_Config>
 800553a:	4603      	mov	r3, r0
 800553c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005540:	e00a      	b.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005542:	2301      	movs	r3, #1
 8005544:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005548:	e006      	b.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800554a:	bf00      	nop
 800554c:	e004      	b.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800554e:	bf00      	nop
 8005550:	e002      	b.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8005552:	bf00      	nop
 8005554:	e000      	b.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8005556:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005558:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800555c:	2b00      	cmp	r3, #0
 800555e:	d10a      	bne.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005560:	4b3c      	ldr	r3, [pc, #240]	@ (8005654 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005562:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005564:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005568:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800556c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800556e:	4a39      	ldr	r2, [pc, #228]	@ (8005654 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005570:	430b      	orrs	r3, r1
 8005572:	6513      	str	r3, [r2, #80]	@ 0x50
 8005574:	e003      	b.n	800557e <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005576:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800557a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800557e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005586:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800558a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800558e:	2300      	movs	r3, #0
 8005590:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005594:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005598:	460b      	mov	r3, r1
 800559a:	4313      	orrs	r3, r2
 800559c:	d060      	beq.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800559e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80055a2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80055a6:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 80055aa:	d039      	beq.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 80055ac:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 80055b0:	d832      	bhi.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80055b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80055b6:	d035      	beq.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80055b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80055bc:	d82c      	bhi.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80055be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055c2:	d031      	beq.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80055c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055c8:	d826      	bhi.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80055ca:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80055ce:	d02d      	beq.n	800562c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80055d0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80055d4:	d820      	bhi.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80055d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80055da:	d012      	beq.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80055dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80055e0:	d81a      	bhi.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d024      	beq.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80055e6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80055ea:	d115      	bne.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80055ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80055f0:	3308      	adds	r3, #8
 80055f2:	2101      	movs	r1, #1
 80055f4:	4618      	mov	r0, r3
 80055f6:	f001 f9ad 	bl	8006954 <RCCEx_PLL2_Config>
 80055fa:	4603      	mov	r3, r0
 80055fc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005600:	e017      	b.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005602:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005606:	3328      	adds	r3, #40	@ 0x28
 8005608:	2101      	movs	r1, #1
 800560a:	4618      	mov	r0, r3
 800560c:	f001 fa54 	bl	8006ab8 <RCCEx_PLL3_Config>
 8005610:	4603      	mov	r3, r0
 8005612:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005616:	e00c      	b.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005618:	2301      	movs	r3, #1
 800561a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800561e:	e008      	b.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005620:	bf00      	nop
 8005622:	e006      	b.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005624:	bf00      	nop
 8005626:	e004      	b.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005628:	bf00      	nop
 800562a:	e002      	b.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800562c:	bf00      	nop
 800562e:	e000      	b.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005630:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005632:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005636:	2b00      	cmp	r3, #0
 8005638:	d10e      	bne.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800563a:	4b06      	ldr	r3, [pc, #24]	@ (8005654 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800563c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800563e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005642:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005646:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800564a:	4a02      	ldr	r2, [pc, #8]	@ (8005654 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800564c:	430b      	orrs	r3, r1
 800564e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005650:	e006      	b.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8005652:	bf00      	nop
 8005654:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005658:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800565c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005660:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005668:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800566c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005670:	2300      	movs	r3, #0
 8005672:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005676:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800567a:	460b      	mov	r3, r1
 800567c:	4313      	orrs	r3, r2
 800567e:	d037      	beq.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005680:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005684:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005686:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800568a:	d00e      	beq.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800568c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005690:	d816      	bhi.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8005692:	2b00      	cmp	r3, #0
 8005694:	d018      	beq.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8005696:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800569a:	d111      	bne.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800569c:	4bc4      	ldr	r3, [pc, #784]	@ (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800569e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056a0:	4ac3      	ldr	r2, [pc, #780]	@ (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80056a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80056a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80056a8:	e00f      	b.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80056aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80056ae:	3308      	adds	r3, #8
 80056b0:	2101      	movs	r1, #1
 80056b2:	4618      	mov	r0, r3
 80056b4:	f001 f94e 	bl	8006954 <RCCEx_PLL2_Config>
 80056b8:	4603      	mov	r3, r0
 80056ba:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80056be:	e004      	b.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80056c0:	2301      	movs	r3, #1
 80056c2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80056c6:	e000      	b.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80056c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056ca:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d10a      	bne.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80056d2:	4bb7      	ldr	r3, [pc, #732]	@ (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80056d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056d6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80056da:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80056de:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80056e0:	4ab3      	ldr	r2, [pc, #716]	@ (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80056e2:	430b      	orrs	r3, r1
 80056e4:	6513      	str	r3, [r2, #80]	@ 0x50
 80056e6:	e003      	b.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056e8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80056ec:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80056f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80056f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056f8:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80056fc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005700:	2300      	movs	r3, #0
 8005702:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005706:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800570a:	460b      	mov	r3, r1
 800570c:	4313      	orrs	r3, r2
 800570e:	d039      	beq.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005710:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005714:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005716:	2b03      	cmp	r3, #3
 8005718:	d81c      	bhi.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800571a:	a201      	add	r2, pc, #4	@ (adr r2, 8005720 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800571c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005720:	0800575d 	.word	0x0800575d
 8005724:	08005731 	.word	0x08005731
 8005728:	0800573f 	.word	0x0800573f
 800572c:	0800575d 	.word	0x0800575d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005730:	4b9f      	ldr	r3, [pc, #636]	@ (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005732:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005734:	4a9e      	ldr	r2, [pc, #632]	@ (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005736:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800573a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800573c:	e00f      	b.n	800575e <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800573e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005742:	3308      	adds	r3, #8
 8005744:	2102      	movs	r1, #2
 8005746:	4618      	mov	r0, r3
 8005748:	f001 f904 	bl	8006954 <RCCEx_PLL2_Config>
 800574c:	4603      	mov	r3, r0
 800574e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005752:	e004      	b.n	800575e <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005754:	2301      	movs	r3, #1
 8005756:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800575a:	e000      	b.n	800575e <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800575c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800575e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005762:	2b00      	cmp	r3, #0
 8005764:	d10a      	bne.n	800577c <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005766:	4b92      	ldr	r3, [pc, #584]	@ (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005768:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800576a:	f023 0103 	bic.w	r1, r3, #3
 800576e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005772:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005774:	4a8e      	ldr	r2, [pc, #568]	@ (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005776:	430b      	orrs	r3, r1
 8005778:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800577a:	e003      	b.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800577c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005780:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005784:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800578c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005790:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005794:	2300      	movs	r3, #0
 8005796:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800579a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800579e:	460b      	mov	r3, r1
 80057a0:	4313      	orrs	r3, r2
 80057a2:	f000 8099 	beq.w	80058d8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80057a6:	4b83      	ldr	r3, [pc, #524]	@ (80059b4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a82      	ldr	r2, [pc, #520]	@ (80059b4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80057ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80057b0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80057b2:	f7fb ffb7 	bl	8001724 <HAL_GetTick>
 80057b6:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80057ba:	e00b      	b.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057bc:	f7fb ffb2 	bl	8001724 <HAL_GetTick>
 80057c0:	4602      	mov	r2, r0
 80057c2:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80057c6:	1ad3      	subs	r3, r2, r3
 80057c8:	2b64      	cmp	r3, #100	@ 0x64
 80057ca:	d903      	bls.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80057cc:	2303      	movs	r3, #3
 80057ce:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80057d2:	e005      	b.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80057d4:	4b77      	ldr	r3, [pc, #476]	@ (80059b4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d0ed      	beq.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 80057e0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d173      	bne.n	80058d0 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80057e8:	4b71      	ldr	r3, [pc, #452]	@ (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80057ea:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80057ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80057f0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80057f4:	4053      	eors	r3, r2
 80057f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d015      	beq.n	800582a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80057fe:	4b6c      	ldr	r3, [pc, #432]	@ (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005800:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005802:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005806:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800580a:	4b69      	ldr	r3, [pc, #420]	@ (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800580c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800580e:	4a68      	ldr	r2, [pc, #416]	@ (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005810:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005814:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005816:	4b66      	ldr	r3, [pc, #408]	@ (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005818:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800581a:	4a65      	ldr	r2, [pc, #404]	@ (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800581c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005820:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005822:	4a63      	ldr	r2, [pc, #396]	@ (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005824:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005828:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800582a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800582e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005832:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005836:	d118      	bne.n	800586a <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005838:	f7fb ff74 	bl	8001724 <HAL_GetTick>
 800583c:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005840:	e00d      	b.n	800585e <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005842:	f7fb ff6f 	bl	8001724 <HAL_GetTick>
 8005846:	4602      	mov	r2, r0
 8005848:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800584c:	1ad2      	subs	r2, r2, r3
 800584e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005852:	429a      	cmp	r2, r3
 8005854:	d903      	bls.n	800585e <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8005856:	2303      	movs	r3, #3
 8005858:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 800585c:	e005      	b.n	800586a <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800585e:	4b54      	ldr	r3, [pc, #336]	@ (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005860:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005862:	f003 0302 	and.w	r3, r3, #2
 8005866:	2b00      	cmp	r3, #0
 8005868:	d0eb      	beq.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800586a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800586e:	2b00      	cmp	r3, #0
 8005870:	d129      	bne.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005872:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005876:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800587a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800587e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005882:	d10e      	bne.n	80058a2 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8005884:	4b4a      	ldr	r3, [pc, #296]	@ (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005886:	691b      	ldr	r3, [r3, #16]
 8005888:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800588c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005890:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005894:	091a      	lsrs	r2, r3, #4
 8005896:	4b48      	ldr	r3, [pc, #288]	@ (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005898:	4013      	ands	r3, r2
 800589a:	4a45      	ldr	r2, [pc, #276]	@ (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800589c:	430b      	orrs	r3, r1
 800589e:	6113      	str	r3, [r2, #16]
 80058a0:	e005      	b.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0x852>
 80058a2:	4b43      	ldr	r3, [pc, #268]	@ (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80058a4:	691b      	ldr	r3, [r3, #16]
 80058a6:	4a42      	ldr	r2, [pc, #264]	@ (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80058a8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80058ac:	6113      	str	r3, [r2, #16]
 80058ae:	4b40      	ldr	r3, [pc, #256]	@ (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80058b0:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80058b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80058b6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80058ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80058be:	4a3c      	ldr	r2, [pc, #240]	@ (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80058c0:	430b      	orrs	r3, r1
 80058c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80058c4:	e008      	b.n	80058d8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80058c6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80058ca:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 80058ce:	e003      	b.n	80058d8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058d0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80058d4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80058d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80058dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058e0:	f002 0301 	and.w	r3, r2, #1
 80058e4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80058e8:	2300      	movs	r3, #0
 80058ea:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80058ee:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80058f2:	460b      	mov	r3, r1
 80058f4:	4313      	orrs	r3, r2
 80058f6:	f000 8090 	beq.w	8005a1a <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80058fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80058fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005902:	2b28      	cmp	r3, #40	@ 0x28
 8005904:	d870      	bhi.n	80059e8 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8005906:	a201      	add	r2, pc, #4	@ (adr r2, 800590c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8005908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800590c:	080059f1 	.word	0x080059f1
 8005910:	080059e9 	.word	0x080059e9
 8005914:	080059e9 	.word	0x080059e9
 8005918:	080059e9 	.word	0x080059e9
 800591c:	080059e9 	.word	0x080059e9
 8005920:	080059e9 	.word	0x080059e9
 8005924:	080059e9 	.word	0x080059e9
 8005928:	080059e9 	.word	0x080059e9
 800592c:	080059bd 	.word	0x080059bd
 8005930:	080059e9 	.word	0x080059e9
 8005934:	080059e9 	.word	0x080059e9
 8005938:	080059e9 	.word	0x080059e9
 800593c:	080059e9 	.word	0x080059e9
 8005940:	080059e9 	.word	0x080059e9
 8005944:	080059e9 	.word	0x080059e9
 8005948:	080059e9 	.word	0x080059e9
 800594c:	080059d3 	.word	0x080059d3
 8005950:	080059e9 	.word	0x080059e9
 8005954:	080059e9 	.word	0x080059e9
 8005958:	080059e9 	.word	0x080059e9
 800595c:	080059e9 	.word	0x080059e9
 8005960:	080059e9 	.word	0x080059e9
 8005964:	080059e9 	.word	0x080059e9
 8005968:	080059e9 	.word	0x080059e9
 800596c:	080059f1 	.word	0x080059f1
 8005970:	080059e9 	.word	0x080059e9
 8005974:	080059e9 	.word	0x080059e9
 8005978:	080059e9 	.word	0x080059e9
 800597c:	080059e9 	.word	0x080059e9
 8005980:	080059e9 	.word	0x080059e9
 8005984:	080059e9 	.word	0x080059e9
 8005988:	080059e9 	.word	0x080059e9
 800598c:	080059f1 	.word	0x080059f1
 8005990:	080059e9 	.word	0x080059e9
 8005994:	080059e9 	.word	0x080059e9
 8005998:	080059e9 	.word	0x080059e9
 800599c:	080059e9 	.word	0x080059e9
 80059a0:	080059e9 	.word	0x080059e9
 80059a4:	080059e9 	.word	0x080059e9
 80059a8:	080059e9 	.word	0x080059e9
 80059ac:	080059f1 	.word	0x080059f1
 80059b0:	58024400 	.word	0x58024400
 80059b4:	58024800 	.word	0x58024800
 80059b8:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80059bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80059c0:	3308      	adds	r3, #8
 80059c2:	2101      	movs	r1, #1
 80059c4:	4618      	mov	r0, r3
 80059c6:	f000 ffc5 	bl	8006954 <RCCEx_PLL2_Config>
 80059ca:	4603      	mov	r3, r0
 80059cc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80059d0:	e00f      	b.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80059d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80059d6:	3328      	adds	r3, #40	@ 0x28
 80059d8:	2101      	movs	r1, #1
 80059da:	4618      	mov	r0, r3
 80059dc:	f001 f86c 	bl	8006ab8 <RCCEx_PLL3_Config>
 80059e0:	4603      	mov	r3, r0
 80059e2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80059e6:	e004      	b.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80059e8:	2301      	movs	r3, #1
 80059ea:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80059ee:	e000      	b.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80059f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059f2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d10b      	bne.n	8005a12 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80059fa:	4bc0      	ldr	r3, [pc, #768]	@ (8005cfc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80059fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059fe:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8005a02:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005a06:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005a0a:	4abc      	ldr	r2, [pc, #752]	@ (8005cfc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005a0c:	430b      	orrs	r3, r1
 8005a0e:	6553      	str	r3, [r2, #84]	@ 0x54
 8005a10:	e003      	b.n	8005a1a <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a12:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005a16:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005a1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a22:	f002 0302 	and.w	r3, r2, #2
 8005a26:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005a30:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8005a34:	460b      	mov	r3, r1
 8005a36:	4313      	orrs	r3, r2
 8005a38:	d043      	beq.n	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005a3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005a3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a42:	2b05      	cmp	r3, #5
 8005a44:	d824      	bhi.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8005a46:	a201      	add	r2, pc, #4	@ (adr r2, 8005a4c <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8005a48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a4c:	08005a99 	.word	0x08005a99
 8005a50:	08005a65 	.word	0x08005a65
 8005a54:	08005a7b 	.word	0x08005a7b
 8005a58:	08005a99 	.word	0x08005a99
 8005a5c:	08005a99 	.word	0x08005a99
 8005a60:	08005a99 	.word	0x08005a99
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005a64:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005a68:	3308      	adds	r3, #8
 8005a6a:	2101      	movs	r1, #1
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	f000 ff71 	bl	8006954 <RCCEx_PLL2_Config>
 8005a72:	4603      	mov	r3, r0
 8005a74:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005a78:	e00f      	b.n	8005a9a <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005a7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005a7e:	3328      	adds	r3, #40	@ 0x28
 8005a80:	2101      	movs	r1, #1
 8005a82:	4618      	mov	r0, r3
 8005a84:	f001 f818 	bl	8006ab8 <RCCEx_PLL3_Config>
 8005a88:	4603      	mov	r3, r0
 8005a8a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005a8e:	e004      	b.n	8005a9a <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a90:	2301      	movs	r3, #1
 8005a92:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005a96:	e000      	b.n	8005a9a <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8005a98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a9a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d10b      	bne.n	8005aba <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005aa2:	4b96      	ldr	r3, [pc, #600]	@ (8005cfc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005aa4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005aa6:	f023 0107 	bic.w	r1, r3, #7
 8005aaa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005aae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ab2:	4a92      	ldr	r2, [pc, #584]	@ (8005cfc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005ab4:	430b      	orrs	r3, r1
 8005ab6:	6553      	str	r3, [r2, #84]	@ 0x54
 8005ab8:	e003      	b.n	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005aba:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005abe:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005ac2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aca:	f002 0304 	and.w	r3, r2, #4
 8005ace:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005ad8:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8005adc:	460b      	mov	r3, r1
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	d043      	beq.n	8005b6a <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005ae2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005ae6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005aea:	2b05      	cmp	r3, #5
 8005aec:	d824      	bhi.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8005aee:	a201      	add	r2, pc, #4	@ (adr r2, 8005af4 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8005af0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005af4:	08005b41 	.word	0x08005b41
 8005af8:	08005b0d 	.word	0x08005b0d
 8005afc:	08005b23 	.word	0x08005b23
 8005b00:	08005b41 	.word	0x08005b41
 8005b04:	08005b41 	.word	0x08005b41
 8005b08:	08005b41 	.word	0x08005b41
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005b0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005b10:	3308      	adds	r3, #8
 8005b12:	2101      	movs	r1, #1
 8005b14:	4618      	mov	r0, r3
 8005b16:	f000 ff1d 	bl	8006954 <RCCEx_PLL2_Config>
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005b20:	e00f      	b.n	8005b42 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005b22:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005b26:	3328      	adds	r3, #40	@ 0x28
 8005b28:	2101      	movs	r1, #1
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	f000 ffc4 	bl	8006ab8 <RCCEx_PLL3_Config>
 8005b30:	4603      	mov	r3, r0
 8005b32:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005b36:	e004      	b.n	8005b42 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b38:	2301      	movs	r3, #1
 8005b3a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005b3e:	e000      	b.n	8005b42 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8005b40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b42:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d10b      	bne.n	8005b62 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005b4a:	4b6c      	ldr	r3, [pc, #432]	@ (8005cfc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005b4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b4e:	f023 0107 	bic.w	r1, r3, #7
 8005b52:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005b56:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005b5a:	4a68      	ldr	r2, [pc, #416]	@ (8005cfc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005b5c:	430b      	orrs	r3, r1
 8005b5e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005b60:	e003      	b.n	8005b6a <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b62:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005b66:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005b6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b72:	f002 0320 	and.w	r3, r2, #32
 8005b76:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005b80:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005b84:	460b      	mov	r3, r1
 8005b86:	4313      	orrs	r3, r2
 8005b88:	d055      	beq.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005b8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005b8e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005b92:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005b96:	d033      	beq.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8005b98:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005b9c:	d82c      	bhi.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8005b9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ba2:	d02f      	beq.n	8005c04 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8005ba4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ba8:	d826      	bhi.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8005baa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005bae:	d02b      	beq.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8005bb0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005bb4:	d820      	bhi.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8005bb6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005bba:	d012      	beq.n	8005be2 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8005bbc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005bc0:	d81a      	bhi.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d022      	beq.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8005bc6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005bca:	d115      	bne.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005bcc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005bd0:	3308      	adds	r3, #8
 8005bd2:	2100      	movs	r1, #0
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	f000 febd 	bl	8006954 <RCCEx_PLL2_Config>
 8005bda:	4603      	mov	r3, r0
 8005bdc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005be0:	e015      	b.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005be2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005be6:	3328      	adds	r3, #40	@ 0x28
 8005be8:	2102      	movs	r1, #2
 8005bea:	4618      	mov	r0, r3
 8005bec:	f000 ff64 	bl	8006ab8 <RCCEx_PLL3_Config>
 8005bf0:	4603      	mov	r3, r0
 8005bf2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005bf6:	e00a      	b.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005bfe:	e006      	b.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8005c00:	bf00      	nop
 8005c02:	e004      	b.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8005c04:	bf00      	nop
 8005c06:	e002      	b.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8005c08:	bf00      	nop
 8005c0a:	e000      	b.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8005c0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c0e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d10b      	bne.n	8005c2e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005c16:	4b39      	ldr	r3, [pc, #228]	@ (8005cfc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005c18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c1a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005c1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005c22:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005c26:	4a35      	ldr	r2, [pc, #212]	@ (8005cfc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005c28:	430b      	orrs	r3, r1
 8005c2a:	6553      	str	r3, [r2, #84]	@ 0x54
 8005c2c:	e003      	b.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c2e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005c32:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005c36:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c3e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8005c42:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005c46:	2300      	movs	r3, #0
 8005c48:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005c4c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8005c50:	460b      	mov	r3, r1
 8005c52:	4313      	orrs	r3, r2
 8005c54:	d058      	beq.n	8005d08 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005c56:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005c5a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005c5e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005c62:	d033      	beq.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8005c64:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005c68:	d82c      	bhi.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8005c6a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c6e:	d02f      	beq.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8005c70:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c74:	d826      	bhi.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8005c76:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005c7a:	d02b      	beq.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8005c7c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005c80:	d820      	bhi.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8005c82:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005c86:	d012      	beq.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8005c88:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005c8c:	d81a      	bhi.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d022      	beq.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8005c92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c96:	d115      	bne.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005c98:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005c9c:	3308      	adds	r3, #8
 8005c9e:	2100      	movs	r1, #0
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	f000 fe57 	bl	8006954 <RCCEx_PLL2_Config>
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005cac:	e015      	b.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005cae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005cb2:	3328      	adds	r3, #40	@ 0x28
 8005cb4:	2102      	movs	r1, #2
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	f000 fefe 	bl	8006ab8 <RCCEx_PLL3_Config>
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005cc2:	e00a      	b.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005cca:	e006      	b.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8005ccc:	bf00      	nop
 8005cce:	e004      	b.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8005cd0:	bf00      	nop
 8005cd2:	e002      	b.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8005cd4:	bf00      	nop
 8005cd6:	e000      	b.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8005cd8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005cda:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d10e      	bne.n	8005d00 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005ce2:	4b06      	ldr	r3, [pc, #24]	@ (8005cfc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005ce4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ce6:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8005cea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005cee:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005cf2:	4a02      	ldr	r2, [pc, #8]	@ (8005cfc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005cf4:	430b      	orrs	r3, r1
 8005cf6:	6593      	str	r3, [r2, #88]	@ 0x58
 8005cf8:	e006      	b.n	8005d08 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8005cfa:	bf00      	nop
 8005cfc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d00:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005d04:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005d08:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d10:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8005d14:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005d18:	2300      	movs	r3, #0
 8005d1a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005d1e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8005d22:	460b      	mov	r3, r1
 8005d24:	4313      	orrs	r3, r2
 8005d26:	d055      	beq.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005d28:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005d2c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005d30:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005d34:	d033      	beq.n	8005d9e <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8005d36:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005d3a:	d82c      	bhi.n	8005d96 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8005d3c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005d40:	d02f      	beq.n	8005da2 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8005d42:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005d46:	d826      	bhi.n	8005d96 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8005d48:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005d4c:	d02b      	beq.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8005d4e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005d52:	d820      	bhi.n	8005d96 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8005d54:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005d58:	d012      	beq.n	8005d80 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8005d5a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005d5e:	d81a      	bhi.n	8005d96 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d022      	beq.n	8005daa <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8005d64:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d68:	d115      	bne.n	8005d96 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005d6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005d6e:	3308      	adds	r3, #8
 8005d70:	2100      	movs	r1, #0
 8005d72:	4618      	mov	r0, r3
 8005d74:	f000 fdee 	bl	8006954 <RCCEx_PLL2_Config>
 8005d78:	4603      	mov	r3, r0
 8005d7a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005d7e:	e015      	b.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005d80:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005d84:	3328      	adds	r3, #40	@ 0x28
 8005d86:	2102      	movs	r1, #2
 8005d88:	4618      	mov	r0, r3
 8005d8a:	f000 fe95 	bl	8006ab8 <RCCEx_PLL3_Config>
 8005d8e:	4603      	mov	r3, r0
 8005d90:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005d94:	e00a      	b.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d96:	2301      	movs	r3, #1
 8005d98:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005d9c:	e006      	b.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8005d9e:	bf00      	nop
 8005da0:	e004      	b.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8005da2:	bf00      	nop
 8005da4:	e002      	b.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8005da6:	bf00      	nop
 8005da8:	e000      	b.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8005daa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005dac:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d10b      	bne.n	8005dcc <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005db4:	4ba1      	ldr	r3, [pc, #644]	@ (800603c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005db6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005db8:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8005dbc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005dc0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005dc4:	4a9d      	ldr	r2, [pc, #628]	@ (800603c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005dc6:	430b      	orrs	r3, r1
 8005dc8:	6593      	str	r3, [r2, #88]	@ 0x58
 8005dca:	e003      	b.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dcc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005dd0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005dd4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ddc:	f002 0308 	and.w	r3, r2, #8
 8005de0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005de4:	2300      	movs	r3, #0
 8005de6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005dea:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8005dee:	460b      	mov	r3, r1
 8005df0:	4313      	orrs	r3, r2
 8005df2:	d01e      	beq.n	8005e32 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8005df4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005df8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005dfc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e00:	d10c      	bne.n	8005e1c <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005e02:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005e06:	3328      	adds	r3, #40	@ 0x28
 8005e08:	2102      	movs	r1, #2
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	f000 fe54 	bl	8006ab8 <RCCEx_PLL3_Config>
 8005e10:	4603      	mov	r3, r0
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d002      	beq.n	8005e1c <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 8005e16:	2301      	movs	r3, #1
 8005e18:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005e1c:	4b87      	ldr	r3, [pc, #540]	@ (800603c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005e1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e20:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005e24:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005e28:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005e2c:	4a83      	ldr	r2, [pc, #524]	@ (800603c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005e2e:	430b      	orrs	r3, r1
 8005e30:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005e32:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e3a:	f002 0310 	and.w	r3, r2, #16
 8005e3e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005e42:	2300      	movs	r3, #0
 8005e44:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005e48:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8005e4c:	460b      	mov	r3, r1
 8005e4e:	4313      	orrs	r3, r2
 8005e50:	d01e      	beq.n	8005e90 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8005e52:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005e56:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005e5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e5e:	d10c      	bne.n	8005e7a <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005e60:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005e64:	3328      	adds	r3, #40	@ 0x28
 8005e66:	2102      	movs	r1, #2
 8005e68:	4618      	mov	r0, r3
 8005e6a:	f000 fe25 	bl	8006ab8 <RCCEx_PLL3_Config>
 8005e6e:	4603      	mov	r3, r0
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d002      	beq.n	8005e7a <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8005e74:	2301      	movs	r3, #1
 8005e76:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005e7a:	4b70      	ldr	r3, [pc, #448]	@ (800603c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005e7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e7e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005e82:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005e86:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005e8a:	4a6c      	ldr	r2, [pc, #432]	@ (800603c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005e8c:	430b      	orrs	r3, r1
 8005e8e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005e90:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e98:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8005e9c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005ea6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8005eaa:	460b      	mov	r3, r1
 8005eac:	4313      	orrs	r3, r2
 8005eae:	d03e      	beq.n	8005f2e <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005eb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005eb4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005eb8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005ebc:	d022      	beq.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8005ebe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005ec2:	d81b      	bhi.n	8005efc <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d003      	beq.n	8005ed0 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8005ec8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ecc:	d00b      	beq.n	8005ee6 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8005ece:	e015      	b.n	8005efc <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005ed0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005ed4:	3308      	adds	r3, #8
 8005ed6:	2100      	movs	r1, #0
 8005ed8:	4618      	mov	r0, r3
 8005eda:	f000 fd3b 	bl	8006954 <RCCEx_PLL2_Config>
 8005ede:	4603      	mov	r3, r0
 8005ee0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005ee4:	e00f      	b.n	8005f06 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005ee6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005eea:	3328      	adds	r3, #40	@ 0x28
 8005eec:	2102      	movs	r1, #2
 8005eee:	4618      	mov	r0, r3
 8005ef0:	f000 fde2 	bl	8006ab8 <RCCEx_PLL3_Config>
 8005ef4:	4603      	mov	r3, r0
 8005ef6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005efa:	e004      	b.n	8005f06 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005efc:	2301      	movs	r3, #1
 8005efe:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005f02:	e000      	b.n	8005f06 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8005f04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f06:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d10b      	bne.n	8005f26 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005f0e:	4b4b      	ldr	r3, [pc, #300]	@ (800603c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005f10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f12:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8005f16:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005f1a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005f1e:	4a47      	ldr	r2, [pc, #284]	@ (800603c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005f20:	430b      	orrs	r3, r1
 8005f22:	6593      	str	r3, [r2, #88]	@ 0x58
 8005f24:	e003      	b.n	8005f2e <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f26:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005f2a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005f2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f36:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8005f3a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005f40:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8005f44:	460b      	mov	r3, r1
 8005f46:	4313      	orrs	r3, r2
 8005f48:	d03b      	beq.n	8005fc2 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8005f4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005f4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f52:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005f56:	d01f      	beq.n	8005f98 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8005f58:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005f5c:	d818      	bhi.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8005f5e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005f62:	d003      	beq.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8005f64:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005f68:	d007      	beq.n	8005f7a <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 8005f6a:	e011      	b.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f6c:	4b33      	ldr	r3, [pc, #204]	@ (800603c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005f6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f70:	4a32      	ldr	r2, [pc, #200]	@ (800603c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005f72:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005f76:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8005f78:	e00f      	b.n	8005f9a <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005f7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005f7e:	3328      	adds	r3, #40	@ 0x28
 8005f80:	2101      	movs	r1, #1
 8005f82:	4618      	mov	r0, r3
 8005f84:	f000 fd98 	bl	8006ab8 <RCCEx_PLL3_Config>
 8005f88:	4603      	mov	r3, r0
 8005f8a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 8005f8e:	e004      	b.n	8005f9a <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f90:	2301      	movs	r3, #1
 8005f92:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005f96:	e000      	b.n	8005f9a <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8005f98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f9a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d10b      	bne.n	8005fba <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005fa2:	4b26      	ldr	r3, [pc, #152]	@ (800603c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005fa4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fa6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005faa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005fae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005fb2:	4a22      	ldr	r2, [pc, #136]	@ (800603c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005fb4:	430b      	orrs	r3, r1
 8005fb6:	6553      	str	r3, [r2, #84]	@ 0x54
 8005fb8:	e003      	b.n	8005fc2 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fba:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005fbe:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005fc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fca:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8005fce:	673b      	str	r3, [r7, #112]	@ 0x70
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	677b      	str	r3, [r7, #116]	@ 0x74
 8005fd4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8005fd8:	460b      	mov	r3, r1
 8005fda:	4313      	orrs	r3, r2
 8005fdc:	d034      	beq.n	8006048 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8005fde:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005fe2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d003      	beq.n	8005ff0 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8005fe8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005fec:	d007      	beq.n	8005ffe <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8005fee:	e011      	b.n	8006014 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ff0:	4b12      	ldr	r3, [pc, #72]	@ (800603c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005ff2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ff4:	4a11      	ldr	r2, [pc, #68]	@ (800603c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005ff6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005ffa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005ffc:	e00e      	b.n	800601c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005ffe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006002:	3308      	adds	r3, #8
 8006004:	2102      	movs	r1, #2
 8006006:	4618      	mov	r0, r3
 8006008:	f000 fca4 	bl	8006954 <RCCEx_PLL2_Config>
 800600c:	4603      	mov	r3, r0
 800600e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006012:	e003      	b.n	800601c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8006014:	2301      	movs	r3, #1
 8006016:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800601a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800601c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006020:	2b00      	cmp	r3, #0
 8006022:	d10d      	bne.n	8006040 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006024:	4b05      	ldr	r3, [pc, #20]	@ (800603c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006026:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006028:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800602c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006030:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006032:	4a02      	ldr	r2, [pc, #8]	@ (800603c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006034:	430b      	orrs	r3, r1
 8006036:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006038:	e006      	b.n	8006048 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 800603a:	bf00      	nop
 800603c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006040:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006044:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006048:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800604c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006050:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8006054:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006056:	2300      	movs	r3, #0
 8006058:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800605a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800605e:	460b      	mov	r3, r1
 8006060:	4313      	orrs	r3, r2
 8006062:	d00c      	beq.n	800607e <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006064:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006068:	3328      	adds	r3, #40	@ 0x28
 800606a:	2102      	movs	r1, #2
 800606c:	4618      	mov	r0, r3
 800606e:	f000 fd23 	bl	8006ab8 <RCCEx_PLL3_Config>
 8006072:	4603      	mov	r3, r0
 8006074:	2b00      	cmp	r3, #0
 8006076:	d002      	beq.n	800607e <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8006078:	2301      	movs	r3, #1
 800607a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800607e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006086:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800608a:	663b      	str	r3, [r7, #96]	@ 0x60
 800608c:	2300      	movs	r3, #0
 800608e:	667b      	str	r3, [r7, #100]	@ 0x64
 8006090:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006094:	460b      	mov	r3, r1
 8006096:	4313      	orrs	r3, r2
 8006098:	d038      	beq.n	800610c <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 800609a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800609e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060a2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80060a6:	d018      	beq.n	80060da <HAL_RCCEx_PeriphCLKConfig+0x107e>
 80060a8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80060ac:	d811      	bhi.n	80060d2 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 80060ae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80060b2:	d014      	beq.n	80060de <HAL_RCCEx_PeriphCLKConfig+0x1082>
 80060b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80060b8:	d80b      	bhi.n	80060d2 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d011      	beq.n	80060e2 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 80060be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80060c2:	d106      	bne.n	80060d2 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060c4:	4bc3      	ldr	r3, [pc, #780]	@ (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80060c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060c8:	4ac2      	ldr	r2, [pc, #776]	@ (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80060ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80060ce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80060d0:	e008      	b.n	80060e4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80060d2:	2301      	movs	r3, #1
 80060d4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80060d8:	e004      	b.n	80060e4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80060da:	bf00      	nop
 80060dc:	e002      	b.n	80060e4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80060de:	bf00      	nop
 80060e0:	e000      	b.n	80060e4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80060e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060e4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d10b      	bne.n	8006104 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80060ec:	4bb9      	ldr	r3, [pc, #740]	@ (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80060ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060f0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80060f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80060f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060fc:	4ab5      	ldr	r2, [pc, #724]	@ (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80060fe:	430b      	orrs	r3, r1
 8006100:	6553      	str	r3, [r2, #84]	@ 0x54
 8006102:	e003      	b.n	800610c <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006104:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006108:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800610c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006114:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006118:	65bb      	str	r3, [r7, #88]	@ 0x58
 800611a:	2300      	movs	r3, #0
 800611c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800611e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8006122:	460b      	mov	r3, r1
 8006124:	4313      	orrs	r3, r2
 8006126:	d009      	beq.n	800613c <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006128:	4baa      	ldr	r3, [pc, #680]	@ (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800612a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800612c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006130:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006134:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006136:	4aa7      	ldr	r2, [pc, #668]	@ (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006138:	430b      	orrs	r3, r1
 800613a:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800613c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006144:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006148:	653b      	str	r3, [r7, #80]	@ 0x50
 800614a:	2300      	movs	r3, #0
 800614c:	657b      	str	r3, [r7, #84]	@ 0x54
 800614e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8006152:	460b      	mov	r3, r1
 8006154:	4313      	orrs	r3, r2
 8006156:	d009      	beq.n	800616c <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006158:	4b9e      	ldr	r3, [pc, #632]	@ (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800615a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800615c:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8006160:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006164:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006166:	4a9b      	ldr	r2, [pc, #620]	@ (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006168:	430b      	orrs	r3, r1
 800616a:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 800616c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006174:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8006178:	64bb      	str	r3, [r7, #72]	@ 0x48
 800617a:	2300      	movs	r3, #0
 800617c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800617e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006182:	460b      	mov	r3, r1
 8006184:	4313      	orrs	r3, r2
 8006186:	d009      	beq.n	800619c <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8006188:	4b92      	ldr	r3, [pc, #584]	@ (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800618a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800618c:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 8006190:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006194:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006196:	4a8f      	ldr	r2, [pc, #572]	@ (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006198:	430b      	orrs	r3, r1
 800619a:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800619c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80061a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061a4:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80061a8:	643b      	str	r3, [r7, #64]	@ 0x40
 80061aa:	2300      	movs	r3, #0
 80061ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80061ae:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80061b2:	460b      	mov	r3, r1
 80061b4:	4313      	orrs	r3, r2
 80061b6:	d00e      	beq.n	80061d6 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80061b8:	4b86      	ldr	r3, [pc, #536]	@ (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80061ba:	691b      	ldr	r3, [r3, #16]
 80061bc:	4a85      	ldr	r2, [pc, #532]	@ (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80061be:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80061c2:	6113      	str	r3, [r2, #16]
 80061c4:	4b83      	ldr	r3, [pc, #524]	@ (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80061c6:	6919      	ldr	r1, [r3, #16]
 80061c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80061cc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80061d0:	4a80      	ldr	r2, [pc, #512]	@ (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80061d2:	430b      	orrs	r3, r1
 80061d4:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80061d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80061da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061de:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80061e2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80061e4:	2300      	movs	r3, #0
 80061e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80061e8:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80061ec:	460b      	mov	r3, r1
 80061ee:	4313      	orrs	r3, r2
 80061f0:	d009      	beq.n	8006206 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80061f2:	4b78      	ldr	r3, [pc, #480]	@ (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80061f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80061f6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80061fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80061fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006200:	4a74      	ldr	r2, [pc, #464]	@ (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006202:	430b      	orrs	r3, r1
 8006204:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006206:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800620a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800620e:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006212:	633b      	str	r3, [r7, #48]	@ 0x30
 8006214:	2300      	movs	r3, #0
 8006216:	637b      	str	r3, [r7, #52]	@ 0x34
 8006218:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800621c:	460b      	mov	r3, r1
 800621e:	4313      	orrs	r3, r2
 8006220:	d00a      	beq.n	8006238 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006222:	4b6c      	ldr	r3, [pc, #432]	@ (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006224:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006226:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800622a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800622e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006232:	4a68      	ldr	r2, [pc, #416]	@ (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006234:	430b      	orrs	r3, r1
 8006236:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006238:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800623c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006240:	2100      	movs	r1, #0
 8006242:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006244:	f003 0301 	and.w	r3, r3, #1
 8006248:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800624a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800624e:	460b      	mov	r3, r1
 8006250:	4313      	orrs	r3, r2
 8006252:	d011      	beq.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006254:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006258:	3308      	adds	r3, #8
 800625a:	2100      	movs	r1, #0
 800625c:	4618      	mov	r0, r3
 800625e:	f000 fb79 	bl	8006954 <RCCEx_PLL2_Config>
 8006262:	4603      	mov	r3, r0
 8006264:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8006268:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800626c:	2b00      	cmp	r3, #0
 800626e:	d003      	beq.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006270:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006274:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006278:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800627c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006280:	2100      	movs	r1, #0
 8006282:	6239      	str	r1, [r7, #32]
 8006284:	f003 0302 	and.w	r3, r3, #2
 8006288:	627b      	str	r3, [r7, #36]	@ 0x24
 800628a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800628e:	460b      	mov	r3, r1
 8006290:	4313      	orrs	r3, r2
 8006292:	d011      	beq.n	80062b8 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006294:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006298:	3308      	adds	r3, #8
 800629a:	2101      	movs	r1, #1
 800629c:	4618      	mov	r0, r3
 800629e:	f000 fb59 	bl	8006954 <RCCEx_PLL2_Config>
 80062a2:	4603      	mov	r3, r0
 80062a4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80062a8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d003      	beq.n	80062b8 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062b0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80062b4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80062b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80062bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062c0:	2100      	movs	r1, #0
 80062c2:	61b9      	str	r1, [r7, #24]
 80062c4:	f003 0304 	and.w	r3, r3, #4
 80062c8:	61fb      	str	r3, [r7, #28]
 80062ca:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80062ce:	460b      	mov	r3, r1
 80062d0:	4313      	orrs	r3, r2
 80062d2:	d011      	beq.n	80062f8 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80062d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80062d8:	3308      	adds	r3, #8
 80062da:	2102      	movs	r1, #2
 80062dc:	4618      	mov	r0, r3
 80062de:	f000 fb39 	bl	8006954 <RCCEx_PLL2_Config>
 80062e2:	4603      	mov	r3, r0
 80062e4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80062e8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d003      	beq.n	80062f8 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062f0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80062f4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80062f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80062fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006300:	2100      	movs	r1, #0
 8006302:	6139      	str	r1, [r7, #16]
 8006304:	f003 0308 	and.w	r3, r3, #8
 8006308:	617b      	str	r3, [r7, #20]
 800630a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800630e:	460b      	mov	r3, r1
 8006310:	4313      	orrs	r3, r2
 8006312:	d011      	beq.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006314:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006318:	3328      	adds	r3, #40	@ 0x28
 800631a:	2100      	movs	r1, #0
 800631c:	4618      	mov	r0, r3
 800631e:	f000 fbcb 	bl	8006ab8 <RCCEx_PLL3_Config>
 8006322:	4603      	mov	r3, r0
 8006324:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 8006328:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800632c:	2b00      	cmp	r3, #0
 800632e:	d003      	beq.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006330:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006334:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006338:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800633c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006340:	2100      	movs	r1, #0
 8006342:	60b9      	str	r1, [r7, #8]
 8006344:	f003 0310 	and.w	r3, r3, #16
 8006348:	60fb      	str	r3, [r7, #12]
 800634a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800634e:	460b      	mov	r3, r1
 8006350:	4313      	orrs	r3, r2
 8006352:	d011      	beq.n	8006378 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006354:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006358:	3328      	adds	r3, #40	@ 0x28
 800635a:	2101      	movs	r1, #1
 800635c:	4618      	mov	r0, r3
 800635e:	f000 fbab 	bl	8006ab8 <RCCEx_PLL3_Config>
 8006362:	4603      	mov	r3, r0
 8006364:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8006368:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800636c:	2b00      	cmp	r3, #0
 800636e:	d003      	beq.n	8006378 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006370:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006374:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006378:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800637c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006380:	2100      	movs	r1, #0
 8006382:	6039      	str	r1, [r7, #0]
 8006384:	f003 0320 	and.w	r3, r3, #32
 8006388:	607b      	str	r3, [r7, #4]
 800638a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800638e:	460b      	mov	r3, r1
 8006390:	4313      	orrs	r3, r2
 8006392:	d011      	beq.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006394:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006398:	3328      	adds	r3, #40	@ 0x28
 800639a:	2102      	movs	r1, #2
 800639c:	4618      	mov	r0, r3
 800639e:	f000 fb8b 	bl	8006ab8 <RCCEx_PLL3_Config>
 80063a2:	4603      	mov	r3, r0
 80063a4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80063a8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d003      	beq.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063b0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80063b4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 80063b8:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d101      	bne.n	80063c4 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 80063c0:	2300      	movs	r3, #0
 80063c2:	e000      	b.n	80063c6 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 80063c4:	2301      	movs	r3, #1
}
 80063c6:	4618      	mov	r0, r3
 80063c8:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 80063cc:	46bd      	mov	sp, r7
 80063ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80063d2:	bf00      	nop
 80063d4:	58024400 	.word	0x58024400

080063d8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 80063dc:	f7fe fde2 	bl	8004fa4 <HAL_RCC_GetHCLKFreq>
 80063e0:	4602      	mov	r2, r0
 80063e2:	4b06      	ldr	r3, [pc, #24]	@ (80063fc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80063e4:	6a1b      	ldr	r3, [r3, #32]
 80063e6:	091b      	lsrs	r3, r3, #4
 80063e8:	f003 0307 	and.w	r3, r3, #7
 80063ec:	4904      	ldr	r1, [pc, #16]	@ (8006400 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80063ee:	5ccb      	ldrb	r3, [r1, r3]
 80063f0:	f003 031f 	and.w	r3, r3, #31
 80063f4:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80063f8:	4618      	mov	r0, r3
 80063fa:	bd80      	pop	{r7, pc}
 80063fc:	58024400 	.word	0x58024400
 8006400:	08009f20 	.word	0x08009f20

08006404 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006404:	b480      	push	{r7}
 8006406:	b089      	sub	sp, #36	@ 0x24
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800640c:	4ba1      	ldr	r3, [pc, #644]	@ (8006694 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800640e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006410:	f003 0303 	and.w	r3, r3, #3
 8006414:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8006416:	4b9f      	ldr	r3, [pc, #636]	@ (8006694 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006418:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800641a:	0b1b      	lsrs	r3, r3, #12
 800641c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006420:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006422:	4b9c      	ldr	r3, [pc, #624]	@ (8006694 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006424:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006426:	091b      	lsrs	r3, r3, #4
 8006428:	f003 0301 	and.w	r3, r3, #1
 800642c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800642e:	4b99      	ldr	r3, [pc, #612]	@ (8006694 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006430:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006432:	08db      	lsrs	r3, r3, #3
 8006434:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006438:	693a      	ldr	r2, [r7, #16]
 800643a:	fb02 f303 	mul.w	r3, r2, r3
 800643e:	ee07 3a90 	vmov	s15, r3
 8006442:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006446:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800644a:	697b      	ldr	r3, [r7, #20]
 800644c:	2b00      	cmp	r3, #0
 800644e:	f000 8111 	beq.w	8006674 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006452:	69bb      	ldr	r3, [r7, #24]
 8006454:	2b02      	cmp	r3, #2
 8006456:	f000 8083 	beq.w	8006560 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800645a:	69bb      	ldr	r3, [r7, #24]
 800645c:	2b02      	cmp	r3, #2
 800645e:	f200 80a1 	bhi.w	80065a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006462:	69bb      	ldr	r3, [r7, #24]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d003      	beq.n	8006470 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006468:	69bb      	ldr	r3, [r7, #24]
 800646a:	2b01      	cmp	r3, #1
 800646c:	d056      	beq.n	800651c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800646e:	e099      	b.n	80065a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006470:	4b88      	ldr	r3, [pc, #544]	@ (8006694 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f003 0320 	and.w	r3, r3, #32
 8006478:	2b00      	cmp	r3, #0
 800647a:	d02d      	beq.n	80064d8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800647c:	4b85      	ldr	r3, [pc, #532]	@ (8006694 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	08db      	lsrs	r3, r3, #3
 8006482:	f003 0303 	and.w	r3, r3, #3
 8006486:	4a84      	ldr	r2, [pc, #528]	@ (8006698 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006488:	fa22 f303 	lsr.w	r3, r2, r3
 800648c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	ee07 3a90 	vmov	s15, r3
 8006494:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006498:	697b      	ldr	r3, [r7, #20]
 800649a:	ee07 3a90 	vmov	s15, r3
 800649e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064a6:	4b7b      	ldr	r3, [pc, #492]	@ (8006694 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80064a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064ae:	ee07 3a90 	vmov	s15, r3
 80064b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80064ba:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800669c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80064be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80064c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80064c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80064ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80064ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064d2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80064d6:	e087      	b.n	80065e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80064d8:	697b      	ldr	r3, [r7, #20]
 80064da:	ee07 3a90 	vmov	s15, r3
 80064de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064e2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80066a0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80064e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064ea:	4b6a      	ldr	r3, [pc, #424]	@ (8006694 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80064ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064f2:	ee07 3a90 	vmov	s15, r3
 80064f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80064fe:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800669c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006502:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006506:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800650a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800650e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006512:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006516:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800651a:	e065      	b.n	80065e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800651c:	697b      	ldr	r3, [r7, #20]
 800651e:	ee07 3a90 	vmov	s15, r3
 8006522:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006526:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80066a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800652a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800652e:	4b59      	ldr	r3, [pc, #356]	@ (8006694 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006530:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006532:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006536:	ee07 3a90 	vmov	s15, r3
 800653a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800653e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006542:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800669c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006546:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800654a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800654e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006552:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006556:	ee67 7a27 	vmul.f32	s15, s14, s15
 800655a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800655e:	e043      	b.n	80065e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006560:	697b      	ldr	r3, [r7, #20]
 8006562:	ee07 3a90 	vmov	s15, r3
 8006566:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800656a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80066a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800656e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006572:	4b48      	ldr	r3, [pc, #288]	@ (8006694 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006574:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006576:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800657a:	ee07 3a90 	vmov	s15, r3
 800657e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006582:	ed97 6a03 	vldr	s12, [r7, #12]
 8006586:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800669c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800658a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800658e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006592:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006596:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800659a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800659e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80065a2:	e021      	b.n	80065e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80065a4:	697b      	ldr	r3, [r7, #20]
 80065a6:	ee07 3a90 	vmov	s15, r3
 80065aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065ae:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80066a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80065b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065b6:	4b37      	ldr	r3, [pc, #220]	@ (8006694 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80065b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065be:	ee07 3a90 	vmov	s15, r3
 80065c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80065ca:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800669c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80065ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80065d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80065d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80065da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80065de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80065e6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80065e8:	4b2a      	ldr	r3, [pc, #168]	@ (8006694 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80065ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065ec:	0a5b      	lsrs	r3, r3, #9
 80065ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80065f2:	ee07 3a90 	vmov	s15, r3
 80065f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065fa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80065fe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006602:	edd7 6a07 	vldr	s13, [r7, #28]
 8006606:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800660a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800660e:	ee17 2a90 	vmov	r2, s15
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8006616:	4b1f      	ldr	r3, [pc, #124]	@ (8006694 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006618:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800661a:	0c1b      	lsrs	r3, r3, #16
 800661c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006620:	ee07 3a90 	vmov	s15, r3
 8006624:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006628:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800662c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006630:	edd7 6a07 	vldr	s13, [r7, #28]
 8006634:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006638:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800663c:	ee17 2a90 	vmov	r2, s15
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8006644:	4b13      	ldr	r3, [pc, #76]	@ (8006694 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006646:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006648:	0e1b      	lsrs	r3, r3, #24
 800664a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800664e:	ee07 3a90 	vmov	s15, r3
 8006652:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006656:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800665a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800665e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006662:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006666:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800666a:	ee17 2a90 	vmov	r2, s15
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006672:	e008      	b.n	8006686 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2200      	movs	r2, #0
 8006678:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2200      	movs	r2, #0
 800667e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2200      	movs	r2, #0
 8006684:	609a      	str	r2, [r3, #8]
}
 8006686:	bf00      	nop
 8006688:	3724      	adds	r7, #36	@ 0x24
 800668a:	46bd      	mov	sp, r7
 800668c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006690:	4770      	bx	lr
 8006692:	bf00      	nop
 8006694:	58024400 	.word	0x58024400
 8006698:	03d09000 	.word	0x03d09000
 800669c:	46000000 	.word	0x46000000
 80066a0:	4c742400 	.word	0x4c742400
 80066a4:	4a742400 	.word	0x4a742400
 80066a8:	4af42400 	.word	0x4af42400

080066ac <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80066ac:	b480      	push	{r7}
 80066ae:	b089      	sub	sp, #36	@ 0x24
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80066b4:	4ba1      	ldr	r3, [pc, #644]	@ (800693c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80066b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066b8:	f003 0303 	and.w	r3, r3, #3
 80066bc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80066be:	4b9f      	ldr	r3, [pc, #636]	@ (800693c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80066c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066c2:	0d1b      	lsrs	r3, r3, #20
 80066c4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80066c8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80066ca:	4b9c      	ldr	r3, [pc, #624]	@ (800693c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80066cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066ce:	0a1b      	lsrs	r3, r3, #8
 80066d0:	f003 0301 	and.w	r3, r3, #1
 80066d4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80066d6:	4b99      	ldr	r3, [pc, #612]	@ (800693c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80066d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066da:	08db      	lsrs	r3, r3, #3
 80066dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80066e0:	693a      	ldr	r2, [r7, #16]
 80066e2:	fb02 f303 	mul.w	r3, r2, r3
 80066e6:	ee07 3a90 	vmov	s15, r3
 80066ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066ee:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80066f2:	697b      	ldr	r3, [r7, #20]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	f000 8111 	beq.w	800691c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80066fa:	69bb      	ldr	r3, [r7, #24]
 80066fc:	2b02      	cmp	r3, #2
 80066fe:	f000 8083 	beq.w	8006808 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006702:	69bb      	ldr	r3, [r7, #24]
 8006704:	2b02      	cmp	r3, #2
 8006706:	f200 80a1 	bhi.w	800684c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800670a:	69bb      	ldr	r3, [r7, #24]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d003      	beq.n	8006718 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006710:	69bb      	ldr	r3, [r7, #24]
 8006712:	2b01      	cmp	r3, #1
 8006714:	d056      	beq.n	80067c4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006716:	e099      	b.n	800684c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006718:	4b88      	ldr	r3, [pc, #544]	@ (800693c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f003 0320 	and.w	r3, r3, #32
 8006720:	2b00      	cmp	r3, #0
 8006722:	d02d      	beq.n	8006780 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006724:	4b85      	ldr	r3, [pc, #532]	@ (800693c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	08db      	lsrs	r3, r3, #3
 800672a:	f003 0303 	and.w	r3, r3, #3
 800672e:	4a84      	ldr	r2, [pc, #528]	@ (8006940 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006730:	fa22 f303 	lsr.w	r3, r2, r3
 8006734:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006736:	68bb      	ldr	r3, [r7, #8]
 8006738:	ee07 3a90 	vmov	s15, r3
 800673c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006740:	697b      	ldr	r3, [r7, #20]
 8006742:	ee07 3a90 	vmov	s15, r3
 8006746:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800674a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800674e:	4b7b      	ldr	r3, [pc, #492]	@ (800693c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006750:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006752:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006756:	ee07 3a90 	vmov	s15, r3
 800675a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800675e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006762:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006944 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006766:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800676a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800676e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006772:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006776:	ee67 7a27 	vmul.f32	s15, s14, s15
 800677a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800677e:	e087      	b.n	8006890 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006780:	697b      	ldr	r3, [r7, #20]
 8006782:	ee07 3a90 	vmov	s15, r3
 8006786:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800678a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006948 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800678e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006792:	4b6a      	ldr	r3, [pc, #424]	@ (800693c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006794:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006796:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800679a:	ee07 3a90 	vmov	s15, r3
 800679e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80067a6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006944 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80067aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80067b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80067c2:	e065      	b.n	8006890 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80067c4:	697b      	ldr	r3, [r7, #20]
 80067c6:	ee07 3a90 	vmov	s15, r3
 80067ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067ce:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800694c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80067d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067d6:	4b59      	ldr	r3, [pc, #356]	@ (800693c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80067d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067de:	ee07 3a90 	vmov	s15, r3
 80067e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80067ea:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006944 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80067ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80067fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006802:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006806:	e043      	b.n	8006890 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006808:	697b      	ldr	r3, [r7, #20]
 800680a:	ee07 3a90 	vmov	s15, r3
 800680e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006812:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006950 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006816:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800681a:	4b48      	ldr	r3, [pc, #288]	@ (800693c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800681c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800681e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006822:	ee07 3a90 	vmov	s15, r3
 8006826:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800682a:	ed97 6a03 	vldr	s12, [r7, #12]
 800682e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006944 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006832:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006836:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800683a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800683e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006842:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006846:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800684a:	e021      	b.n	8006890 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800684c:	697b      	ldr	r3, [r7, #20]
 800684e:	ee07 3a90 	vmov	s15, r3
 8006852:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006856:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800694c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800685a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800685e:	4b37      	ldr	r3, [pc, #220]	@ (800693c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006860:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006862:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006866:	ee07 3a90 	vmov	s15, r3
 800686a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800686e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006872:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006944 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006876:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800687a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800687e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006882:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006886:	ee67 7a27 	vmul.f32	s15, s14, s15
 800688a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800688e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006890:	4b2a      	ldr	r3, [pc, #168]	@ (800693c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006892:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006894:	0a5b      	lsrs	r3, r3, #9
 8006896:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800689a:	ee07 3a90 	vmov	s15, r3
 800689e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068a2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80068a6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80068aa:	edd7 6a07 	vldr	s13, [r7, #28]
 80068ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80068b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80068b6:	ee17 2a90 	vmov	r2, s15
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80068be:	4b1f      	ldr	r3, [pc, #124]	@ (800693c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80068c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068c2:	0c1b      	lsrs	r3, r3, #16
 80068c4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80068c8:	ee07 3a90 	vmov	s15, r3
 80068cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068d0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80068d4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80068d8:	edd7 6a07 	vldr	s13, [r7, #28]
 80068dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80068e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80068e4:	ee17 2a90 	vmov	r2, s15
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80068ec:	4b13      	ldr	r3, [pc, #76]	@ (800693c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80068ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068f0:	0e1b      	lsrs	r3, r3, #24
 80068f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80068f6:	ee07 3a90 	vmov	s15, r3
 80068fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068fe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006902:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006906:	edd7 6a07 	vldr	s13, [r7, #28]
 800690a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800690e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006912:	ee17 2a90 	vmov	r2, s15
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800691a:	e008      	b.n	800692e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2200      	movs	r2, #0
 8006920:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2200      	movs	r2, #0
 8006926:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2200      	movs	r2, #0
 800692c:	609a      	str	r2, [r3, #8]
}
 800692e:	bf00      	nop
 8006930:	3724      	adds	r7, #36	@ 0x24
 8006932:	46bd      	mov	sp, r7
 8006934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006938:	4770      	bx	lr
 800693a:	bf00      	nop
 800693c:	58024400 	.word	0x58024400
 8006940:	03d09000 	.word	0x03d09000
 8006944:	46000000 	.word	0x46000000
 8006948:	4c742400 	.word	0x4c742400
 800694c:	4a742400 	.word	0x4a742400
 8006950:	4af42400 	.word	0x4af42400

08006954 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b084      	sub	sp, #16
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
 800695c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800695e:	2300      	movs	r3, #0
 8006960:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006962:	4b53      	ldr	r3, [pc, #332]	@ (8006ab0 <RCCEx_PLL2_Config+0x15c>)
 8006964:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006966:	f003 0303 	and.w	r3, r3, #3
 800696a:	2b03      	cmp	r3, #3
 800696c:	d101      	bne.n	8006972 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800696e:	2301      	movs	r3, #1
 8006970:	e099      	b.n	8006aa6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006972:	4b4f      	ldr	r3, [pc, #316]	@ (8006ab0 <RCCEx_PLL2_Config+0x15c>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	4a4e      	ldr	r2, [pc, #312]	@ (8006ab0 <RCCEx_PLL2_Config+0x15c>)
 8006978:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800697c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800697e:	f7fa fed1 	bl	8001724 <HAL_GetTick>
 8006982:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006984:	e008      	b.n	8006998 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006986:	f7fa fecd 	bl	8001724 <HAL_GetTick>
 800698a:	4602      	mov	r2, r0
 800698c:	68bb      	ldr	r3, [r7, #8]
 800698e:	1ad3      	subs	r3, r2, r3
 8006990:	2b02      	cmp	r3, #2
 8006992:	d901      	bls.n	8006998 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006994:	2303      	movs	r3, #3
 8006996:	e086      	b.n	8006aa6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006998:	4b45      	ldr	r3, [pc, #276]	@ (8006ab0 <RCCEx_PLL2_Config+0x15c>)
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d1f0      	bne.n	8006986 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80069a4:	4b42      	ldr	r3, [pc, #264]	@ (8006ab0 <RCCEx_PLL2_Config+0x15c>)
 80069a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069a8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	031b      	lsls	r3, r3, #12
 80069b2:	493f      	ldr	r1, [pc, #252]	@ (8006ab0 <RCCEx_PLL2_Config+0x15c>)
 80069b4:	4313      	orrs	r3, r2
 80069b6:	628b      	str	r3, [r1, #40]	@ 0x28
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	685b      	ldr	r3, [r3, #4]
 80069bc:	3b01      	subs	r3, #1
 80069be:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	689b      	ldr	r3, [r3, #8]
 80069c6:	3b01      	subs	r3, #1
 80069c8:	025b      	lsls	r3, r3, #9
 80069ca:	b29b      	uxth	r3, r3
 80069cc:	431a      	orrs	r2, r3
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	68db      	ldr	r3, [r3, #12]
 80069d2:	3b01      	subs	r3, #1
 80069d4:	041b      	lsls	r3, r3, #16
 80069d6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80069da:	431a      	orrs	r2, r3
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	691b      	ldr	r3, [r3, #16]
 80069e0:	3b01      	subs	r3, #1
 80069e2:	061b      	lsls	r3, r3, #24
 80069e4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80069e8:	4931      	ldr	r1, [pc, #196]	@ (8006ab0 <RCCEx_PLL2_Config+0x15c>)
 80069ea:	4313      	orrs	r3, r2
 80069ec:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80069ee:	4b30      	ldr	r3, [pc, #192]	@ (8006ab0 <RCCEx_PLL2_Config+0x15c>)
 80069f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069f2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	695b      	ldr	r3, [r3, #20]
 80069fa:	492d      	ldr	r1, [pc, #180]	@ (8006ab0 <RCCEx_PLL2_Config+0x15c>)
 80069fc:	4313      	orrs	r3, r2
 80069fe:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006a00:	4b2b      	ldr	r3, [pc, #172]	@ (8006ab0 <RCCEx_PLL2_Config+0x15c>)
 8006a02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a04:	f023 0220 	bic.w	r2, r3, #32
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	699b      	ldr	r3, [r3, #24]
 8006a0c:	4928      	ldr	r1, [pc, #160]	@ (8006ab0 <RCCEx_PLL2_Config+0x15c>)
 8006a0e:	4313      	orrs	r3, r2
 8006a10:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006a12:	4b27      	ldr	r3, [pc, #156]	@ (8006ab0 <RCCEx_PLL2_Config+0x15c>)
 8006a14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a16:	4a26      	ldr	r2, [pc, #152]	@ (8006ab0 <RCCEx_PLL2_Config+0x15c>)
 8006a18:	f023 0310 	bic.w	r3, r3, #16
 8006a1c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006a1e:	4b24      	ldr	r3, [pc, #144]	@ (8006ab0 <RCCEx_PLL2_Config+0x15c>)
 8006a20:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006a22:	4b24      	ldr	r3, [pc, #144]	@ (8006ab4 <RCCEx_PLL2_Config+0x160>)
 8006a24:	4013      	ands	r3, r2
 8006a26:	687a      	ldr	r2, [r7, #4]
 8006a28:	69d2      	ldr	r2, [r2, #28]
 8006a2a:	00d2      	lsls	r2, r2, #3
 8006a2c:	4920      	ldr	r1, [pc, #128]	@ (8006ab0 <RCCEx_PLL2_Config+0x15c>)
 8006a2e:	4313      	orrs	r3, r2
 8006a30:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006a32:	4b1f      	ldr	r3, [pc, #124]	@ (8006ab0 <RCCEx_PLL2_Config+0x15c>)
 8006a34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a36:	4a1e      	ldr	r2, [pc, #120]	@ (8006ab0 <RCCEx_PLL2_Config+0x15c>)
 8006a38:	f043 0310 	orr.w	r3, r3, #16
 8006a3c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d106      	bne.n	8006a52 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006a44:	4b1a      	ldr	r3, [pc, #104]	@ (8006ab0 <RCCEx_PLL2_Config+0x15c>)
 8006a46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a48:	4a19      	ldr	r2, [pc, #100]	@ (8006ab0 <RCCEx_PLL2_Config+0x15c>)
 8006a4a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006a4e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006a50:	e00f      	b.n	8006a72 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	2b01      	cmp	r3, #1
 8006a56:	d106      	bne.n	8006a66 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006a58:	4b15      	ldr	r3, [pc, #84]	@ (8006ab0 <RCCEx_PLL2_Config+0x15c>)
 8006a5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a5c:	4a14      	ldr	r2, [pc, #80]	@ (8006ab0 <RCCEx_PLL2_Config+0x15c>)
 8006a5e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006a62:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006a64:	e005      	b.n	8006a72 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006a66:	4b12      	ldr	r3, [pc, #72]	@ (8006ab0 <RCCEx_PLL2_Config+0x15c>)
 8006a68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a6a:	4a11      	ldr	r2, [pc, #68]	@ (8006ab0 <RCCEx_PLL2_Config+0x15c>)
 8006a6c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006a70:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006a72:	4b0f      	ldr	r3, [pc, #60]	@ (8006ab0 <RCCEx_PLL2_Config+0x15c>)
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	4a0e      	ldr	r2, [pc, #56]	@ (8006ab0 <RCCEx_PLL2_Config+0x15c>)
 8006a78:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006a7c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a7e:	f7fa fe51 	bl	8001724 <HAL_GetTick>
 8006a82:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006a84:	e008      	b.n	8006a98 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006a86:	f7fa fe4d 	bl	8001724 <HAL_GetTick>
 8006a8a:	4602      	mov	r2, r0
 8006a8c:	68bb      	ldr	r3, [r7, #8]
 8006a8e:	1ad3      	subs	r3, r2, r3
 8006a90:	2b02      	cmp	r3, #2
 8006a92:	d901      	bls.n	8006a98 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006a94:	2303      	movs	r3, #3
 8006a96:	e006      	b.n	8006aa6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006a98:	4b05      	ldr	r3, [pc, #20]	@ (8006ab0 <RCCEx_PLL2_Config+0x15c>)
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d0f0      	beq.n	8006a86 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006aa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	3710      	adds	r7, #16
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	bd80      	pop	{r7, pc}
 8006aae:	bf00      	nop
 8006ab0:	58024400 	.word	0x58024400
 8006ab4:	ffff0007 	.word	0xffff0007

08006ab8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b084      	sub	sp, #16
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
 8006ac0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006ac6:	4b53      	ldr	r3, [pc, #332]	@ (8006c14 <RCCEx_PLL3_Config+0x15c>)
 8006ac8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006aca:	f003 0303 	and.w	r3, r3, #3
 8006ace:	2b03      	cmp	r3, #3
 8006ad0:	d101      	bne.n	8006ad6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	e099      	b.n	8006c0a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006ad6:	4b4f      	ldr	r3, [pc, #316]	@ (8006c14 <RCCEx_PLL3_Config+0x15c>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	4a4e      	ldr	r2, [pc, #312]	@ (8006c14 <RCCEx_PLL3_Config+0x15c>)
 8006adc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006ae0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ae2:	f7fa fe1f 	bl	8001724 <HAL_GetTick>
 8006ae6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006ae8:	e008      	b.n	8006afc <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006aea:	f7fa fe1b 	bl	8001724 <HAL_GetTick>
 8006aee:	4602      	mov	r2, r0
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	1ad3      	subs	r3, r2, r3
 8006af4:	2b02      	cmp	r3, #2
 8006af6:	d901      	bls.n	8006afc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006af8:	2303      	movs	r3, #3
 8006afa:	e086      	b.n	8006c0a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006afc:	4b45      	ldr	r3, [pc, #276]	@ (8006c14 <RCCEx_PLL3_Config+0x15c>)
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d1f0      	bne.n	8006aea <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006b08:	4b42      	ldr	r3, [pc, #264]	@ (8006c14 <RCCEx_PLL3_Config+0x15c>)
 8006b0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b0c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	051b      	lsls	r3, r3, #20
 8006b16:	493f      	ldr	r1, [pc, #252]	@ (8006c14 <RCCEx_PLL3_Config+0x15c>)
 8006b18:	4313      	orrs	r3, r2
 8006b1a:	628b      	str	r3, [r1, #40]	@ 0x28
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	685b      	ldr	r3, [r3, #4]
 8006b20:	3b01      	subs	r3, #1
 8006b22:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	689b      	ldr	r3, [r3, #8]
 8006b2a:	3b01      	subs	r3, #1
 8006b2c:	025b      	lsls	r3, r3, #9
 8006b2e:	b29b      	uxth	r3, r3
 8006b30:	431a      	orrs	r2, r3
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	68db      	ldr	r3, [r3, #12]
 8006b36:	3b01      	subs	r3, #1
 8006b38:	041b      	lsls	r3, r3, #16
 8006b3a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006b3e:	431a      	orrs	r2, r3
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	691b      	ldr	r3, [r3, #16]
 8006b44:	3b01      	subs	r3, #1
 8006b46:	061b      	lsls	r3, r3, #24
 8006b48:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006b4c:	4931      	ldr	r1, [pc, #196]	@ (8006c14 <RCCEx_PLL3_Config+0x15c>)
 8006b4e:	4313      	orrs	r3, r2
 8006b50:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006b52:	4b30      	ldr	r3, [pc, #192]	@ (8006c14 <RCCEx_PLL3_Config+0x15c>)
 8006b54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b56:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	695b      	ldr	r3, [r3, #20]
 8006b5e:	492d      	ldr	r1, [pc, #180]	@ (8006c14 <RCCEx_PLL3_Config+0x15c>)
 8006b60:	4313      	orrs	r3, r2
 8006b62:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006b64:	4b2b      	ldr	r3, [pc, #172]	@ (8006c14 <RCCEx_PLL3_Config+0x15c>)
 8006b66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b68:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	699b      	ldr	r3, [r3, #24]
 8006b70:	4928      	ldr	r1, [pc, #160]	@ (8006c14 <RCCEx_PLL3_Config+0x15c>)
 8006b72:	4313      	orrs	r3, r2
 8006b74:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006b76:	4b27      	ldr	r3, [pc, #156]	@ (8006c14 <RCCEx_PLL3_Config+0x15c>)
 8006b78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b7a:	4a26      	ldr	r2, [pc, #152]	@ (8006c14 <RCCEx_PLL3_Config+0x15c>)
 8006b7c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006b80:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006b82:	4b24      	ldr	r3, [pc, #144]	@ (8006c14 <RCCEx_PLL3_Config+0x15c>)
 8006b84:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006b86:	4b24      	ldr	r3, [pc, #144]	@ (8006c18 <RCCEx_PLL3_Config+0x160>)
 8006b88:	4013      	ands	r3, r2
 8006b8a:	687a      	ldr	r2, [r7, #4]
 8006b8c:	69d2      	ldr	r2, [r2, #28]
 8006b8e:	00d2      	lsls	r2, r2, #3
 8006b90:	4920      	ldr	r1, [pc, #128]	@ (8006c14 <RCCEx_PLL3_Config+0x15c>)
 8006b92:	4313      	orrs	r3, r2
 8006b94:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006b96:	4b1f      	ldr	r3, [pc, #124]	@ (8006c14 <RCCEx_PLL3_Config+0x15c>)
 8006b98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b9a:	4a1e      	ldr	r2, [pc, #120]	@ (8006c14 <RCCEx_PLL3_Config+0x15c>)
 8006b9c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006ba0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d106      	bne.n	8006bb6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006ba8:	4b1a      	ldr	r3, [pc, #104]	@ (8006c14 <RCCEx_PLL3_Config+0x15c>)
 8006baa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bac:	4a19      	ldr	r2, [pc, #100]	@ (8006c14 <RCCEx_PLL3_Config+0x15c>)
 8006bae:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006bb2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006bb4:	e00f      	b.n	8006bd6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	2b01      	cmp	r3, #1
 8006bba:	d106      	bne.n	8006bca <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006bbc:	4b15      	ldr	r3, [pc, #84]	@ (8006c14 <RCCEx_PLL3_Config+0x15c>)
 8006bbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bc0:	4a14      	ldr	r2, [pc, #80]	@ (8006c14 <RCCEx_PLL3_Config+0x15c>)
 8006bc2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006bc6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006bc8:	e005      	b.n	8006bd6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006bca:	4b12      	ldr	r3, [pc, #72]	@ (8006c14 <RCCEx_PLL3_Config+0x15c>)
 8006bcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bce:	4a11      	ldr	r2, [pc, #68]	@ (8006c14 <RCCEx_PLL3_Config+0x15c>)
 8006bd0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006bd4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006bd6:	4b0f      	ldr	r3, [pc, #60]	@ (8006c14 <RCCEx_PLL3_Config+0x15c>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	4a0e      	ldr	r2, [pc, #56]	@ (8006c14 <RCCEx_PLL3_Config+0x15c>)
 8006bdc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006be0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006be2:	f7fa fd9f 	bl	8001724 <HAL_GetTick>
 8006be6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006be8:	e008      	b.n	8006bfc <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006bea:	f7fa fd9b 	bl	8001724 <HAL_GetTick>
 8006bee:	4602      	mov	r2, r0
 8006bf0:	68bb      	ldr	r3, [r7, #8]
 8006bf2:	1ad3      	subs	r3, r2, r3
 8006bf4:	2b02      	cmp	r3, #2
 8006bf6:	d901      	bls.n	8006bfc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006bf8:	2303      	movs	r3, #3
 8006bfa:	e006      	b.n	8006c0a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006bfc:	4b05      	ldr	r3, [pc, #20]	@ (8006c14 <RCCEx_PLL3_Config+0x15c>)
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d0f0      	beq.n	8006bea <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006c08:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	3710      	adds	r7, #16
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	bd80      	pop	{r7, pc}
 8006c12:	bf00      	nop
 8006c14:	58024400 	.word	0x58024400
 8006c18:	ffff0007 	.word	0xffff0007

08006c1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b082      	sub	sp, #8
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d101      	bne.n	8006c2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006c2a:	2301      	movs	r3, #1
 8006c2c:	e049      	b.n	8006cc2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006c34:	b2db      	uxtb	r3, r3
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d106      	bne.n	8006c48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f7fa fa84 	bl	8001150 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2202      	movs	r2, #2
 8006c4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681a      	ldr	r2, [r3, #0]
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	3304      	adds	r3, #4
 8006c58:	4619      	mov	r1, r3
 8006c5a:	4610      	mov	r0, r2
 8006c5c:	f001 f8a6 	bl	8007dac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2201      	movs	r2, #1
 8006c64:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2201      	movs	r2, #1
 8006c6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2201      	movs	r2, #1
 8006c74:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2201      	movs	r2, #1
 8006c7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2201      	movs	r2, #1
 8006c84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2201      	movs	r2, #1
 8006c8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2201      	movs	r2, #1
 8006c94:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2201      	movs	r2, #1
 8006c9c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2201      	movs	r2, #1
 8006ca4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2201      	movs	r2, #1
 8006cac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2201      	movs	r2, #1
 8006cb4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2201      	movs	r2, #1
 8006cbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006cc0:	2300      	movs	r3, #0
}
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	3708      	adds	r7, #8
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	bd80      	pop	{r7, pc}

08006cca <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006cca:	b580      	push	{r7, lr}
 8006ccc:	b082      	sub	sp, #8
 8006cce:	af00      	add	r7, sp, #0
 8006cd0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d101      	bne.n	8006cdc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006cd8:	2301      	movs	r3, #1
 8006cda:	e049      	b.n	8006d70 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006ce2:	b2db      	uxtb	r3, r3
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d106      	bne.n	8006cf6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2200      	movs	r2, #0
 8006cec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006cf0:	6878      	ldr	r0, [r7, #4]
 8006cf2:	f000 f841 	bl	8006d78 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2202      	movs	r2, #2
 8006cfa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681a      	ldr	r2, [r3, #0]
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	3304      	adds	r3, #4
 8006d06:	4619      	mov	r1, r3
 8006d08:	4610      	mov	r0, r2
 8006d0a:	f001 f84f 	bl	8007dac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2201      	movs	r2, #1
 8006d12:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2201      	movs	r2, #1
 8006d1a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2201      	movs	r2, #1
 8006d22:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2201      	movs	r2, #1
 8006d2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2201      	movs	r2, #1
 8006d32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2201      	movs	r2, #1
 8006d3a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2201      	movs	r2, #1
 8006d42:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2201      	movs	r2, #1
 8006d4a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2201      	movs	r2, #1
 8006d52:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2201      	movs	r2, #1
 8006d5a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2201      	movs	r2, #1
 8006d62:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	2201      	movs	r2, #1
 8006d6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006d6e:	2300      	movs	r3, #0
}
 8006d70:	4618      	mov	r0, r3
 8006d72:	3708      	adds	r7, #8
 8006d74:	46bd      	mov	sp, r7
 8006d76:	bd80      	pop	{r7, pc}

08006d78 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006d78:	b480      	push	{r7}
 8006d7a:	b083      	sub	sp, #12
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006d80:	bf00      	nop
 8006d82:	370c      	adds	r7, #12
 8006d84:	46bd      	mov	sp, r7
 8006d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8a:	4770      	bx	lr

08006d8c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b084      	sub	sp, #16
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
 8006d94:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d109      	bne.n	8006db0 <HAL_TIM_PWM_Start+0x24>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006da2:	b2db      	uxtb	r3, r3
 8006da4:	2b01      	cmp	r3, #1
 8006da6:	bf14      	ite	ne
 8006da8:	2301      	movne	r3, #1
 8006daa:	2300      	moveq	r3, #0
 8006dac:	b2db      	uxtb	r3, r3
 8006dae:	e03c      	b.n	8006e2a <HAL_TIM_PWM_Start+0x9e>
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	2b04      	cmp	r3, #4
 8006db4:	d109      	bne.n	8006dca <HAL_TIM_PWM_Start+0x3e>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006dbc:	b2db      	uxtb	r3, r3
 8006dbe:	2b01      	cmp	r3, #1
 8006dc0:	bf14      	ite	ne
 8006dc2:	2301      	movne	r3, #1
 8006dc4:	2300      	moveq	r3, #0
 8006dc6:	b2db      	uxtb	r3, r3
 8006dc8:	e02f      	b.n	8006e2a <HAL_TIM_PWM_Start+0x9e>
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	2b08      	cmp	r3, #8
 8006dce:	d109      	bne.n	8006de4 <HAL_TIM_PWM_Start+0x58>
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006dd6:	b2db      	uxtb	r3, r3
 8006dd8:	2b01      	cmp	r3, #1
 8006dda:	bf14      	ite	ne
 8006ddc:	2301      	movne	r3, #1
 8006dde:	2300      	moveq	r3, #0
 8006de0:	b2db      	uxtb	r3, r3
 8006de2:	e022      	b.n	8006e2a <HAL_TIM_PWM_Start+0x9e>
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	2b0c      	cmp	r3, #12
 8006de8:	d109      	bne.n	8006dfe <HAL_TIM_PWM_Start+0x72>
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006df0:	b2db      	uxtb	r3, r3
 8006df2:	2b01      	cmp	r3, #1
 8006df4:	bf14      	ite	ne
 8006df6:	2301      	movne	r3, #1
 8006df8:	2300      	moveq	r3, #0
 8006dfa:	b2db      	uxtb	r3, r3
 8006dfc:	e015      	b.n	8006e2a <HAL_TIM_PWM_Start+0x9e>
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	2b10      	cmp	r3, #16
 8006e02:	d109      	bne.n	8006e18 <HAL_TIM_PWM_Start+0x8c>
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006e0a:	b2db      	uxtb	r3, r3
 8006e0c:	2b01      	cmp	r3, #1
 8006e0e:	bf14      	ite	ne
 8006e10:	2301      	movne	r3, #1
 8006e12:	2300      	moveq	r3, #0
 8006e14:	b2db      	uxtb	r3, r3
 8006e16:	e008      	b.n	8006e2a <HAL_TIM_PWM_Start+0x9e>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006e1e:	b2db      	uxtb	r3, r3
 8006e20:	2b01      	cmp	r3, #1
 8006e22:	bf14      	ite	ne
 8006e24:	2301      	movne	r3, #1
 8006e26:	2300      	moveq	r3, #0
 8006e28:	b2db      	uxtb	r3, r3
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d001      	beq.n	8006e32 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006e2e:	2301      	movs	r3, #1
 8006e30:	e0a1      	b.n	8006f76 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d104      	bne.n	8006e42 <HAL_TIM_PWM_Start+0xb6>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2202      	movs	r2, #2
 8006e3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006e40:	e023      	b.n	8006e8a <HAL_TIM_PWM_Start+0xfe>
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	2b04      	cmp	r3, #4
 8006e46:	d104      	bne.n	8006e52 <HAL_TIM_PWM_Start+0xc6>
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2202      	movs	r2, #2
 8006e4c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006e50:	e01b      	b.n	8006e8a <HAL_TIM_PWM_Start+0xfe>
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	2b08      	cmp	r3, #8
 8006e56:	d104      	bne.n	8006e62 <HAL_TIM_PWM_Start+0xd6>
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2202      	movs	r2, #2
 8006e5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006e60:	e013      	b.n	8006e8a <HAL_TIM_PWM_Start+0xfe>
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	2b0c      	cmp	r3, #12
 8006e66:	d104      	bne.n	8006e72 <HAL_TIM_PWM_Start+0xe6>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2202      	movs	r2, #2
 8006e6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006e70:	e00b      	b.n	8006e8a <HAL_TIM_PWM_Start+0xfe>
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	2b10      	cmp	r3, #16
 8006e76:	d104      	bne.n	8006e82 <HAL_TIM_PWM_Start+0xf6>
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2202      	movs	r2, #2
 8006e7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006e80:	e003      	b.n	8006e8a <HAL_TIM_PWM_Start+0xfe>
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2202      	movs	r2, #2
 8006e86:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	2201      	movs	r2, #1
 8006e90:	6839      	ldr	r1, [r7, #0]
 8006e92:	4618      	mov	r0, r3
 8006e94:	f001 fcce 	bl	8008834 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	4a38      	ldr	r2, [pc, #224]	@ (8006f80 <HAL_TIM_PWM_Start+0x1f4>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d013      	beq.n	8006eca <HAL_TIM_PWM_Start+0x13e>
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	4a37      	ldr	r2, [pc, #220]	@ (8006f84 <HAL_TIM_PWM_Start+0x1f8>)
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d00e      	beq.n	8006eca <HAL_TIM_PWM_Start+0x13e>
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	4a35      	ldr	r2, [pc, #212]	@ (8006f88 <HAL_TIM_PWM_Start+0x1fc>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d009      	beq.n	8006eca <HAL_TIM_PWM_Start+0x13e>
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	4a34      	ldr	r2, [pc, #208]	@ (8006f8c <HAL_TIM_PWM_Start+0x200>)
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d004      	beq.n	8006eca <HAL_TIM_PWM_Start+0x13e>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	4a32      	ldr	r2, [pc, #200]	@ (8006f90 <HAL_TIM_PWM_Start+0x204>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d101      	bne.n	8006ece <HAL_TIM_PWM_Start+0x142>
 8006eca:	2301      	movs	r3, #1
 8006ecc:	e000      	b.n	8006ed0 <HAL_TIM_PWM_Start+0x144>
 8006ece:	2300      	movs	r3, #0
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d007      	beq.n	8006ee4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006ee2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	4a25      	ldr	r2, [pc, #148]	@ (8006f80 <HAL_TIM_PWM_Start+0x1f4>)
 8006eea:	4293      	cmp	r3, r2
 8006eec:	d022      	beq.n	8006f34 <HAL_TIM_PWM_Start+0x1a8>
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ef6:	d01d      	beq.n	8006f34 <HAL_TIM_PWM_Start+0x1a8>
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	4a25      	ldr	r2, [pc, #148]	@ (8006f94 <HAL_TIM_PWM_Start+0x208>)
 8006efe:	4293      	cmp	r3, r2
 8006f00:	d018      	beq.n	8006f34 <HAL_TIM_PWM_Start+0x1a8>
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	4a24      	ldr	r2, [pc, #144]	@ (8006f98 <HAL_TIM_PWM_Start+0x20c>)
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d013      	beq.n	8006f34 <HAL_TIM_PWM_Start+0x1a8>
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	4a22      	ldr	r2, [pc, #136]	@ (8006f9c <HAL_TIM_PWM_Start+0x210>)
 8006f12:	4293      	cmp	r3, r2
 8006f14:	d00e      	beq.n	8006f34 <HAL_TIM_PWM_Start+0x1a8>
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	4a1a      	ldr	r2, [pc, #104]	@ (8006f84 <HAL_TIM_PWM_Start+0x1f8>)
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d009      	beq.n	8006f34 <HAL_TIM_PWM_Start+0x1a8>
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	4a1e      	ldr	r2, [pc, #120]	@ (8006fa0 <HAL_TIM_PWM_Start+0x214>)
 8006f26:	4293      	cmp	r3, r2
 8006f28:	d004      	beq.n	8006f34 <HAL_TIM_PWM_Start+0x1a8>
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	4a16      	ldr	r2, [pc, #88]	@ (8006f88 <HAL_TIM_PWM_Start+0x1fc>)
 8006f30:	4293      	cmp	r3, r2
 8006f32:	d115      	bne.n	8006f60 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	689a      	ldr	r2, [r3, #8]
 8006f3a:	4b1a      	ldr	r3, [pc, #104]	@ (8006fa4 <HAL_TIM_PWM_Start+0x218>)
 8006f3c:	4013      	ands	r3, r2
 8006f3e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	2b06      	cmp	r3, #6
 8006f44:	d015      	beq.n	8006f72 <HAL_TIM_PWM_Start+0x1e6>
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006f4c:	d011      	beq.n	8006f72 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	681a      	ldr	r2, [r3, #0]
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f042 0201 	orr.w	r2, r2, #1
 8006f5c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f5e:	e008      	b.n	8006f72 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	681a      	ldr	r2, [r3, #0]
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f042 0201 	orr.w	r2, r2, #1
 8006f6e:	601a      	str	r2, [r3, #0]
 8006f70:	e000      	b.n	8006f74 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f72:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006f74:	2300      	movs	r3, #0
}
 8006f76:	4618      	mov	r0, r3
 8006f78:	3710      	adds	r7, #16
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bd80      	pop	{r7, pc}
 8006f7e:	bf00      	nop
 8006f80:	40010000 	.word	0x40010000
 8006f84:	40010400 	.word	0x40010400
 8006f88:	40014000 	.word	0x40014000
 8006f8c:	40014400 	.word	0x40014400
 8006f90:	40014800 	.word	0x40014800
 8006f94:	40000400 	.word	0x40000400
 8006f98:	40000800 	.word	0x40000800
 8006f9c:	40000c00 	.word	0x40000c00
 8006fa0:	40001800 	.word	0x40001800
 8006fa4:	00010007 	.word	0x00010007

08006fa8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b082      	sub	sp, #8
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d101      	bne.n	8006fba <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006fb6:	2301      	movs	r3, #1
 8006fb8:	e049      	b.n	800704e <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006fc0:	b2db      	uxtb	r3, r3
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d106      	bne.n	8006fd4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2200      	movs	r2, #0
 8006fca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006fce:	6878      	ldr	r0, [r7, #4]
 8006fd0:	f000 f841 	bl	8007056 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2202      	movs	r2, #2
 8006fd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681a      	ldr	r2, [r3, #0]
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	3304      	adds	r3, #4
 8006fe4:	4619      	mov	r1, r3
 8006fe6:	4610      	mov	r0, r2
 8006fe8:	f000 fee0 	bl	8007dac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2201      	movs	r2, #1
 8006ff0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2201      	movs	r2, #1
 8006ff8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2201      	movs	r2, #1
 8007000:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2201      	movs	r2, #1
 8007008:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2201      	movs	r2, #1
 8007010:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2201      	movs	r2, #1
 8007018:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2201      	movs	r2, #1
 8007020:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2201      	movs	r2, #1
 8007028:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2201      	movs	r2, #1
 8007030:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2201      	movs	r2, #1
 8007038:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2201      	movs	r2, #1
 8007040:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2201      	movs	r2, #1
 8007048:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800704c:	2300      	movs	r3, #0
}
 800704e:	4618      	mov	r0, r3
 8007050:	3708      	adds	r7, #8
 8007052:	46bd      	mov	sp, r7
 8007054:	bd80      	pop	{r7, pc}

08007056 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8007056:	b480      	push	{r7}
 8007058:	b083      	sub	sp, #12
 800705a:	af00      	add	r7, sp, #0
 800705c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800705e:	bf00      	nop
 8007060:	370c      	adds	r7, #12
 8007062:	46bd      	mov	sp, r7
 8007064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007068:	4770      	bx	lr
	...

0800706c <HAL_TIM_IC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b086      	sub	sp, #24
 8007070:	af00      	add	r7, sp, #0
 8007072:	60f8      	str	r0, [r7, #12]
 8007074:	60b9      	str	r1, [r7, #8]
 8007076:	607a      	str	r2, [r7, #4]
 8007078:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800707a:	2300      	movs	r3, #0
 800707c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800707e:	68bb      	ldr	r3, [r7, #8]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d104      	bne.n	800708e <HAL_TIM_IC_Start_DMA+0x22>
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800708a:	b2db      	uxtb	r3, r3
 800708c:	e023      	b.n	80070d6 <HAL_TIM_IC_Start_DMA+0x6a>
 800708e:	68bb      	ldr	r3, [r7, #8]
 8007090:	2b04      	cmp	r3, #4
 8007092:	d104      	bne.n	800709e <HAL_TIM_IC_Start_DMA+0x32>
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800709a:	b2db      	uxtb	r3, r3
 800709c:	e01b      	b.n	80070d6 <HAL_TIM_IC_Start_DMA+0x6a>
 800709e:	68bb      	ldr	r3, [r7, #8]
 80070a0:	2b08      	cmp	r3, #8
 80070a2:	d104      	bne.n	80070ae <HAL_TIM_IC_Start_DMA+0x42>
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80070aa:	b2db      	uxtb	r3, r3
 80070ac:	e013      	b.n	80070d6 <HAL_TIM_IC_Start_DMA+0x6a>
 80070ae:	68bb      	ldr	r3, [r7, #8]
 80070b0:	2b0c      	cmp	r3, #12
 80070b2:	d104      	bne.n	80070be <HAL_TIM_IC_Start_DMA+0x52>
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80070ba:	b2db      	uxtb	r3, r3
 80070bc:	e00b      	b.n	80070d6 <HAL_TIM_IC_Start_DMA+0x6a>
 80070be:	68bb      	ldr	r3, [r7, #8]
 80070c0:	2b10      	cmp	r3, #16
 80070c2:	d104      	bne.n	80070ce <HAL_TIM_IC_Start_DMA+0x62>
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80070ca:	b2db      	uxtb	r3, r3
 80070cc:	e003      	b.n	80070d6 <HAL_TIM_IC_Start_DMA+0x6a>
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80070d4:	b2db      	uxtb	r3, r3
 80070d6:	75bb      	strb	r3, [r7, #22]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d104      	bne.n	80070e8 <HAL_TIM_IC_Start_DMA+0x7c>
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80070e4:	b2db      	uxtb	r3, r3
 80070e6:	e013      	b.n	8007110 <HAL_TIM_IC_Start_DMA+0xa4>
 80070e8:	68bb      	ldr	r3, [r7, #8]
 80070ea:	2b04      	cmp	r3, #4
 80070ec:	d104      	bne.n	80070f8 <HAL_TIM_IC_Start_DMA+0x8c>
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80070f4:	b2db      	uxtb	r3, r3
 80070f6:	e00b      	b.n	8007110 <HAL_TIM_IC_Start_DMA+0xa4>
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	2b08      	cmp	r3, #8
 80070fc:	d104      	bne.n	8007108 <HAL_TIM_IC_Start_DMA+0x9c>
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8007104:	b2db      	uxtb	r3, r3
 8007106:	e003      	b.n	8007110 <HAL_TIM_IC_Start_DMA+0xa4>
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 800710e:	b2db      	uxtb	r3, r3
 8007110:	757b      	strb	r3, [r7, #21]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  /* Set the TIM channel state */
  if ((channel_state == HAL_TIM_CHANNEL_STATE_BUSY)
 8007112:	7dbb      	ldrb	r3, [r7, #22]
 8007114:	2b02      	cmp	r3, #2
 8007116:	d002      	beq.n	800711e <HAL_TIM_IC_Start_DMA+0xb2>
      || (complementary_channel_state == HAL_TIM_CHANNEL_STATE_BUSY))
 8007118:	7d7b      	ldrb	r3, [r7, #21]
 800711a:	2b02      	cmp	r3, #2
 800711c:	d101      	bne.n	8007122 <HAL_TIM_IC_Start_DMA+0xb6>
  {
    return HAL_BUSY;
 800711e:	2302      	movs	r3, #2
 8007120:	e15c      	b.n	80073dc <HAL_TIM_IC_Start_DMA+0x370>
  }
  else if ((channel_state == HAL_TIM_CHANNEL_STATE_READY)
 8007122:	7dbb      	ldrb	r3, [r7, #22]
 8007124:	2b01      	cmp	r3, #1
 8007126:	d153      	bne.n	80071d0 <HAL_TIM_IC_Start_DMA+0x164>
           && (complementary_channel_state == HAL_TIM_CHANNEL_STATE_READY))
 8007128:	7d7b      	ldrb	r3, [r7, #21]
 800712a:	2b01      	cmp	r3, #1
 800712c:	d150      	bne.n	80071d0 <HAL_TIM_IC_Start_DMA+0x164>
  {
    if ((pData == NULL) || (Length == 0U))
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d002      	beq.n	800713a <HAL_TIM_IC_Start_DMA+0xce>
 8007134:	887b      	ldrh	r3, [r7, #2]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d101      	bne.n	800713e <HAL_TIM_IC_Start_DMA+0xd2>
    {
      return HAL_ERROR;
 800713a:	2301      	movs	r3, #1
 800713c:	e14e      	b.n	80073dc <HAL_TIM_IC_Start_DMA+0x370>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800713e:	68bb      	ldr	r3, [r7, #8]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d104      	bne.n	800714e <HAL_TIM_IC_Start_DMA+0xe2>
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	2202      	movs	r2, #2
 8007148:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800714c:	e023      	b.n	8007196 <HAL_TIM_IC_Start_DMA+0x12a>
 800714e:	68bb      	ldr	r3, [r7, #8]
 8007150:	2b04      	cmp	r3, #4
 8007152:	d104      	bne.n	800715e <HAL_TIM_IC_Start_DMA+0xf2>
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	2202      	movs	r2, #2
 8007158:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800715c:	e01b      	b.n	8007196 <HAL_TIM_IC_Start_DMA+0x12a>
 800715e:	68bb      	ldr	r3, [r7, #8]
 8007160:	2b08      	cmp	r3, #8
 8007162:	d104      	bne.n	800716e <HAL_TIM_IC_Start_DMA+0x102>
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	2202      	movs	r2, #2
 8007168:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800716c:	e013      	b.n	8007196 <HAL_TIM_IC_Start_DMA+0x12a>
 800716e:	68bb      	ldr	r3, [r7, #8]
 8007170:	2b0c      	cmp	r3, #12
 8007172:	d104      	bne.n	800717e <HAL_TIM_IC_Start_DMA+0x112>
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	2202      	movs	r2, #2
 8007178:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800717c:	e00b      	b.n	8007196 <HAL_TIM_IC_Start_DMA+0x12a>
 800717e:	68bb      	ldr	r3, [r7, #8]
 8007180:	2b10      	cmp	r3, #16
 8007182:	d104      	bne.n	800718e <HAL_TIM_IC_Start_DMA+0x122>
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	2202      	movs	r2, #2
 8007188:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800718c:	e003      	b.n	8007196 <HAL_TIM_IC_Start_DMA+0x12a>
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	2202      	movs	r2, #2
 8007192:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007196:	68bb      	ldr	r3, [r7, #8]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d104      	bne.n	80071a6 <HAL_TIM_IC_Start_DMA+0x13a>
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	2202      	movs	r2, #2
 80071a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    if ((pData == NULL) || (Length == 0U))
 80071a4:	e016      	b.n	80071d4 <HAL_TIM_IC_Start_DMA+0x168>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80071a6:	68bb      	ldr	r3, [r7, #8]
 80071a8:	2b04      	cmp	r3, #4
 80071aa:	d104      	bne.n	80071b6 <HAL_TIM_IC_Start_DMA+0x14a>
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	2202      	movs	r2, #2
 80071b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    if ((pData == NULL) || (Length == 0U))
 80071b4:	e00e      	b.n	80071d4 <HAL_TIM_IC_Start_DMA+0x168>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80071b6:	68bb      	ldr	r3, [r7, #8]
 80071b8:	2b08      	cmp	r3, #8
 80071ba:	d104      	bne.n	80071c6 <HAL_TIM_IC_Start_DMA+0x15a>
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	2202      	movs	r2, #2
 80071c0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
    if ((pData == NULL) || (Length == 0U))
 80071c4:	e006      	b.n	80071d4 <HAL_TIM_IC_Start_DMA+0x168>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	2202      	movs	r2, #2
 80071ca:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
    if ((pData == NULL) || (Length == 0U))
 80071ce:	e001      	b.n	80071d4 <HAL_TIM_IC_Start_DMA+0x168>
    }
  }
  else
  {
    return HAL_ERROR;
 80071d0:	2301      	movs	r3, #1
 80071d2:	e103      	b.n	80073dc <HAL_TIM_IC_Start_DMA+0x370>
  }

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	2201      	movs	r2, #1
 80071da:	68b9      	ldr	r1, [r7, #8]
 80071dc:	4618      	mov	r0, r3
 80071de:	f001 fb29 	bl	8008834 <TIM_CCxChannelCmd>

  switch (Channel)
 80071e2:	68bb      	ldr	r3, [r7, #8]
 80071e4:	2b0c      	cmp	r3, #12
 80071e6:	f200 80ad 	bhi.w	8007344 <HAL_TIM_IC_Start_DMA+0x2d8>
 80071ea:	a201      	add	r2, pc, #4	@ (adr r2, 80071f0 <HAL_TIM_IC_Start_DMA+0x184>)
 80071ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071f0:	08007225 	.word	0x08007225
 80071f4:	08007345 	.word	0x08007345
 80071f8:	08007345 	.word	0x08007345
 80071fc:	08007345 	.word	0x08007345
 8007200:	0800726d 	.word	0x0800726d
 8007204:	08007345 	.word	0x08007345
 8007208:	08007345 	.word	0x08007345
 800720c:	08007345 	.word	0x08007345
 8007210:	080072b5 	.word	0x080072b5
 8007214:	08007345 	.word	0x08007345
 8007218:	08007345 	.word	0x08007345
 800721c:	08007345 	.word	0x08007345
 8007220:	080072fd 	.word	0x080072fd
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007228:	4a6e      	ldr	r2, [pc, #440]	@ (80073e4 <HAL_TIM_IC_Start_DMA+0x378>)
 800722a:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007230:	4a6d      	ldr	r2, [pc, #436]	@ (80073e8 <HAL_TIM_IC_Start_DMA+0x37c>)
 8007232:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007238:	4a6c      	ldr	r2, [pc, #432]	@ (80073ec <HAL_TIM_IC_Start_DMA+0x380>)
 800723a:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData,
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	3334      	adds	r3, #52	@ 0x34
 8007246:	4619      	mov	r1, r3
 8007248:	687a      	ldr	r2, [r7, #4]
 800724a:	887b      	ldrh	r3, [r7, #2]
 800724c:	f7fa ff38 	bl	80020c0 <HAL_DMA_Start_IT>
 8007250:	4603      	mov	r3, r0
 8007252:	2b00      	cmp	r3, #0
 8007254:	d001      	beq.n	800725a <HAL_TIM_IC_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007256:	2301      	movs	r3, #1
 8007258:	e0c0      	b.n	80073dc <HAL_TIM_IC_Start_DMA+0x370>
      }
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	68da      	ldr	r2, [r3, #12]
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007268:	60da      	str	r2, [r3, #12]
      break;
 800726a:	e06e      	b.n	800734a <HAL_TIM_IC_Start_DMA+0x2de>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007270:	4a5c      	ldr	r2, [pc, #368]	@ (80073e4 <HAL_TIM_IC_Start_DMA+0x378>)
 8007272:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007278:	4a5b      	ldr	r2, [pc, #364]	@ (80073e8 <HAL_TIM_IC_Start_DMA+0x37c>)
 800727a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007280:	4a5a      	ldr	r2, [pc, #360]	@ (80073ec <HAL_TIM_IC_Start_DMA+0x380>)
 8007282:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	3338      	adds	r3, #56	@ 0x38
 800728e:	4619      	mov	r1, r3
 8007290:	687a      	ldr	r2, [r7, #4]
 8007292:	887b      	ldrh	r3, [r7, #2]
 8007294:	f7fa ff14 	bl	80020c0 <HAL_DMA_Start_IT>
 8007298:	4603      	mov	r3, r0
 800729a:	2b00      	cmp	r3, #0
 800729c:	d001      	beq.n	80072a2 <HAL_TIM_IC_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800729e:	2301      	movs	r3, #1
 80072a0:	e09c      	b.n	80073dc <HAL_TIM_IC_Start_DMA+0x370>
      }
      /* Enable the TIM Capture/Compare 2  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	68da      	ldr	r2, [r3, #12]
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80072b0:	60da      	str	r2, [r3, #12]
      break;
 80072b2:	e04a      	b.n	800734a <HAL_TIM_IC_Start_DMA+0x2de>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072b8:	4a4a      	ldr	r2, [pc, #296]	@ (80073e4 <HAL_TIM_IC_Start_DMA+0x378>)
 80072ba:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072c0:	4a49      	ldr	r2, [pc, #292]	@ (80073e8 <HAL_TIM_IC_Start_DMA+0x37c>)
 80072c2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072c8:	4a48      	ldr	r2, [pc, #288]	@ (80073ec <HAL_TIM_IC_Start_DMA+0x380>)
 80072ca:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	333c      	adds	r3, #60	@ 0x3c
 80072d6:	4619      	mov	r1, r3
 80072d8:	687a      	ldr	r2, [r7, #4]
 80072da:	887b      	ldrh	r3, [r7, #2]
 80072dc:	f7fa fef0 	bl	80020c0 <HAL_DMA_Start_IT>
 80072e0:	4603      	mov	r3, r0
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d001      	beq.n	80072ea <HAL_TIM_IC_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80072e6:	2301      	movs	r3, #1
 80072e8:	e078      	b.n	80073dc <HAL_TIM_IC_Start_DMA+0x370>
      }
      /* Enable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	68da      	ldr	r2, [r3, #12]
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80072f8:	60da      	str	r2, [r3, #12]
      break;
 80072fa:	e026      	b.n	800734a <HAL_TIM_IC_Start_DMA+0x2de>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007300:	4a38      	ldr	r2, [pc, #224]	@ (80073e4 <HAL_TIM_IC_Start_DMA+0x378>)
 8007302:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007308:	4a37      	ldr	r2, [pc, #220]	@ (80073e8 <HAL_TIM_IC_Start_DMA+0x37c>)
 800730a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007310:	4a36      	ldr	r2, [pc, #216]	@ (80073ec <HAL_TIM_IC_Start_DMA+0x380>)
 8007312:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	3340      	adds	r3, #64	@ 0x40
 800731e:	4619      	mov	r1, r3
 8007320:	687a      	ldr	r2, [r7, #4]
 8007322:	887b      	ldrh	r3, [r7, #2]
 8007324:	f7fa fecc 	bl	80020c0 <HAL_DMA_Start_IT>
 8007328:	4603      	mov	r3, r0
 800732a:	2b00      	cmp	r3, #0
 800732c:	d001      	beq.n	8007332 <HAL_TIM_IC_Start_DMA+0x2c6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800732e:	2301      	movs	r3, #1
 8007330:	e054      	b.n	80073dc <HAL_TIM_IC_Start_DMA+0x370>
      }
      /* Enable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	68da      	ldr	r2, [r3, #12]
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007340:	60da      	str	r2, [r3, #12]
      break;
 8007342:	e002      	b.n	800734a <HAL_TIM_IC_Start_DMA+0x2de>
    }

    default:
      status = HAL_ERROR;
 8007344:	2301      	movs	r3, #1
 8007346:	75fb      	strb	r3, [r7, #23]
      break;
 8007348:	bf00      	nop
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	4a28      	ldr	r2, [pc, #160]	@ (80073f0 <HAL_TIM_IC_Start_DMA+0x384>)
 8007350:	4293      	cmp	r3, r2
 8007352:	d022      	beq.n	800739a <HAL_TIM_IC_Start_DMA+0x32e>
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800735c:	d01d      	beq.n	800739a <HAL_TIM_IC_Start_DMA+0x32e>
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	4a24      	ldr	r2, [pc, #144]	@ (80073f4 <HAL_TIM_IC_Start_DMA+0x388>)
 8007364:	4293      	cmp	r3, r2
 8007366:	d018      	beq.n	800739a <HAL_TIM_IC_Start_DMA+0x32e>
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	4a22      	ldr	r2, [pc, #136]	@ (80073f8 <HAL_TIM_IC_Start_DMA+0x38c>)
 800736e:	4293      	cmp	r3, r2
 8007370:	d013      	beq.n	800739a <HAL_TIM_IC_Start_DMA+0x32e>
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	4a21      	ldr	r2, [pc, #132]	@ (80073fc <HAL_TIM_IC_Start_DMA+0x390>)
 8007378:	4293      	cmp	r3, r2
 800737a:	d00e      	beq.n	800739a <HAL_TIM_IC_Start_DMA+0x32e>
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	4a1f      	ldr	r2, [pc, #124]	@ (8007400 <HAL_TIM_IC_Start_DMA+0x394>)
 8007382:	4293      	cmp	r3, r2
 8007384:	d009      	beq.n	800739a <HAL_TIM_IC_Start_DMA+0x32e>
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	4a1e      	ldr	r2, [pc, #120]	@ (8007404 <HAL_TIM_IC_Start_DMA+0x398>)
 800738c:	4293      	cmp	r3, r2
 800738e:	d004      	beq.n	800739a <HAL_TIM_IC_Start_DMA+0x32e>
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	4a1c      	ldr	r2, [pc, #112]	@ (8007408 <HAL_TIM_IC_Start_DMA+0x39c>)
 8007396:	4293      	cmp	r3, r2
 8007398:	d115      	bne.n	80073c6 <HAL_TIM_IC_Start_DMA+0x35a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	689a      	ldr	r2, [r3, #8]
 80073a0:	4b1a      	ldr	r3, [pc, #104]	@ (800740c <HAL_TIM_IC_Start_DMA+0x3a0>)
 80073a2:	4013      	ands	r3, r2
 80073a4:	613b      	str	r3, [r7, #16]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073a6:	693b      	ldr	r3, [r7, #16]
 80073a8:	2b06      	cmp	r3, #6
 80073aa:	d015      	beq.n	80073d8 <HAL_TIM_IC_Start_DMA+0x36c>
 80073ac:	693b      	ldr	r3, [r7, #16]
 80073ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80073b2:	d011      	beq.n	80073d8 <HAL_TIM_IC_Start_DMA+0x36c>
    {
      __HAL_TIM_ENABLE(htim);
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	681a      	ldr	r2, [r3, #0]
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f042 0201 	orr.w	r2, r2, #1
 80073c2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073c4:	e008      	b.n	80073d8 <HAL_TIM_IC_Start_DMA+0x36c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	681a      	ldr	r2, [r3, #0]
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f042 0201 	orr.w	r2, r2, #1
 80073d4:	601a      	str	r2, [r3, #0]
 80073d6:	e000      	b.n	80073da <HAL_TIM_IC_Start_DMA+0x36e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073d8:	bf00      	nop
  }

  /* Return function status */
  return status;
 80073da:	7dfb      	ldrb	r3, [r7, #23]
}
 80073dc:	4618      	mov	r0, r3
 80073de:	3718      	adds	r7, #24
 80073e0:	46bd      	mov	sp, r7
 80073e2:	bd80      	pop	{r7, pc}
 80073e4:	08007c7b 	.word	0x08007c7b
 80073e8:	08007d43 	.word	0x08007d43
 80073ec:	08007be9 	.word	0x08007be9
 80073f0:	40010000 	.word	0x40010000
 80073f4:	40000400 	.word	0x40000400
 80073f8:	40000800 	.word	0x40000800
 80073fc:	40000c00 	.word	0x40000c00
 8007400:	40010400 	.word	0x40010400
 8007404:	40001800 	.word	0x40001800
 8007408:	40014000 	.word	0x40014000
 800740c:	00010007 	.word	0x00010007

08007410 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b084      	sub	sp, #16
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	68db      	ldr	r3, [r3, #12]
 800741e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	691b      	ldr	r3, [r3, #16]
 8007426:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007428:	68bb      	ldr	r3, [r7, #8]
 800742a:	f003 0302 	and.w	r3, r3, #2
 800742e:	2b00      	cmp	r3, #0
 8007430:	d020      	beq.n	8007474 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	f003 0302 	and.w	r3, r3, #2
 8007438:	2b00      	cmp	r3, #0
 800743a:	d01b      	beq.n	8007474 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f06f 0202 	mvn.w	r2, #2
 8007444:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2201      	movs	r2, #1
 800744a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	699b      	ldr	r3, [r3, #24]
 8007452:	f003 0303 	and.w	r3, r3, #3
 8007456:	2b00      	cmp	r3, #0
 8007458:	d003      	beq.n	8007462 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800745a:	6878      	ldr	r0, [r7, #4]
 800745c:	f7f9 f8be 	bl	80005dc <HAL_TIM_IC_CaptureCallback>
 8007460:	e005      	b.n	800746e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007462:	6878      	ldr	r0, [r7, #4]
 8007464:	f000 fb8e 	bl	8007b84 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007468:	6878      	ldr	r0, [r7, #4]
 800746a:	f000 fb9f 	bl	8007bac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2200      	movs	r2, #0
 8007472:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	f003 0304 	and.w	r3, r3, #4
 800747a:	2b00      	cmp	r3, #0
 800747c:	d020      	beq.n	80074c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	f003 0304 	and.w	r3, r3, #4
 8007484:	2b00      	cmp	r3, #0
 8007486:	d01b      	beq.n	80074c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f06f 0204 	mvn.w	r2, #4
 8007490:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2202      	movs	r2, #2
 8007496:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	699b      	ldr	r3, [r3, #24]
 800749e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d003      	beq.n	80074ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80074a6:	6878      	ldr	r0, [r7, #4]
 80074a8:	f7f9 f898 	bl	80005dc <HAL_TIM_IC_CaptureCallback>
 80074ac:	e005      	b.n	80074ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80074ae:	6878      	ldr	r0, [r7, #4]
 80074b0:	f000 fb68 	bl	8007b84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074b4:	6878      	ldr	r0, [r7, #4]
 80074b6:	f000 fb79 	bl	8007bac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2200      	movs	r2, #0
 80074be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80074c0:	68bb      	ldr	r3, [r7, #8]
 80074c2:	f003 0308 	and.w	r3, r3, #8
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d020      	beq.n	800750c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	f003 0308 	and.w	r3, r3, #8
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d01b      	beq.n	800750c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f06f 0208 	mvn.w	r2, #8
 80074dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2204      	movs	r2, #4
 80074e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	69db      	ldr	r3, [r3, #28]
 80074ea:	f003 0303 	and.w	r3, r3, #3
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d003      	beq.n	80074fa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80074f2:	6878      	ldr	r0, [r7, #4]
 80074f4:	f7f9 f872 	bl	80005dc <HAL_TIM_IC_CaptureCallback>
 80074f8:	e005      	b.n	8007506 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80074fa:	6878      	ldr	r0, [r7, #4]
 80074fc:	f000 fb42 	bl	8007b84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007500:	6878      	ldr	r0, [r7, #4]
 8007502:	f000 fb53 	bl	8007bac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2200      	movs	r2, #0
 800750a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800750c:	68bb      	ldr	r3, [r7, #8]
 800750e:	f003 0310 	and.w	r3, r3, #16
 8007512:	2b00      	cmp	r3, #0
 8007514:	d020      	beq.n	8007558 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	f003 0310 	and.w	r3, r3, #16
 800751c:	2b00      	cmp	r3, #0
 800751e:	d01b      	beq.n	8007558 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f06f 0210 	mvn.w	r2, #16
 8007528:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	2208      	movs	r2, #8
 800752e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	69db      	ldr	r3, [r3, #28]
 8007536:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800753a:	2b00      	cmp	r3, #0
 800753c:	d003      	beq.n	8007546 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800753e:	6878      	ldr	r0, [r7, #4]
 8007540:	f7f9 f84c 	bl	80005dc <HAL_TIM_IC_CaptureCallback>
 8007544:	e005      	b.n	8007552 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007546:	6878      	ldr	r0, [r7, #4]
 8007548:	f000 fb1c 	bl	8007b84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800754c:	6878      	ldr	r0, [r7, #4]
 800754e:	f000 fb2d 	bl	8007bac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2200      	movs	r2, #0
 8007556:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	f003 0301 	and.w	r3, r3, #1
 800755e:	2b00      	cmp	r3, #0
 8007560:	d00c      	beq.n	800757c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	f003 0301 	and.w	r3, r3, #1
 8007568:	2b00      	cmp	r3, #0
 800756a:	d007      	beq.n	800757c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f06f 0201 	mvn.w	r2, #1
 8007574:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007576:	6878      	ldr	r0, [r7, #4]
 8007578:	f000 fafa 	bl	8007b70 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800757c:	68bb      	ldr	r3, [r7, #8]
 800757e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007582:	2b00      	cmp	r3, #0
 8007584:	d104      	bne.n	8007590 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007586:	68bb      	ldr	r3, [r7, #8]
 8007588:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800758c:	2b00      	cmp	r3, #0
 800758e:	d00c      	beq.n	80075aa <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007596:	2b00      	cmp	r3, #0
 8007598:	d007      	beq.n	80075aa <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80075a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80075a4:	6878      	ldr	r0, [r7, #4]
 80075a6:	f001 fa8f 	bl	8008ac8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80075aa:	68bb      	ldr	r3, [r7, #8]
 80075ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d00c      	beq.n	80075ce <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d007      	beq.n	80075ce <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80075c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80075c8:	6878      	ldr	r0, [r7, #4]
 80075ca:	f001 fa87 	bl	8008adc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80075ce:	68bb      	ldr	r3, [r7, #8]
 80075d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d00c      	beq.n	80075f2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d007      	beq.n	80075f2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80075ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80075ec:	6878      	ldr	r0, [r7, #4]
 80075ee:	f000 fae7 	bl	8007bc0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80075f2:	68bb      	ldr	r3, [r7, #8]
 80075f4:	f003 0320 	and.w	r3, r3, #32
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d00c      	beq.n	8007616 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	f003 0320 	and.w	r3, r3, #32
 8007602:	2b00      	cmp	r3, #0
 8007604:	d007      	beq.n	8007616 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f06f 0220 	mvn.w	r2, #32
 800760e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007610:	6878      	ldr	r0, [r7, #4]
 8007612:	f001 fa4f 	bl	8008ab4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007616:	bf00      	nop
 8007618:	3710      	adds	r7, #16
 800761a:	46bd      	mov	sp, r7
 800761c:	bd80      	pop	{r7, pc}

0800761e <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800761e:	b580      	push	{r7, lr}
 8007620:	b086      	sub	sp, #24
 8007622:	af00      	add	r7, sp, #0
 8007624:	60f8      	str	r0, [r7, #12]
 8007626:	60b9      	str	r1, [r7, #8]
 8007628:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800762a:	2300      	movs	r3, #0
 800762c:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007634:	2b01      	cmp	r3, #1
 8007636:	d101      	bne.n	800763c <HAL_TIM_IC_ConfigChannel+0x1e>
 8007638:	2302      	movs	r3, #2
 800763a:	e088      	b.n	800774e <HAL_TIM_IC_ConfigChannel+0x130>
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	2201      	movs	r2, #1
 8007640:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d11b      	bne.n	8007682 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800764e:	68bb      	ldr	r3, [r7, #8]
 8007650:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007652:	68bb      	ldr	r3, [r7, #8]
 8007654:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007656:	68bb      	ldr	r3, [r7, #8]
 8007658:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800765a:	f000 ff23 	bl	80084a4 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	699a      	ldr	r2, [r3, #24]
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f022 020c 	bic.w	r2, r2, #12
 800766c:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	6999      	ldr	r1, [r3, #24]
 8007674:	68bb      	ldr	r3, [r7, #8]
 8007676:	689a      	ldr	r2, [r3, #8]
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	430a      	orrs	r2, r1
 800767e:	619a      	str	r2, [r3, #24]
 8007680:	e060      	b.n	8007744 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	2b04      	cmp	r3, #4
 8007686:	d11c      	bne.n	80076c2 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800768c:	68bb      	ldr	r3, [r7, #8]
 800768e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007690:	68bb      	ldr	r3, [r7, #8]
 8007692:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8007698:	f000 ffa7 	bl	80085ea <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	699a      	ldr	r2, [r3, #24]
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80076aa:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	6999      	ldr	r1, [r3, #24]
 80076b2:	68bb      	ldr	r3, [r7, #8]
 80076b4:	689b      	ldr	r3, [r3, #8]
 80076b6:	021a      	lsls	r2, r3, #8
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	430a      	orrs	r2, r1
 80076be:	619a      	str	r2, [r3, #24]
 80076c0:	e040      	b.n	8007744 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2b08      	cmp	r3, #8
 80076c6:	d11b      	bne.n	8007700 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80076cc:	68bb      	ldr	r3, [r7, #8]
 80076ce:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80076d4:	68bb      	ldr	r3, [r7, #8]
 80076d6:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80076d8:	f000 fff4 	bl	80086c4 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	69da      	ldr	r2, [r3, #28]
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	f022 020c 	bic.w	r2, r2, #12
 80076ea:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	69d9      	ldr	r1, [r3, #28]
 80076f2:	68bb      	ldr	r3, [r7, #8]
 80076f4:	689a      	ldr	r2, [r3, #8]
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	430a      	orrs	r2, r1
 80076fc:	61da      	str	r2, [r3, #28]
 80076fe:	e021      	b.n	8007744 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2b0c      	cmp	r3, #12
 8007704:	d11c      	bne.n	8007740 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800770a:	68bb      	ldr	r3, [r7, #8]
 800770c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800770e:	68bb      	ldr	r3, [r7, #8]
 8007710:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007712:	68bb      	ldr	r3, [r7, #8]
 8007714:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8007716:	f001 f811 	bl	800873c <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	69da      	ldr	r2, [r3, #28]
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8007728:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	69d9      	ldr	r1, [r3, #28]
 8007730:	68bb      	ldr	r3, [r7, #8]
 8007732:	689b      	ldr	r3, [r3, #8]
 8007734:	021a      	lsls	r2, r3, #8
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	430a      	orrs	r2, r1
 800773c:	61da      	str	r2, [r3, #28]
 800773e:	e001      	b.n	8007744 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8007740:	2301      	movs	r3, #1
 8007742:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	2200      	movs	r2, #0
 8007748:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800774c:	7dfb      	ldrb	r3, [r7, #23]
}
 800774e:	4618      	mov	r0, r3
 8007750:	3718      	adds	r7, #24
 8007752:	46bd      	mov	sp, r7
 8007754:	bd80      	pop	{r7, pc}
	...

08007758 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b086      	sub	sp, #24
 800775c:	af00      	add	r7, sp, #0
 800775e:	60f8      	str	r0, [r7, #12]
 8007760:	60b9      	str	r1, [r7, #8]
 8007762:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007764:	2300      	movs	r3, #0
 8007766:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800776e:	2b01      	cmp	r3, #1
 8007770:	d101      	bne.n	8007776 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007772:	2302      	movs	r3, #2
 8007774:	e0ff      	b.n	8007976 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	2201      	movs	r2, #1
 800777a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	2b14      	cmp	r3, #20
 8007782:	f200 80f0 	bhi.w	8007966 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007786:	a201      	add	r2, pc, #4	@ (adr r2, 800778c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800778c:	080077e1 	.word	0x080077e1
 8007790:	08007967 	.word	0x08007967
 8007794:	08007967 	.word	0x08007967
 8007798:	08007967 	.word	0x08007967
 800779c:	08007821 	.word	0x08007821
 80077a0:	08007967 	.word	0x08007967
 80077a4:	08007967 	.word	0x08007967
 80077a8:	08007967 	.word	0x08007967
 80077ac:	08007863 	.word	0x08007863
 80077b0:	08007967 	.word	0x08007967
 80077b4:	08007967 	.word	0x08007967
 80077b8:	08007967 	.word	0x08007967
 80077bc:	080078a3 	.word	0x080078a3
 80077c0:	08007967 	.word	0x08007967
 80077c4:	08007967 	.word	0x08007967
 80077c8:	08007967 	.word	0x08007967
 80077cc:	080078e5 	.word	0x080078e5
 80077d0:	08007967 	.word	0x08007967
 80077d4:	08007967 	.word	0x08007967
 80077d8:	08007967 	.word	0x08007967
 80077dc:	08007925 	.word	0x08007925
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	68b9      	ldr	r1, [r7, #8]
 80077e6:	4618      	mov	r0, r3
 80077e8:	f000 fb86 	bl	8007ef8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	699a      	ldr	r2, [r3, #24]
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f042 0208 	orr.w	r2, r2, #8
 80077fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	699a      	ldr	r2, [r3, #24]
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f022 0204 	bic.w	r2, r2, #4
 800780a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	6999      	ldr	r1, [r3, #24]
 8007812:	68bb      	ldr	r3, [r7, #8]
 8007814:	691a      	ldr	r2, [r3, #16]
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	430a      	orrs	r2, r1
 800781c:	619a      	str	r2, [r3, #24]
      break;
 800781e:	e0a5      	b.n	800796c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	68b9      	ldr	r1, [r7, #8]
 8007826:	4618      	mov	r0, r3
 8007828:	f000 fbf6 	bl	8008018 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	699a      	ldr	r2, [r3, #24]
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800783a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	699a      	ldr	r2, [r3, #24]
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800784a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	6999      	ldr	r1, [r3, #24]
 8007852:	68bb      	ldr	r3, [r7, #8]
 8007854:	691b      	ldr	r3, [r3, #16]
 8007856:	021a      	lsls	r2, r3, #8
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	430a      	orrs	r2, r1
 800785e:	619a      	str	r2, [r3, #24]
      break;
 8007860:	e084      	b.n	800796c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	68b9      	ldr	r1, [r7, #8]
 8007868:	4618      	mov	r0, r3
 800786a:	f000 fc5f 	bl	800812c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	69da      	ldr	r2, [r3, #28]
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f042 0208 	orr.w	r2, r2, #8
 800787c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	69da      	ldr	r2, [r3, #28]
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f022 0204 	bic.w	r2, r2, #4
 800788c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	69d9      	ldr	r1, [r3, #28]
 8007894:	68bb      	ldr	r3, [r7, #8]
 8007896:	691a      	ldr	r2, [r3, #16]
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	430a      	orrs	r2, r1
 800789e:	61da      	str	r2, [r3, #28]
      break;
 80078a0:	e064      	b.n	800796c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	68b9      	ldr	r1, [r7, #8]
 80078a8:	4618      	mov	r0, r3
 80078aa:	f000 fcc7 	bl	800823c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	69da      	ldr	r2, [r3, #28]
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80078bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	69da      	ldr	r2, [r3, #28]
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80078cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	69d9      	ldr	r1, [r3, #28]
 80078d4:	68bb      	ldr	r3, [r7, #8]
 80078d6:	691b      	ldr	r3, [r3, #16]
 80078d8:	021a      	lsls	r2, r3, #8
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	430a      	orrs	r2, r1
 80078e0:	61da      	str	r2, [r3, #28]
      break;
 80078e2:	e043      	b.n	800796c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	68b9      	ldr	r1, [r7, #8]
 80078ea:	4618      	mov	r0, r3
 80078ec:	f000 fd10 	bl	8008310 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	f042 0208 	orr.w	r2, r2, #8
 80078fe:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f022 0204 	bic.w	r2, r2, #4
 800790e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8007916:	68bb      	ldr	r3, [r7, #8]
 8007918:	691a      	ldr	r2, [r3, #16]
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	430a      	orrs	r2, r1
 8007920:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8007922:	e023      	b.n	800796c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	68b9      	ldr	r1, [r7, #8]
 800792a:	4618      	mov	r0, r3
 800792c:	f000 fd54 	bl	80083d8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800793e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800794e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8007956:	68bb      	ldr	r3, [r7, #8]
 8007958:	691b      	ldr	r3, [r3, #16]
 800795a:	021a      	lsls	r2, r3, #8
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	430a      	orrs	r2, r1
 8007962:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8007964:	e002      	b.n	800796c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007966:	2301      	movs	r3, #1
 8007968:	75fb      	strb	r3, [r7, #23]
      break;
 800796a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	2200      	movs	r2, #0
 8007970:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007974:	7dfb      	ldrb	r3, [r7, #23]
}
 8007976:	4618      	mov	r0, r3
 8007978:	3718      	adds	r7, #24
 800797a:	46bd      	mov	sp, r7
 800797c:	bd80      	pop	{r7, pc}
 800797e:	bf00      	nop

08007980 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b084      	sub	sp, #16
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
 8007988:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800798a:	2300      	movs	r3, #0
 800798c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007994:	2b01      	cmp	r3, #1
 8007996:	d101      	bne.n	800799c <HAL_TIM_ConfigClockSource+0x1c>
 8007998:	2302      	movs	r3, #2
 800799a:	e0dc      	b.n	8007b56 <HAL_TIM_ConfigClockSource+0x1d6>
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2201      	movs	r2, #1
 80079a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2202      	movs	r2, #2
 80079a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	689b      	ldr	r3, [r3, #8]
 80079b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80079b4:	68ba      	ldr	r2, [r7, #8]
 80079b6:	4b6a      	ldr	r3, [pc, #424]	@ (8007b60 <HAL_TIM_ConfigClockSource+0x1e0>)
 80079b8:	4013      	ands	r3, r2
 80079ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80079bc:	68bb      	ldr	r3, [r7, #8]
 80079be:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80079c2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	68ba      	ldr	r2, [r7, #8]
 80079ca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	4a64      	ldr	r2, [pc, #400]	@ (8007b64 <HAL_TIM_ConfigClockSource+0x1e4>)
 80079d2:	4293      	cmp	r3, r2
 80079d4:	f000 80a9 	beq.w	8007b2a <HAL_TIM_ConfigClockSource+0x1aa>
 80079d8:	4a62      	ldr	r2, [pc, #392]	@ (8007b64 <HAL_TIM_ConfigClockSource+0x1e4>)
 80079da:	4293      	cmp	r3, r2
 80079dc:	f200 80ae 	bhi.w	8007b3c <HAL_TIM_ConfigClockSource+0x1bc>
 80079e0:	4a61      	ldr	r2, [pc, #388]	@ (8007b68 <HAL_TIM_ConfigClockSource+0x1e8>)
 80079e2:	4293      	cmp	r3, r2
 80079e4:	f000 80a1 	beq.w	8007b2a <HAL_TIM_ConfigClockSource+0x1aa>
 80079e8:	4a5f      	ldr	r2, [pc, #380]	@ (8007b68 <HAL_TIM_ConfigClockSource+0x1e8>)
 80079ea:	4293      	cmp	r3, r2
 80079ec:	f200 80a6 	bhi.w	8007b3c <HAL_TIM_ConfigClockSource+0x1bc>
 80079f0:	4a5e      	ldr	r2, [pc, #376]	@ (8007b6c <HAL_TIM_ConfigClockSource+0x1ec>)
 80079f2:	4293      	cmp	r3, r2
 80079f4:	f000 8099 	beq.w	8007b2a <HAL_TIM_ConfigClockSource+0x1aa>
 80079f8:	4a5c      	ldr	r2, [pc, #368]	@ (8007b6c <HAL_TIM_ConfigClockSource+0x1ec>)
 80079fa:	4293      	cmp	r3, r2
 80079fc:	f200 809e 	bhi.w	8007b3c <HAL_TIM_ConfigClockSource+0x1bc>
 8007a00:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007a04:	f000 8091 	beq.w	8007b2a <HAL_TIM_ConfigClockSource+0x1aa>
 8007a08:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007a0c:	f200 8096 	bhi.w	8007b3c <HAL_TIM_ConfigClockSource+0x1bc>
 8007a10:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007a14:	f000 8089 	beq.w	8007b2a <HAL_TIM_ConfigClockSource+0x1aa>
 8007a18:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007a1c:	f200 808e 	bhi.w	8007b3c <HAL_TIM_ConfigClockSource+0x1bc>
 8007a20:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007a24:	d03e      	beq.n	8007aa4 <HAL_TIM_ConfigClockSource+0x124>
 8007a26:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007a2a:	f200 8087 	bhi.w	8007b3c <HAL_TIM_ConfigClockSource+0x1bc>
 8007a2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007a32:	f000 8086 	beq.w	8007b42 <HAL_TIM_ConfigClockSource+0x1c2>
 8007a36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007a3a:	d87f      	bhi.n	8007b3c <HAL_TIM_ConfigClockSource+0x1bc>
 8007a3c:	2b70      	cmp	r3, #112	@ 0x70
 8007a3e:	d01a      	beq.n	8007a76 <HAL_TIM_ConfigClockSource+0xf6>
 8007a40:	2b70      	cmp	r3, #112	@ 0x70
 8007a42:	d87b      	bhi.n	8007b3c <HAL_TIM_ConfigClockSource+0x1bc>
 8007a44:	2b60      	cmp	r3, #96	@ 0x60
 8007a46:	d050      	beq.n	8007aea <HAL_TIM_ConfigClockSource+0x16a>
 8007a48:	2b60      	cmp	r3, #96	@ 0x60
 8007a4a:	d877      	bhi.n	8007b3c <HAL_TIM_ConfigClockSource+0x1bc>
 8007a4c:	2b50      	cmp	r3, #80	@ 0x50
 8007a4e:	d03c      	beq.n	8007aca <HAL_TIM_ConfigClockSource+0x14a>
 8007a50:	2b50      	cmp	r3, #80	@ 0x50
 8007a52:	d873      	bhi.n	8007b3c <HAL_TIM_ConfigClockSource+0x1bc>
 8007a54:	2b40      	cmp	r3, #64	@ 0x40
 8007a56:	d058      	beq.n	8007b0a <HAL_TIM_ConfigClockSource+0x18a>
 8007a58:	2b40      	cmp	r3, #64	@ 0x40
 8007a5a:	d86f      	bhi.n	8007b3c <HAL_TIM_ConfigClockSource+0x1bc>
 8007a5c:	2b30      	cmp	r3, #48	@ 0x30
 8007a5e:	d064      	beq.n	8007b2a <HAL_TIM_ConfigClockSource+0x1aa>
 8007a60:	2b30      	cmp	r3, #48	@ 0x30
 8007a62:	d86b      	bhi.n	8007b3c <HAL_TIM_ConfigClockSource+0x1bc>
 8007a64:	2b20      	cmp	r3, #32
 8007a66:	d060      	beq.n	8007b2a <HAL_TIM_ConfigClockSource+0x1aa>
 8007a68:	2b20      	cmp	r3, #32
 8007a6a:	d867      	bhi.n	8007b3c <HAL_TIM_ConfigClockSource+0x1bc>
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d05c      	beq.n	8007b2a <HAL_TIM_ConfigClockSource+0x1aa>
 8007a70:	2b10      	cmp	r3, #16
 8007a72:	d05a      	beq.n	8007b2a <HAL_TIM_ConfigClockSource+0x1aa>
 8007a74:	e062      	b.n	8007b3c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007a86:	f000 feb5 	bl	80087f4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	689b      	ldr	r3, [r3, #8]
 8007a90:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007a92:	68bb      	ldr	r3, [r7, #8]
 8007a94:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007a98:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	68ba      	ldr	r2, [r7, #8]
 8007aa0:	609a      	str	r2, [r3, #8]
      break;
 8007aa2:	e04f      	b.n	8007b44 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007ab4:	f000 fe9e 	bl	80087f4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	689a      	ldr	r2, [r3, #8]
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007ac6:	609a      	str	r2, [r3, #8]
      break;
 8007ac8:	e03c      	b.n	8007b44 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007ad2:	683b      	ldr	r3, [r7, #0]
 8007ad4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007ad6:	461a      	mov	r2, r3
 8007ad8:	f000 fd58 	bl	800858c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	2150      	movs	r1, #80	@ 0x50
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	f000 fe68 	bl	80087b8 <TIM_ITRx_SetConfig>
      break;
 8007ae8:	e02c      	b.n	8007b44 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007af6:	461a      	mov	r2, r3
 8007af8:	f000 fdb4 	bl	8008664 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	2160      	movs	r1, #96	@ 0x60
 8007b02:	4618      	mov	r0, r3
 8007b04:	f000 fe58 	bl	80087b8 <TIM_ITRx_SetConfig>
      break;
 8007b08:	e01c      	b.n	8007b44 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007b12:	683b      	ldr	r3, [r7, #0]
 8007b14:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007b16:	461a      	mov	r2, r3
 8007b18:	f000 fd38 	bl	800858c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	2140      	movs	r1, #64	@ 0x40
 8007b22:	4618      	mov	r0, r3
 8007b24:	f000 fe48 	bl	80087b8 <TIM_ITRx_SetConfig>
      break;
 8007b28:	e00c      	b.n	8007b44 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681a      	ldr	r2, [r3, #0]
 8007b2e:	683b      	ldr	r3, [r7, #0]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	4619      	mov	r1, r3
 8007b34:	4610      	mov	r0, r2
 8007b36:	f000 fe3f 	bl	80087b8 <TIM_ITRx_SetConfig>
      break;
 8007b3a:	e003      	b.n	8007b44 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8007b3c:	2301      	movs	r3, #1
 8007b3e:	73fb      	strb	r3, [r7, #15]
      break;
 8007b40:	e000      	b.n	8007b44 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8007b42:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2201      	movs	r2, #1
 8007b48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2200      	movs	r2, #0
 8007b50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007b54:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b56:	4618      	mov	r0, r3
 8007b58:	3710      	adds	r7, #16
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	bd80      	pop	{r7, pc}
 8007b5e:	bf00      	nop
 8007b60:	ffceff88 	.word	0xffceff88
 8007b64:	00100040 	.word	0x00100040
 8007b68:	00100030 	.word	0x00100030
 8007b6c:	00100020 	.word	0x00100020

08007b70 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007b70:	b480      	push	{r7}
 8007b72:	b083      	sub	sp, #12
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007b78:	bf00      	nop
 8007b7a:	370c      	adds	r7, #12
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b82:	4770      	bx	lr

08007b84 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007b84:	b480      	push	{r7}
 8007b86:	b083      	sub	sp, #12
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007b8c:	bf00      	nop
 8007b8e:	370c      	adds	r7, #12
 8007b90:	46bd      	mov	sp, r7
 8007b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b96:	4770      	bx	lr

08007b98 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007b98:	b480      	push	{r7}
 8007b9a:	b083      	sub	sp, #12
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8007ba0:	bf00      	nop
 8007ba2:	370c      	adds	r7, #12
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007baa:	4770      	bx	lr

08007bac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007bac:	b480      	push	{r7}
 8007bae:	b083      	sub	sp, #12
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007bb4:	bf00      	nop
 8007bb6:	370c      	adds	r7, #12
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bbe:	4770      	bx	lr

08007bc0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007bc0:	b480      	push	{r7}
 8007bc2:	b083      	sub	sp, #12
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007bc8:	bf00      	nop
 8007bca:	370c      	adds	r7, #12
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd2:	4770      	bx	lr

08007bd4 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8007bd4:	b480      	push	{r7}
 8007bd6:	b083      	sub	sp, #12
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8007bdc:	bf00      	nop
 8007bde:	370c      	adds	r7, #12
 8007be0:	46bd      	mov	sp, r7
 8007be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be6:	4770      	bx	lr

08007be8 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b084      	sub	sp, #16
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bf4:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bfa:	687a      	ldr	r2, [r7, #4]
 8007bfc:	429a      	cmp	r2, r3
 8007bfe:	d107      	bne.n	8007c10 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	2201      	movs	r2, #1
 8007c04:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	2201      	movs	r2, #1
 8007c0a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007c0e:	e02a      	b.n	8007c66 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c14:	687a      	ldr	r2, [r7, #4]
 8007c16:	429a      	cmp	r2, r3
 8007c18:	d107      	bne.n	8007c2a <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	2202      	movs	r2, #2
 8007c1e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	2201      	movs	r2, #1
 8007c24:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007c28:	e01d      	b.n	8007c66 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c2e:	687a      	ldr	r2, [r7, #4]
 8007c30:	429a      	cmp	r2, r3
 8007c32:	d107      	bne.n	8007c44 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	2204      	movs	r2, #4
 8007c38:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	2201      	movs	r2, #1
 8007c3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007c42:	e010      	b.n	8007c66 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c48:	687a      	ldr	r2, [r7, #4]
 8007c4a:	429a      	cmp	r2, r3
 8007c4c:	d107      	bne.n	8007c5e <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	2208      	movs	r2, #8
 8007c52:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	2201      	movs	r2, #1
 8007c58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007c5c:	e003      	b.n	8007c66 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	2201      	movs	r2, #1
 8007c62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8007c66:	68f8      	ldr	r0, [r7, #12]
 8007c68:	f7ff ffb4 	bl	8007bd4 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	2200      	movs	r2, #0
 8007c70:	771a      	strb	r2, [r3, #28]
}
 8007c72:	bf00      	nop
 8007c74:	3710      	adds	r7, #16
 8007c76:	46bd      	mov	sp, r7
 8007c78:	bd80      	pop	{r7, pc}

08007c7a <TIM_DMACaptureCplt>:
  * @brief  TIM DMA Capture complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma)
{
 8007c7a:	b580      	push	{r7, lr}
 8007c7c:	b084      	sub	sp, #16
 8007c7e:	af00      	add	r7, sp, #0
 8007c80:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c86:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c8c:	687a      	ldr	r2, [r7, #4]
 8007c8e:	429a      	cmp	r2, r3
 8007c90:	d10f      	bne.n	8007cb2 <TIM_DMACaptureCplt+0x38>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	2201      	movs	r2, #1
 8007c96:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	69db      	ldr	r3, [r3, #28]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d146      	bne.n	8007d2e <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	2201      	movs	r2, #1
 8007ca4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	2201      	movs	r2, #1
 8007cac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007cb0:	e03d      	b.n	8007d2e <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cb6:	687a      	ldr	r2, [r7, #4]
 8007cb8:	429a      	cmp	r2, r3
 8007cba:	d10f      	bne.n	8007cdc <TIM_DMACaptureCplt+0x62>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	2202      	movs	r2, #2
 8007cc0:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	69db      	ldr	r3, [r3, #28]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d131      	bne.n	8007d2e <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	2201      	movs	r2, #1
 8007cce:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	2201      	movs	r2, #1
 8007cd6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007cda:	e028      	b.n	8007d2e <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ce0:	687a      	ldr	r2, [r7, #4]
 8007ce2:	429a      	cmp	r2, r3
 8007ce4:	d10f      	bne.n	8007d06 <TIM_DMACaptureCplt+0x8c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	2204      	movs	r2, #4
 8007cea:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	69db      	ldr	r3, [r3, #28]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d11c      	bne.n	8007d2e <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	2201      	movs	r2, #1
 8007cf8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	2201      	movs	r2, #1
 8007d00:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007d04:	e013      	b.n	8007d2e <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d0a:	687a      	ldr	r2, [r7, #4]
 8007d0c:	429a      	cmp	r2, r3
 8007d0e:	d10e      	bne.n	8007d2e <TIM_DMACaptureCplt+0xb4>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	2208      	movs	r2, #8
 8007d14:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	69db      	ldr	r3, [r3, #28]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d107      	bne.n	8007d2e <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	2201      	movs	r2, #1
 8007d22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	2201      	movs	r2, #1
 8007d2a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureCallback(htim);
#else
  HAL_TIM_IC_CaptureCallback(htim);
 8007d2e:	68f8      	ldr	r0, [r7, #12]
 8007d30:	f7f8 fc54 	bl	80005dc <HAL_TIM_IC_CaptureCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	2200      	movs	r2, #0
 8007d38:	771a      	strb	r2, [r3, #28]
}
 8007d3a:	bf00      	nop
 8007d3c:	3710      	adds	r7, #16
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	bd80      	pop	{r7, pc}

08007d42 <TIM_DMACaptureHalfCplt>:
  * @brief  TIM DMA Capture half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007d42:	b580      	push	{r7, lr}
 8007d44:	b084      	sub	sp, #16
 8007d46:	af00      	add	r7, sp, #0
 8007d48:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d4e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d54:	687a      	ldr	r2, [r7, #4]
 8007d56:	429a      	cmp	r2, r3
 8007d58:	d103      	bne.n	8007d62 <TIM_DMACaptureHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	2201      	movs	r2, #1
 8007d5e:	771a      	strb	r2, [r3, #28]
 8007d60:	e019      	b.n	8007d96 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d66:	687a      	ldr	r2, [r7, #4]
 8007d68:	429a      	cmp	r2, r3
 8007d6a:	d103      	bne.n	8007d74 <TIM_DMACaptureHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	2202      	movs	r2, #2
 8007d70:	771a      	strb	r2, [r3, #28]
 8007d72:	e010      	b.n	8007d96 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d78:	687a      	ldr	r2, [r7, #4]
 8007d7a:	429a      	cmp	r2, r3
 8007d7c:	d103      	bne.n	8007d86 <TIM_DMACaptureHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	2204      	movs	r2, #4
 8007d82:	771a      	strb	r2, [r3, #28]
 8007d84:	e007      	b.n	8007d96 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d8a:	687a      	ldr	r2, [r7, #4]
 8007d8c:	429a      	cmp	r2, r3
 8007d8e:	d102      	bne.n	8007d96 <TIM_DMACaptureHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	2208      	movs	r2, #8
 8007d94:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureHalfCpltCallback(htim);
#else
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 8007d96:	68f8      	ldr	r0, [r7, #12]
 8007d98:	f7ff fefe 	bl	8007b98 <HAL_TIM_IC_CaptureHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	2200      	movs	r2, #0
 8007da0:	771a      	strb	r2, [r3, #28]
}
 8007da2:	bf00      	nop
 8007da4:	3710      	adds	r7, #16
 8007da6:	46bd      	mov	sp, r7
 8007da8:	bd80      	pop	{r7, pc}
	...

08007dac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007dac:	b480      	push	{r7}
 8007dae:	b085      	sub	sp, #20
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
 8007db4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	4a46      	ldr	r2, [pc, #280]	@ (8007ed8 <TIM_Base_SetConfig+0x12c>)
 8007dc0:	4293      	cmp	r3, r2
 8007dc2:	d013      	beq.n	8007dec <TIM_Base_SetConfig+0x40>
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007dca:	d00f      	beq.n	8007dec <TIM_Base_SetConfig+0x40>
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	4a43      	ldr	r2, [pc, #268]	@ (8007edc <TIM_Base_SetConfig+0x130>)
 8007dd0:	4293      	cmp	r3, r2
 8007dd2:	d00b      	beq.n	8007dec <TIM_Base_SetConfig+0x40>
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	4a42      	ldr	r2, [pc, #264]	@ (8007ee0 <TIM_Base_SetConfig+0x134>)
 8007dd8:	4293      	cmp	r3, r2
 8007dda:	d007      	beq.n	8007dec <TIM_Base_SetConfig+0x40>
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	4a41      	ldr	r2, [pc, #260]	@ (8007ee4 <TIM_Base_SetConfig+0x138>)
 8007de0:	4293      	cmp	r3, r2
 8007de2:	d003      	beq.n	8007dec <TIM_Base_SetConfig+0x40>
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	4a40      	ldr	r2, [pc, #256]	@ (8007ee8 <TIM_Base_SetConfig+0x13c>)
 8007de8:	4293      	cmp	r3, r2
 8007dea:	d108      	bne.n	8007dfe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007df2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007df4:	683b      	ldr	r3, [r7, #0]
 8007df6:	685b      	ldr	r3, [r3, #4]
 8007df8:	68fa      	ldr	r2, [r7, #12]
 8007dfa:	4313      	orrs	r3, r2
 8007dfc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	4a35      	ldr	r2, [pc, #212]	@ (8007ed8 <TIM_Base_SetConfig+0x12c>)
 8007e02:	4293      	cmp	r3, r2
 8007e04:	d01f      	beq.n	8007e46 <TIM_Base_SetConfig+0x9a>
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e0c:	d01b      	beq.n	8007e46 <TIM_Base_SetConfig+0x9a>
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	4a32      	ldr	r2, [pc, #200]	@ (8007edc <TIM_Base_SetConfig+0x130>)
 8007e12:	4293      	cmp	r3, r2
 8007e14:	d017      	beq.n	8007e46 <TIM_Base_SetConfig+0x9a>
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	4a31      	ldr	r2, [pc, #196]	@ (8007ee0 <TIM_Base_SetConfig+0x134>)
 8007e1a:	4293      	cmp	r3, r2
 8007e1c:	d013      	beq.n	8007e46 <TIM_Base_SetConfig+0x9a>
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	4a30      	ldr	r2, [pc, #192]	@ (8007ee4 <TIM_Base_SetConfig+0x138>)
 8007e22:	4293      	cmp	r3, r2
 8007e24:	d00f      	beq.n	8007e46 <TIM_Base_SetConfig+0x9a>
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	4a2f      	ldr	r2, [pc, #188]	@ (8007ee8 <TIM_Base_SetConfig+0x13c>)
 8007e2a:	4293      	cmp	r3, r2
 8007e2c:	d00b      	beq.n	8007e46 <TIM_Base_SetConfig+0x9a>
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	4a2e      	ldr	r2, [pc, #184]	@ (8007eec <TIM_Base_SetConfig+0x140>)
 8007e32:	4293      	cmp	r3, r2
 8007e34:	d007      	beq.n	8007e46 <TIM_Base_SetConfig+0x9a>
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	4a2d      	ldr	r2, [pc, #180]	@ (8007ef0 <TIM_Base_SetConfig+0x144>)
 8007e3a:	4293      	cmp	r3, r2
 8007e3c:	d003      	beq.n	8007e46 <TIM_Base_SetConfig+0x9a>
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	4a2c      	ldr	r2, [pc, #176]	@ (8007ef4 <TIM_Base_SetConfig+0x148>)
 8007e42:	4293      	cmp	r3, r2
 8007e44:	d108      	bne.n	8007e58 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007e4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	68db      	ldr	r3, [r3, #12]
 8007e52:	68fa      	ldr	r2, [r7, #12]
 8007e54:	4313      	orrs	r3, r2
 8007e56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	695b      	ldr	r3, [r3, #20]
 8007e62:	4313      	orrs	r3, r2
 8007e64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	68fa      	ldr	r2, [r7, #12]
 8007e6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	689a      	ldr	r2, [r3, #8]
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	681a      	ldr	r2, [r3, #0]
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	4a16      	ldr	r2, [pc, #88]	@ (8007ed8 <TIM_Base_SetConfig+0x12c>)
 8007e80:	4293      	cmp	r3, r2
 8007e82:	d00f      	beq.n	8007ea4 <TIM_Base_SetConfig+0xf8>
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	4a18      	ldr	r2, [pc, #96]	@ (8007ee8 <TIM_Base_SetConfig+0x13c>)
 8007e88:	4293      	cmp	r3, r2
 8007e8a:	d00b      	beq.n	8007ea4 <TIM_Base_SetConfig+0xf8>
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	4a17      	ldr	r2, [pc, #92]	@ (8007eec <TIM_Base_SetConfig+0x140>)
 8007e90:	4293      	cmp	r3, r2
 8007e92:	d007      	beq.n	8007ea4 <TIM_Base_SetConfig+0xf8>
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	4a16      	ldr	r2, [pc, #88]	@ (8007ef0 <TIM_Base_SetConfig+0x144>)
 8007e98:	4293      	cmp	r3, r2
 8007e9a:	d003      	beq.n	8007ea4 <TIM_Base_SetConfig+0xf8>
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	4a15      	ldr	r2, [pc, #84]	@ (8007ef4 <TIM_Base_SetConfig+0x148>)
 8007ea0:	4293      	cmp	r3, r2
 8007ea2:	d103      	bne.n	8007eac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	691a      	ldr	r2, [r3, #16]
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2201      	movs	r2, #1
 8007eb0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	691b      	ldr	r3, [r3, #16]
 8007eb6:	f003 0301 	and.w	r3, r3, #1
 8007eba:	2b01      	cmp	r3, #1
 8007ebc:	d105      	bne.n	8007eca <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	691b      	ldr	r3, [r3, #16]
 8007ec2:	f023 0201 	bic.w	r2, r3, #1
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	611a      	str	r2, [r3, #16]
  }
}
 8007eca:	bf00      	nop
 8007ecc:	3714      	adds	r7, #20
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed4:	4770      	bx	lr
 8007ed6:	bf00      	nop
 8007ed8:	40010000 	.word	0x40010000
 8007edc:	40000400 	.word	0x40000400
 8007ee0:	40000800 	.word	0x40000800
 8007ee4:	40000c00 	.word	0x40000c00
 8007ee8:	40010400 	.word	0x40010400
 8007eec:	40014000 	.word	0x40014000
 8007ef0:	40014400 	.word	0x40014400
 8007ef4:	40014800 	.word	0x40014800

08007ef8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007ef8:	b480      	push	{r7}
 8007efa:	b087      	sub	sp, #28
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
 8007f00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	6a1b      	ldr	r3, [r3, #32]
 8007f06:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	6a1b      	ldr	r3, [r3, #32]
 8007f0c:	f023 0201 	bic.w	r2, r3, #1
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	685b      	ldr	r3, [r3, #4]
 8007f18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	699b      	ldr	r3, [r3, #24]
 8007f1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007f20:	68fa      	ldr	r2, [r7, #12]
 8007f22:	4b37      	ldr	r3, [pc, #220]	@ (8008000 <TIM_OC1_SetConfig+0x108>)
 8007f24:	4013      	ands	r3, r2
 8007f26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	f023 0303 	bic.w	r3, r3, #3
 8007f2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	68fa      	ldr	r2, [r7, #12]
 8007f36:	4313      	orrs	r3, r2
 8007f38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007f3a:	697b      	ldr	r3, [r7, #20]
 8007f3c:	f023 0302 	bic.w	r3, r3, #2
 8007f40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007f42:	683b      	ldr	r3, [r7, #0]
 8007f44:	689b      	ldr	r3, [r3, #8]
 8007f46:	697a      	ldr	r2, [r7, #20]
 8007f48:	4313      	orrs	r3, r2
 8007f4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	4a2d      	ldr	r2, [pc, #180]	@ (8008004 <TIM_OC1_SetConfig+0x10c>)
 8007f50:	4293      	cmp	r3, r2
 8007f52:	d00f      	beq.n	8007f74 <TIM_OC1_SetConfig+0x7c>
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	4a2c      	ldr	r2, [pc, #176]	@ (8008008 <TIM_OC1_SetConfig+0x110>)
 8007f58:	4293      	cmp	r3, r2
 8007f5a:	d00b      	beq.n	8007f74 <TIM_OC1_SetConfig+0x7c>
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	4a2b      	ldr	r2, [pc, #172]	@ (800800c <TIM_OC1_SetConfig+0x114>)
 8007f60:	4293      	cmp	r3, r2
 8007f62:	d007      	beq.n	8007f74 <TIM_OC1_SetConfig+0x7c>
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	4a2a      	ldr	r2, [pc, #168]	@ (8008010 <TIM_OC1_SetConfig+0x118>)
 8007f68:	4293      	cmp	r3, r2
 8007f6a:	d003      	beq.n	8007f74 <TIM_OC1_SetConfig+0x7c>
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	4a29      	ldr	r2, [pc, #164]	@ (8008014 <TIM_OC1_SetConfig+0x11c>)
 8007f70:	4293      	cmp	r3, r2
 8007f72:	d10c      	bne.n	8007f8e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007f74:	697b      	ldr	r3, [r7, #20]
 8007f76:	f023 0308 	bic.w	r3, r3, #8
 8007f7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	68db      	ldr	r3, [r3, #12]
 8007f80:	697a      	ldr	r2, [r7, #20]
 8007f82:	4313      	orrs	r3, r2
 8007f84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007f86:	697b      	ldr	r3, [r7, #20]
 8007f88:	f023 0304 	bic.w	r3, r3, #4
 8007f8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	4a1c      	ldr	r2, [pc, #112]	@ (8008004 <TIM_OC1_SetConfig+0x10c>)
 8007f92:	4293      	cmp	r3, r2
 8007f94:	d00f      	beq.n	8007fb6 <TIM_OC1_SetConfig+0xbe>
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	4a1b      	ldr	r2, [pc, #108]	@ (8008008 <TIM_OC1_SetConfig+0x110>)
 8007f9a:	4293      	cmp	r3, r2
 8007f9c:	d00b      	beq.n	8007fb6 <TIM_OC1_SetConfig+0xbe>
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	4a1a      	ldr	r2, [pc, #104]	@ (800800c <TIM_OC1_SetConfig+0x114>)
 8007fa2:	4293      	cmp	r3, r2
 8007fa4:	d007      	beq.n	8007fb6 <TIM_OC1_SetConfig+0xbe>
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	4a19      	ldr	r2, [pc, #100]	@ (8008010 <TIM_OC1_SetConfig+0x118>)
 8007faa:	4293      	cmp	r3, r2
 8007fac:	d003      	beq.n	8007fb6 <TIM_OC1_SetConfig+0xbe>
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	4a18      	ldr	r2, [pc, #96]	@ (8008014 <TIM_OC1_SetConfig+0x11c>)
 8007fb2:	4293      	cmp	r3, r2
 8007fb4:	d111      	bne.n	8007fda <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007fb6:	693b      	ldr	r3, [r7, #16]
 8007fb8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007fbc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007fbe:	693b      	ldr	r3, [r7, #16]
 8007fc0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007fc4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007fc6:	683b      	ldr	r3, [r7, #0]
 8007fc8:	695b      	ldr	r3, [r3, #20]
 8007fca:	693a      	ldr	r2, [r7, #16]
 8007fcc:	4313      	orrs	r3, r2
 8007fce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	699b      	ldr	r3, [r3, #24]
 8007fd4:	693a      	ldr	r2, [r7, #16]
 8007fd6:	4313      	orrs	r3, r2
 8007fd8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	693a      	ldr	r2, [r7, #16]
 8007fde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	68fa      	ldr	r2, [r7, #12]
 8007fe4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	685a      	ldr	r2, [r3, #4]
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	697a      	ldr	r2, [r7, #20]
 8007ff2:	621a      	str	r2, [r3, #32]
}
 8007ff4:	bf00      	nop
 8007ff6:	371c      	adds	r7, #28
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffe:	4770      	bx	lr
 8008000:	fffeff8f 	.word	0xfffeff8f
 8008004:	40010000 	.word	0x40010000
 8008008:	40010400 	.word	0x40010400
 800800c:	40014000 	.word	0x40014000
 8008010:	40014400 	.word	0x40014400
 8008014:	40014800 	.word	0x40014800

08008018 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008018:	b480      	push	{r7}
 800801a:	b087      	sub	sp, #28
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
 8008020:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	6a1b      	ldr	r3, [r3, #32]
 8008026:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	6a1b      	ldr	r3, [r3, #32]
 800802c:	f023 0210 	bic.w	r2, r3, #16
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	685b      	ldr	r3, [r3, #4]
 8008038:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	699b      	ldr	r3, [r3, #24]
 800803e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008040:	68fa      	ldr	r2, [r7, #12]
 8008042:	4b34      	ldr	r3, [pc, #208]	@ (8008114 <TIM_OC2_SetConfig+0xfc>)
 8008044:	4013      	ands	r3, r2
 8008046:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800804e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008050:	683b      	ldr	r3, [r7, #0]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	021b      	lsls	r3, r3, #8
 8008056:	68fa      	ldr	r2, [r7, #12]
 8008058:	4313      	orrs	r3, r2
 800805a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800805c:	697b      	ldr	r3, [r7, #20]
 800805e:	f023 0320 	bic.w	r3, r3, #32
 8008062:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	689b      	ldr	r3, [r3, #8]
 8008068:	011b      	lsls	r3, r3, #4
 800806a:	697a      	ldr	r2, [r7, #20]
 800806c:	4313      	orrs	r3, r2
 800806e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	4a29      	ldr	r2, [pc, #164]	@ (8008118 <TIM_OC2_SetConfig+0x100>)
 8008074:	4293      	cmp	r3, r2
 8008076:	d003      	beq.n	8008080 <TIM_OC2_SetConfig+0x68>
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	4a28      	ldr	r2, [pc, #160]	@ (800811c <TIM_OC2_SetConfig+0x104>)
 800807c:	4293      	cmp	r3, r2
 800807e:	d10d      	bne.n	800809c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008080:	697b      	ldr	r3, [r7, #20]
 8008082:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008086:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008088:	683b      	ldr	r3, [r7, #0]
 800808a:	68db      	ldr	r3, [r3, #12]
 800808c:	011b      	lsls	r3, r3, #4
 800808e:	697a      	ldr	r2, [r7, #20]
 8008090:	4313      	orrs	r3, r2
 8008092:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008094:	697b      	ldr	r3, [r7, #20]
 8008096:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800809a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	4a1e      	ldr	r2, [pc, #120]	@ (8008118 <TIM_OC2_SetConfig+0x100>)
 80080a0:	4293      	cmp	r3, r2
 80080a2:	d00f      	beq.n	80080c4 <TIM_OC2_SetConfig+0xac>
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	4a1d      	ldr	r2, [pc, #116]	@ (800811c <TIM_OC2_SetConfig+0x104>)
 80080a8:	4293      	cmp	r3, r2
 80080aa:	d00b      	beq.n	80080c4 <TIM_OC2_SetConfig+0xac>
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	4a1c      	ldr	r2, [pc, #112]	@ (8008120 <TIM_OC2_SetConfig+0x108>)
 80080b0:	4293      	cmp	r3, r2
 80080b2:	d007      	beq.n	80080c4 <TIM_OC2_SetConfig+0xac>
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	4a1b      	ldr	r2, [pc, #108]	@ (8008124 <TIM_OC2_SetConfig+0x10c>)
 80080b8:	4293      	cmp	r3, r2
 80080ba:	d003      	beq.n	80080c4 <TIM_OC2_SetConfig+0xac>
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	4a1a      	ldr	r2, [pc, #104]	@ (8008128 <TIM_OC2_SetConfig+0x110>)
 80080c0:	4293      	cmp	r3, r2
 80080c2:	d113      	bne.n	80080ec <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80080c4:	693b      	ldr	r3, [r7, #16]
 80080c6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80080ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80080cc:	693b      	ldr	r3, [r7, #16]
 80080ce:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80080d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80080d4:	683b      	ldr	r3, [r7, #0]
 80080d6:	695b      	ldr	r3, [r3, #20]
 80080d8:	009b      	lsls	r3, r3, #2
 80080da:	693a      	ldr	r2, [r7, #16]
 80080dc:	4313      	orrs	r3, r2
 80080de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80080e0:	683b      	ldr	r3, [r7, #0]
 80080e2:	699b      	ldr	r3, [r3, #24]
 80080e4:	009b      	lsls	r3, r3, #2
 80080e6:	693a      	ldr	r2, [r7, #16]
 80080e8:	4313      	orrs	r3, r2
 80080ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	693a      	ldr	r2, [r7, #16]
 80080f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	68fa      	ldr	r2, [r7, #12]
 80080f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	685a      	ldr	r2, [r3, #4]
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	697a      	ldr	r2, [r7, #20]
 8008104:	621a      	str	r2, [r3, #32]
}
 8008106:	bf00      	nop
 8008108:	371c      	adds	r7, #28
 800810a:	46bd      	mov	sp, r7
 800810c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008110:	4770      	bx	lr
 8008112:	bf00      	nop
 8008114:	feff8fff 	.word	0xfeff8fff
 8008118:	40010000 	.word	0x40010000
 800811c:	40010400 	.word	0x40010400
 8008120:	40014000 	.word	0x40014000
 8008124:	40014400 	.word	0x40014400
 8008128:	40014800 	.word	0x40014800

0800812c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800812c:	b480      	push	{r7}
 800812e:	b087      	sub	sp, #28
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
 8008134:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6a1b      	ldr	r3, [r3, #32]
 800813a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	6a1b      	ldr	r3, [r3, #32]
 8008140:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	685b      	ldr	r3, [r3, #4]
 800814c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	69db      	ldr	r3, [r3, #28]
 8008152:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008154:	68fa      	ldr	r2, [r7, #12]
 8008156:	4b33      	ldr	r3, [pc, #204]	@ (8008224 <TIM_OC3_SetConfig+0xf8>)
 8008158:	4013      	ands	r3, r2
 800815a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	f023 0303 	bic.w	r3, r3, #3
 8008162:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	68fa      	ldr	r2, [r7, #12]
 800816a:	4313      	orrs	r3, r2
 800816c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800816e:	697b      	ldr	r3, [r7, #20]
 8008170:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008174:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008176:	683b      	ldr	r3, [r7, #0]
 8008178:	689b      	ldr	r3, [r3, #8]
 800817a:	021b      	lsls	r3, r3, #8
 800817c:	697a      	ldr	r2, [r7, #20]
 800817e:	4313      	orrs	r3, r2
 8008180:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	4a28      	ldr	r2, [pc, #160]	@ (8008228 <TIM_OC3_SetConfig+0xfc>)
 8008186:	4293      	cmp	r3, r2
 8008188:	d003      	beq.n	8008192 <TIM_OC3_SetConfig+0x66>
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	4a27      	ldr	r2, [pc, #156]	@ (800822c <TIM_OC3_SetConfig+0x100>)
 800818e:	4293      	cmp	r3, r2
 8008190:	d10d      	bne.n	80081ae <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008192:	697b      	ldr	r3, [r7, #20]
 8008194:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008198:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	68db      	ldr	r3, [r3, #12]
 800819e:	021b      	lsls	r3, r3, #8
 80081a0:	697a      	ldr	r2, [r7, #20]
 80081a2:	4313      	orrs	r3, r2
 80081a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80081a6:	697b      	ldr	r3, [r7, #20]
 80081a8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80081ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	4a1d      	ldr	r2, [pc, #116]	@ (8008228 <TIM_OC3_SetConfig+0xfc>)
 80081b2:	4293      	cmp	r3, r2
 80081b4:	d00f      	beq.n	80081d6 <TIM_OC3_SetConfig+0xaa>
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	4a1c      	ldr	r2, [pc, #112]	@ (800822c <TIM_OC3_SetConfig+0x100>)
 80081ba:	4293      	cmp	r3, r2
 80081bc:	d00b      	beq.n	80081d6 <TIM_OC3_SetConfig+0xaa>
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	4a1b      	ldr	r2, [pc, #108]	@ (8008230 <TIM_OC3_SetConfig+0x104>)
 80081c2:	4293      	cmp	r3, r2
 80081c4:	d007      	beq.n	80081d6 <TIM_OC3_SetConfig+0xaa>
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	4a1a      	ldr	r2, [pc, #104]	@ (8008234 <TIM_OC3_SetConfig+0x108>)
 80081ca:	4293      	cmp	r3, r2
 80081cc:	d003      	beq.n	80081d6 <TIM_OC3_SetConfig+0xaa>
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	4a19      	ldr	r2, [pc, #100]	@ (8008238 <TIM_OC3_SetConfig+0x10c>)
 80081d2:	4293      	cmp	r3, r2
 80081d4:	d113      	bne.n	80081fe <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80081d6:	693b      	ldr	r3, [r7, #16]
 80081d8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80081dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80081de:	693b      	ldr	r3, [r7, #16]
 80081e0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80081e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80081e6:	683b      	ldr	r3, [r7, #0]
 80081e8:	695b      	ldr	r3, [r3, #20]
 80081ea:	011b      	lsls	r3, r3, #4
 80081ec:	693a      	ldr	r2, [r7, #16]
 80081ee:	4313      	orrs	r3, r2
 80081f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	699b      	ldr	r3, [r3, #24]
 80081f6:	011b      	lsls	r3, r3, #4
 80081f8:	693a      	ldr	r2, [r7, #16]
 80081fa:	4313      	orrs	r3, r2
 80081fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	693a      	ldr	r2, [r7, #16]
 8008202:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	68fa      	ldr	r2, [r7, #12]
 8008208:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	685a      	ldr	r2, [r3, #4]
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	697a      	ldr	r2, [r7, #20]
 8008216:	621a      	str	r2, [r3, #32]
}
 8008218:	bf00      	nop
 800821a:	371c      	adds	r7, #28
 800821c:	46bd      	mov	sp, r7
 800821e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008222:	4770      	bx	lr
 8008224:	fffeff8f 	.word	0xfffeff8f
 8008228:	40010000 	.word	0x40010000
 800822c:	40010400 	.word	0x40010400
 8008230:	40014000 	.word	0x40014000
 8008234:	40014400 	.word	0x40014400
 8008238:	40014800 	.word	0x40014800

0800823c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800823c:	b480      	push	{r7}
 800823e:	b087      	sub	sp, #28
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
 8008244:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	6a1b      	ldr	r3, [r3, #32]
 800824a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	6a1b      	ldr	r3, [r3, #32]
 8008250:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	685b      	ldr	r3, [r3, #4]
 800825c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	69db      	ldr	r3, [r3, #28]
 8008262:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008264:	68fa      	ldr	r2, [r7, #12]
 8008266:	4b24      	ldr	r3, [pc, #144]	@ (80082f8 <TIM_OC4_SetConfig+0xbc>)
 8008268:	4013      	ands	r3, r2
 800826a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008272:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008274:	683b      	ldr	r3, [r7, #0]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	021b      	lsls	r3, r3, #8
 800827a:	68fa      	ldr	r2, [r7, #12]
 800827c:	4313      	orrs	r3, r2
 800827e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008280:	693b      	ldr	r3, [r7, #16]
 8008282:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008286:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	689b      	ldr	r3, [r3, #8]
 800828c:	031b      	lsls	r3, r3, #12
 800828e:	693a      	ldr	r2, [r7, #16]
 8008290:	4313      	orrs	r3, r2
 8008292:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	4a19      	ldr	r2, [pc, #100]	@ (80082fc <TIM_OC4_SetConfig+0xc0>)
 8008298:	4293      	cmp	r3, r2
 800829a:	d00f      	beq.n	80082bc <TIM_OC4_SetConfig+0x80>
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	4a18      	ldr	r2, [pc, #96]	@ (8008300 <TIM_OC4_SetConfig+0xc4>)
 80082a0:	4293      	cmp	r3, r2
 80082a2:	d00b      	beq.n	80082bc <TIM_OC4_SetConfig+0x80>
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	4a17      	ldr	r2, [pc, #92]	@ (8008304 <TIM_OC4_SetConfig+0xc8>)
 80082a8:	4293      	cmp	r3, r2
 80082aa:	d007      	beq.n	80082bc <TIM_OC4_SetConfig+0x80>
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	4a16      	ldr	r2, [pc, #88]	@ (8008308 <TIM_OC4_SetConfig+0xcc>)
 80082b0:	4293      	cmp	r3, r2
 80082b2:	d003      	beq.n	80082bc <TIM_OC4_SetConfig+0x80>
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	4a15      	ldr	r2, [pc, #84]	@ (800830c <TIM_OC4_SetConfig+0xd0>)
 80082b8:	4293      	cmp	r3, r2
 80082ba:	d109      	bne.n	80082d0 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80082bc:	697b      	ldr	r3, [r7, #20]
 80082be:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80082c2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	695b      	ldr	r3, [r3, #20]
 80082c8:	019b      	lsls	r3, r3, #6
 80082ca:	697a      	ldr	r2, [r7, #20]
 80082cc:	4313      	orrs	r3, r2
 80082ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	697a      	ldr	r2, [r7, #20]
 80082d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	68fa      	ldr	r2, [r7, #12]
 80082da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80082dc:	683b      	ldr	r3, [r7, #0]
 80082de:	685a      	ldr	r2, [r3, #4]
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	693a      	ldr	r2, [r7, #16]
 80082e8:	621a      	str	r2, [r3, #32]
}
 80082ea:	bf00      	nop
 80082ec:	371c      	adds	r7, #28
 80082ee:	46bd      	mov	sp, r7
 80082f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f4:	4770      	bx	lr
 80082f6:	bf00      	nop
 80082f8:	feff8fff 	.word	0xfeff8fff
 80082fc:	40010000 	.word	0x40010000
 8008300:	40010400 	.word	0x40010400
 8008304:	40014000 	.word	0x40014000
 8008308:	40014400 	.word	0x40014400
 800830c:	40014800 	.word	0x40014800

08008310 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008310:	b480      	push	{r7}
 8008312:	b087      	sub	sp, #28
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
 8008318:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	6a1b      	ldr	r3, [r3, #32]
 800831e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	6a1b      	ldr	r3, [r3, #32]
 8008324:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	685b      	ldr	r3, [r3, #4]
 8008330:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008336:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008338:	68fa      	ldr	r2, [r7, #12]
 800833a:	4b21      	ldr	r3, [pc, #132]	@ (80083c0 <TIM_OC5_SetConfig+0xb0>)
 800833c:	4013      	ands	r3, r2
 800833e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	68fa      	ldr	r2, [r7, #12]
 8008346:	4313      	orrs	r3, r2
 8008348:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800834a:	693b      	ldr	r3, [r7, #16]
 800834c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8008350:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008352:	683b      	ldr	r3, [r7, #0]
 8008354:	689b      	ldr	r3, [r3, #8]
 8008356:	041b      	lsls	r3, r3, #16
 8008358:	693a      	ldr	r2, [r7, #16]
 800835a:	4313      	orrs	r3, r2
 800835c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	4a18      	ldr	r2, [pc, #96]	@ (80083c4 <TIM_OC5_SetConfig+0xb4>)
 8008362:	4293      	cmp	r3, r2
 8008364:	d00f      	beq.n	8008386 <TIM_OC5_SetConfig+0x76>
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	4a17      	ldr	r2, [pc, #92]	@ (80083c8 <TIM_OC5_SetConfig+0xb8>)
 800836a:	4293      	cmp	r3, r2
 800836c:	d00b      	beq.n	8008386 <TIM_OC5_SetConfig+0x76>
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	4a16      	ldr	r2, [pc, #88]	@ (80083cc <TIM_OC5_SetConfig+0xbc>)
 8008372:	4293      	cmp	r3, r2
 8008374:	d007      	beq.n	8008386 <TIM_OC5_SetConfig+0x76>
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	4a15      	ldr	r2, [pc, #84]	@ (80083d0 <TIM_OC5_SetConfig+0xc0>)
 800837a:	4293      	cmp	r3, r2
 800837c:	d003      	beq.n	8008386 <TIM_OC5_SetConfig+0x76>
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	4a14      	ldr	r2, [pc, #80]	@ (80083d4 <TIM_OC5_SetConfig+0xc4>)
 8008382:	4293      	cmp	r3, r2
 8008384:	d109      	bne.n	800839a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008386:	697b      	ldr	r3, [r7, #20]
 8008388:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800838c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800838e:	683b      	ldr	r3, [r7, #0]
 8008390:	695b      	ldr	r3, [r3, #20]
 8008392:	021b      	lsls	r3, r3, #8
 8008394:	697a      	ldr	r2, [r7, #20]
 8008396:	4313      	orrs	r3, r2
 8008398:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	697a      	ldr	r2, [r7, #20]
 800839e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	68fa      	ldr	r2, [r7, #12]
 80083a4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80083a6:	683b      	ldr	r3, [r7, #0]
 80083a8:	685a      	ldr	r2, [r3, #4]
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	693a      	ldr	r2, [r7, #16]
 80083b2:	621a      	str	r2, [r3, #32]
}
 80083b4:	bf00      	nop
 80083b6:	371c      	adds	r7, #28
 80083b8:	46bd      	mov	sp, r7
 80083ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083be:	4770      	bx	lr
 80083c0:	fffeff8f 	.word	0xfffeff8f
 80083c4:	40010000 	.word	0x40010000
 80083c8:	40010400 	.word	0x40010400
 80083cc:	40014000 	.word	0x40014000
 80083d0:	40014400 	.word	0x40014400
 80083d4:	40014800 	.word	0x40014800

080083d8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80083d8:	b480      	push	{r7}
 80083da:	b087      	sub	sp, #28
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
 80083e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	6a1b      	ldr	r3, [r3, #32]
 80083e6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	6a1b      	ldr	r3, [r3, #32]
 80083ec:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	685b      	ldr	r3, [r3, #4]
 80083f8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80083fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008400:	68fa      	ldr	r2, [r7, #12]
 8008402:	4b22      	ldr	r3, [pc, #136]	@ (800848c <TIM_OC6_SetConfig+0xb4>)
 8008404:	4013      	ands	r3, r2
 8008406:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008408:	683b      	ldr	r3, [r7, #0]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	021b      	lsls	r3, r3, #8
 800840e:	68fa      	ldr	r2, [r7, #12]
 8008410:	4313      	orrs	r3, r2
 8008412:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008414:	693b      	ldr	r3, [r7, #16]
 8008416:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800841a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	689b      	ldr	r3, [r3, #8]
 8008420:	051b      	lsls	r3, r3, #20
 8008422:	693a      	ldr	r2, [r7, #16]
 8008424:	4313      	orrs	r3, r2
 8008426:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	4a19      	ldr	r2, [pc, #100]	@ (8008490 <TIM_OC6_SetConfig+0xb8>)
 800842c:	4293      	cmp	r3, r2
 800842e:	d00f      	beq.n	8008450 <TIM_OC6_SetConfig+0x78>
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	4a18      	ldr	r2, [pc, #96]	@ (8008494 <TIM_OC6_SetConfig+0xbc>)
 8008434:	4293      	cmp	r3, r2
 8008436:	d00b      	beq.n	8008450 <TIM_OC6_SetConfig+0x78>
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	4a17      	ldr	r2, [pc, #92]	@ (8008498 <TIM_OC6_SetConfig+0xc0>)
 800843c:	4293      	cmp	r3, r2
 800843e:	d007      	beq.n	8008450 <TIM_OC6_SetConfig+0x78>
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	4a16      	ldr	r2, [pc, #88]	@ (800849c <TIM_OC6_SetConfig+0xc4>)
 8008444:	4293      	cmp	r3, r2
 8008446:	d003      	beq.n	8008450 <TIM_OC6_SetConfig+0x78>
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	4a15      	ldr	r2, [pc, #84]	@ (80084a0 <TIM_OC6_SetConfig+0xc8>)
 800844c:	4293      	cmp	r3, r2
 800844e:	d109      	bne.n	8008464 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008450:	697b      	ldr	r3, [r7, #20]
 8008452:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008456:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	695b      	ldr	r3, [r3, #20]
 800845c:	029b      	lsls	r3, r3, #10
 800845e:	697a      	ldr	r2, [r7, #20]
 8008460:	4313      	orrs	r3, r2
 8008462:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	697a      	ldr	r2, [r7, #20]
 8008468:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	68fa      	ldr	r2, [r7, #12]
 800846e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008470:	683b      	ldr	r3, [r7, #0]
 8008472:	685a      	ldr	r2, [r3, #4]
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	693a      	ldr	r2, [r7, #16]
 800847c:	621a      	str	r2, [r3, #32]
}
 800847e:	bf00      	nop
 8008480:	371c      	adds	r7, #28
 8008482:	46bd      	mov	sp, r7
 8008484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008488:	4770      	bx	lr
 800848a:	bf00      	nop
 800848c:	feff8fff 	.word	0xfeff8fff
 8008490:	40010000 	.word	0x40010000
 8008494:	40010400 	.word	0x40010400
 8008498:	40014000 	.word	0x40014000
 800849c:	40014400 	.word	0x40014400
 80084a0:	40014800 	.word	0x40014800

080084a4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80084a4:	b480      	push	{r7}
 80084a6:	b087      	sub	sp, #28
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	60f8      	str	r0, [r7, #12]
 80084ac:	60b9      	str	r1, [r7, #8]
 80084ae:	607a      	str	r2, [r7, #4]
 80084b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	6a1b      	ldr	r3, [r3, #32]
 80084b6:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	6a1b      	ldr	r3, [r3, #32]
 80084bc:	f023 0201 	bic.w	r2, r3, #1
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	699b      	ldr	r3, [r3, #24]
 80084c8:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	4a28      	ldr	r2, [pc, #160]	@ (8008570 <TIM_TI1_SetConfig+0xcc>)
 80084ce:	4293      	cmp	r3, r2
 80084d0:	d01b      	beq.n	800850a <TIM_TI1_SetConfig+0x66>
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80084d8:	d017      	beq.n	800850a <TIM_TI1_SetConfig+0x66>
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	4a25      	ldr	r2, [pc, #148]	@ (8008574 <TIM_TI1_SetConfig+0xd0>)
 80084de:	4293      	cmp	r3, r2
 80084e0:	d013      	beq.n	800850a <TIM_TI1_SetConfig+0x66>
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	4a24      	ldr	r2, [pc, #144]	@ (8008578 <TIM_TI1_SetConfig+0xd4>)
 80084e6:	4293      	cmp	r3, r2
 80084e8:	d00f      	beq.n	800850a <TIM_TI1_SetConfig+0x66>
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	4a23      	ldr	r2, [pc, #140]	@ (800857c <TIM_TI1_SetConfig+0xd8>)
 80084ee:	4293      	cmp	r3, r2
 80084f0:	d00b      	beq.n	800850a <TIM_TI1_SetConfig+0x66>
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	4a22      	ldr	r2, [pc, #136]	@ (8008580 <TIM_TI1_SetConfig+0xdc>)
 80084f6:	4293      	cmp	r3, r2
 80084f8:	d007      	beq.n	800850a <TIM_TI1_SetConfig+0x66>
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	4a21      	ldr	r2, [pc, #132]	@ (8008584 <TIM_TI1_SetConfig+0xe0>)
 80084fe:	4293      	cmp	r3, r2
 8008500:	d003      	beq.n	800850a <TIM_TI1_SetConfig+0x66>
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	4a20      	ldr	r2, [pc, #128]	@ (8008588 <TIM_TI1_SetConfig+0xe4>)
 8008506:	4293      	cmp	r3, r2
 8008508:	d101      	bne.n	800850e <TIM_TI1_SetConfig+0x6a>
 800850a:	2301      	movs	r3, #1
 800850c:	e000      	b.n	8008510 <TIM_TI1_SetConfig+0x6c>
 800850e:	2300      	movs	r3, #0
 8008510:	2b00      	cmp	r3, #0
 8008512:	d008      	beq.n	8008526 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8008514:	697b      	ldr	r3, [r7, #20]
 8008516:	f023 0303 	bic.w	r3, r3, #3
 800851a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800851c:	697a      	ldr	r2, [r7, #20]
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	4313      	orrs	r3, r2
 8008522:	617b      	str	r3, [r7, #20]
 8008524:	e003      	b.n	800852e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8008526:	697b      	ldr	r3, [r7, #20]
 8008528:	f043 0301 	orr.w	r3, r3, #1
 800852c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800852e:	697b      	ldr	r3, [r7, #20]
 8008530:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008534:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	011b      	lsls	r3, r3, #4
 800853a:	b2db      	uxtb	r3, r3
 800853c:	697a      	ldr	r2, [r7, #20]
 800853e:	4313      	orrs	r3, r2
 8008540:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008542:	693b      	ldr	r3, [r7, #16]
 8008544:	f023 030a 	bic.w	r3, r3, #10
 8008548:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800854a:	68bb      	ldr	r3, [r7, #8]
 800854c:	f003 030a 	and.w	r3, r3, #10
 8008550:	693a      	ldr	r2, [r7, #16]
 8008552:	4313      	orrs	r3, r2
 8008554:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	697a      	ldr	r2, [r7, #20]
 800855a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	693a      	ldr	r2, [r7, #16]
 8008560:	621a      	str	r2, [r3, #32]
}
 8008562:	bf00      	nop
 8008564:	371c      	adds	r7, #28
 8008566:	46bd      	mov	sp, r7
 8008568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856c:	4770      	bx	lr
 800856e:	bf00      	nop
 8008570:	40010000 	.word	0x40010000
 8008574:	40000400 	.word	0x40000400
 8008578:	40000800 	.word	0x40000800
 800857c:	40000c00 	.word	0x40000c00
 8008580:	40010400 	.word	0x40010400
 8008584:	40001800 	.word	0x40001800
 8008588:	40014000 	.word	0x40014000

0800858c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800858c:	b480      	push	{r7}
 800858e:	b087      	sub	sp, #28
 8008590:	af00      	add	r7, sp, #0
 8008592:	60f8      	str	r0, [r7, #12]
 8008594:	60b9      	str	r1, [r7, #8]
 8008596:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	6a1b      	ldr	r3, [r3, #32]
 800859c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	6a1b      	ldr	r3, [r3, #32]
 80085a2:	f023 0201 	bic.w	r2, r3, #1
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	699b      	ldr	r3, [r3, #24]
 80085ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80085b0:	693b      	ldr	r3, [r7, #16]
 80085b2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80085b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	011b      	lsls	r3, r3, #4
 80085bc:	693a      	ldr	r2, [r7, #16]
 80085be:	4313      	orrs	r3, r2
 80085c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80085c2:	697b      	ldr	r3, [r7, #20]
 80085c4:	f023 030a 	bic.w	r3, r3, #10
 80085c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80085ca:	697a      	ldr	r2, [r7, #20]
 80085cc:	68bb      	ldr	r3, [r7, #8]
 80085ce:	4313      	orrs	r3, r2
 80085d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	693a      	ldr	r2, [r7, #16]
 80085d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	697a      	ldr	r2, [r7, #20]
 80085dc:	621a      	str	r2, [r3, #32]
}
 80085de:	bf00      	nop
 80085e0:	371c      	adds	r7, #28
 80085e2:	46bd      	mov	sp, r7
 80085e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e8:	4770      	bx	lr

080085ea <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80085ea:	b480      	push	{r7}
 80085ec:	b087      	sub	sp, #28
 80085ee:	af00      	add	r7, sp, #0
 80085f0:	60f8      	str	r0, [r7, #12]
 80085f2:	60b9      	str	r1, [r7, #8]
 80085f4:	607a      	str	r2, [r7, #4]
 80085f6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	6a1b      	ldr	r3, [r3, #32]
 80085fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	6a1b      	ldr	r3, [r3, #32]
 8008602:	f023 0210 	bic.w	r2, r3, #16
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	699b      	ldr	r3, [r3, #24]
 800860e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8008610:	693b      	ldr	r3, [r7, #16]
 8008612:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008616:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	021b      	lsls	r3, r3, #8
 800861c:	693a      	ldr	r2, [r7, #16]
 800861e:	4313      	orrs	r3, r2
 8008620:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008622:	693b      	ldr	r3, [r7, #16]
 8008624:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008628:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800862a:	683b      	ldr	r3, [r7, #0]
 800862c:	031b      	lsls	r3, r3, #12
 800862e:	b29b      	uxth	r3, r3
 8008630:	693a      	ldr	r2, [r7, #16]
 8008632:	4313      	orrs	r3, r2
 8008634:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008636:	697b      	ldr	r3, [r7, #20]
 8008638:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800863c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800863e:	68bb      	ldr	r3, [r7, #8]
 8008640:	011b      	lsls	r3, r3, #4
 8008642:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8008646:	697a      	ldr	r2, [r7, #20]
 8008648:	4313      	orrs	r3, r2
 800864a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	693a      	ldr	r2, [r7, #16]
 8008650:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	697a      	ldr	r2, [r7, #20]
 8008656:	621a      	str	r2, [r3, #32]
}
 8008658:	bf00      	nop
 800865a:	371c      	adds	r7, #28
 800865c:	46bd      	mov	sp, r7
 800865e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008662:	4770      	bx	lr

08008664 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008664:	b480      	push	{r7}
 8008666:	b087      	sub	sp, #28
 8008668:	af00      	add	r7, sp, #0
 800866a:	60f8      	str	r0, [r7, #12]
 800866c:	60b9      	str	r1, [r7, #8]
 800866e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	6a1b      	ldr	r3, [r3, #32]
 8008674:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	6a1b      	ldr	r3, [r3, #32]
 800867a:	f023 0210 	bic.w	r2, r3, #16
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	699b      	ldr	r3, [r3, #24]
 8008686:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008688:	693b      	ldr	r3, [r7, #16]
 800868a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800868e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	031b      	lsls	r3, r3, #12
 8008694:	693a      	ldr	r2, [r7, #16]
 8008696:	4313      	orrs	r3, r2
 8008698:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800869a:	697b      	ldr	r3, [r7, #20]
 800869c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80086a0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80086a2:	68bb      	ldr	r3, [r7, #8]
 80086a4:	011b      	lsls	r3, r3, #4
 80086a6:	697a      	ldr	r2, [r7, #20]
 80086a8:	4313      	orrs	r3, r2
 80086aa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	693a      	ldr	r2, [r7, #16]
 80086b0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	697a      	ldr	r2, [r7, #20]
 80086b6:	621a      	str	r2, [r3, #32]
}
 80086b8:	bf00      	nop
 80086ba:	371c      	adds	r7, #28
 80086bc:	46bd      	mov	sp, r7
 80086be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c2:	4770      	bx	lr

080086c4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80086c4:	b480      	push	{r7}
 80086c6:	b087      	sub	sp, #28
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	60f8      	str	r0, [r7, #12]
 80086cc:	60b9      	str	r1, [r7, #8]
 80086ce:	607a      	str	r2, [r7, #4]
 80086d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	6a1b      	ldr	r3, [r3, #32]
 80086d6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	6a1b      	ldr	r3, [r3, #32]
 80086dc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	69db      	ldr	r3, [r3, #28]
 80086e8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80086ea:	693b      	ldr	r3, [r7, #16]
 80086ec:	f023 0303 	bic.w	r3, r3, #3
 80086f0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80086f2:	693a      	ldr	r2, [r7, #16]
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	4313      	orrs	r3, r2
 80086f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80086fa:	693b      	ldr	r3, [r7, #16]
 80086fc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008700:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8008702:	683b      	ldr	r3, [r7, #0]
 8008704:	011b      	lsls	r3, r3, #4
 8008706:	b2db      	uxtb	r3, r3
 8008708:	693a      	ldr	r2, [r7, #16]
 800870a:	4313      	orrs	r3, r2
 800870c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800870e:	697b      	ldr	r3, [r7, #20]
 8008710:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8008714:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8008716:	68bb      	ldr	r3, [r7, #8]
 8008718:	021b      	lsls	r3, r3, #8
 800871a:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 800871e:	697a      	ldr	r2, [r7, #20]
 8008720:	4313      	orrs	r3, r2
 8008722:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	693a      	ldr	r2, [r7, #16]
 8008728:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	697a      	ldr	r2, [r7, #20]
 800872e:	621a      	str	r2, [r3, #32]
}
 8008730:	bf00      	nop
 8008732:	371c      	adds	r7, #28
 8008734:	46bd      	mov	sp, r7
 8008736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873a:	4770      	bx	lr

0800873c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800873c:	b480      	push	{r7}
 800873e:	b087      	sub	sp, #28
 8008740:	af00      	add	r7, sp, #0
 8008742:	60f8      	str	r0, [r7, #12]
 8008744:	60b9      	str	r1, [r7, #8]
 8008746:	607a      	str	r2, [r7, #4]
 8008748:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	6a1b      	ldr	r3, [r3, #32]
 800874e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	6a1b      	ldr	r3, [r3, #32]
 8008754:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	69db      	ldr	r3, [r3, #28]
 8008760:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8008762:	693b      	ldr	r3, [r7, #16]
 8008764:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008768:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	021b      	lsls	r3, r3, #8
 800876e:	693a      	ldr	r2, [r7, #16]
 8008770:	4313      	orrs	r3, r2
 8008772:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8008774:	693b      	ldr	r3, [r7, #16]
 8008776:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800877a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800877c:	683b      	ldr	r3, [r7, #0]
 800877e:	031b      	lsls	r3, r3, #12
 8008780:	b29b      	uxth	r3, r3
 8008782:	693a      	ldr	r2, [r7, #16]
 8008784:	4313      	orrs	r3, r2
 8008786:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8008788:	697b      	ldr	r3, [r7, #20]
 800878a:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800878e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8008790:	68bb      	ldr	r3, [r7, #8]
 8008792:	031b      	lsls	r3, r3, #12
 8008794:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8008798:	697a      	ldr	r2, [r7, #20]
 800879a:	4313      	orrs	r3, r2
 800879c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	693a      	ldr	r2, [r7, #16]
 80087a2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	697a      	ldr	r2, [r7, #20]
 80087a8:	621a      	str	r2, [r3, #32]
}
 80087aa:	bf00      	nop
 80087ac:	371c      	adds	r7, #28
 80087ae:	46bd      	mov	sp, r7
 80087b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b4:	4770      	bx	lr
	...

080087b8 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80087b8:	b480      	push	{r7}
 80087ba:	b085      	sub	sp, #20
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
 80087c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	689b      	ldr	r3, [r3, #8]
 80087c6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80087c8:	68fa      	ldr	r2, [r7, #12]
 80087ca:	4b09      	ldr	r3, [pc, #36]	@ (80087f0 <TIM_ITRx_SetConfig+0x38>)
 80087cc:	4013      	ands	r3, r2
 80087ce:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80087d0:	683a      	ldr	r2, [r7, #0]
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	4313      	orrs	r3, r2
 80087d6:	f043 0307 	orr.w	r3, r3, #7
 80087da:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	68fa      	ldr	r2, [r7, #12]
 80087e0:	609a      	str	r2, [r3, #8]
}
 80087e2:	bf00      	nop
 80087e4:	3714      	adds	r7, #20
 80087e6:	46bd      	mov	sp, r7
 80087e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ec:	4770      	bx	lr
 80087ee:	bf00      	nop
 80087f0:	ffcfff8f 	.word	0xffcfff8f

080087f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80087f4:	b480      	push	{r7}
 80087f6:	b087      	sub	sp, #28
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	60f8      	str	r0, [r7, #12]
 80087fc:	60b9      	str	r1, [r7, #8]
 80087fe:	607a      	str	r2, [r7, #4]
 8008800:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	689b      	ldr	r3, [r3, #8]
 8008806:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008808:	697b      	ldr	r3, [r7, #20]
 800880a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800880e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008810:	683b      	ldr	r3, [r7, #0]
 8008812:	021a      	lsls	r2, r3, #8
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	431a      	orrs	r2, r3
 8008818:	68bb      	ldr	r3, [r7, #8]
 800881a:	4313      	orrs	r3, r2
 800881c:	697a      	ldr	r2, [r7, #20]
 800881e:	4313      	orrs	r3, r2
 8008820:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	697a      	ldr	r2, [r7, #20]
 8008826:	609a      	str	r2, [r3, #8]
}
 8008828:	bf00      	nop
 800882a:	371c      	adds	r7, #28
 800882c:	46bd      	mov	sp, r7
 800882e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008832:	4770      	bx	lr

08008834 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008834:	b480      	push	{r7}
 8008836:	b087      	sub	sp, #28
 8008838:	af00      	add	r7, sp, #0
 800883a:	60f8      	str	r0, [r7, #12]
 800883c:	60b9      	str	r1, [r7, #8]
 800883e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008840:	68bb      	ldr	r3, [r7, #8]
 8008842:	f003 031f 	and.w	r3, r3, #31
 8008846:	2201      	movs	r2, #1
 8008848:	fa02 f303 	lsl.w	r3, r2, r3
 800884c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	6a1a      	ldr	r2, [r3, #32]
 8008852:	697b      	ldr	r3, [r7, #20]
 8008854:	43db      	mvns	r3, r3
 8008856:	401a      	ands	r2, r3
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	6a1a      	ldr	r2, [r3, #32]
 8008860:	68bb      	ldr	r3, [r7, #8]
 8008862:	f003 031f 	and.w	r3, r3, #31
 8008866:	6879      	ldr	r1, [r7, #4]
 8008868:	fa01 f303 	lsl.w	r3, r1, r3
 800886c:	431a      	orrs	r2, r3
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	621a      	str	r2, [r3, #32]
}
 8008872:	bf00      	nop
 8008874:	371c      	adds	r7, #28
 8008876:	46bd      	mov	sp, r7
 8008878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887c:	4770      	bx	lr
	...

08008880 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008880:	b480      	push	{r7}
 8008882:	b085      	sub	sp, #20
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
 8008888:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008890:	2b01      	cmp	r3, #1
 8008892:	d101      	bne.n	8008898 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008894:	2302      	movs	r3, #2
 8008896:	e06d      	b.n	8008974 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	2201      	movs	r2, #1
 800889c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	2202      	movs	r2, #2
 80088a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	685b      	ldr	r3, [r3, #4]
 80088ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	689b      	ldr	r3, [r3, #8]
 80088b6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	4a30      	ldr	r2, [pc, #192]	@ (8008980 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80088be:	4293      	cmp	r3, r2
 80088c0:	d004      	beq.n	80088cc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	4a2f      	ldr	r2, [pc, #188]	@ (8008984 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80088c8:	4293      	cmp	r3, r2
 80088ca:	d108      	bne.n	80088de <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80088d2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80088d4:	683b      	ldr	r3, [r7, #0]
 80088d6:	685b      	ldr	r3, [r3, #4]
 80088d8:	68fa      	ldr	r2, [r7, #12]
 80088da:	4313      	orrs	r3, r2
 80088dc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80088e4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80088e6:	683b      	ldr	r3, [r7, #0]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	68fa      	ldr	r2, [r7, #12]
 80088ec:	4313      	orrs	r3, r2
 80088ee:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	68fa      	ldr	r2, [r7, #12]
 80088f6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	4a20      	ldr	r2, [pc, #128]	@ (8008980 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80088fe:	4293      	cmp	r3, r2
 8008900:	d022      	beq.n	8008948 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800890a:	d01d      	beq.n	8008948 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	4a1d      	ldr	r2, [pc, #116]	@ (8008988 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008912:	4293      	cmp	r3, r2
 8008914:	d018      	beq.n	8008948 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	4a1c      	ldr	r2, [pc, #112]	@ (800898c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800891c:	4293      	cmp	r3, r2
 800891e:	d013      	beq.n	8008948 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	4a1a      	ldr	r2, [pc, #104]	@ (8008990 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008926:	4293      	cmp	r3, r2
 8008928:	d00e      	beq.n	8008948 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	4a15      	ldr	r2, [pc, #84]	@ (8008984 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008930:	4293      	cmp	r3, r2
 8008932:	d009      	beq.n	8008948 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	4a16      	ldr	r2, [pc, #88]	@ (8008994 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800893a:	4293      	cmp	r3, r2
 800893c:	d004      	beq.n	8008948 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	4a15      	ldr	r2, [pc, #84]	@ (8008998 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008944:	4293      	cmp	r3, r2
 8008946:	d10c      	bne.n	8008962 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008948:	68bb      	ldr	r3, [r7, #8]
 800894a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800894e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008950:	683b      	ldr	r3, [r7, #0]
 8008952:	689b      	ldr	r3, [r3, #8]
 8008954:	68ba      	ldr	r2, [r7, #8]
 8008956:	4313      	orrs	r3, r2
 8008958:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	68ba      	ldr	r2, [r7, #8]
 8008960:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	2201      	movs	r2, #1
 8008966:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	2200      	movs	r2, #0
 800896e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008972:	2300      	movs	r3, #0
}
 8008974:	4618      	mov	r0, r3
 8008976:	3714      	adds	r7, #20
 8008978:	46bd      	mov	sp, r7
 800897a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897e:	4770      	bx	lr
 8008980:	40010000 	.word	0x40010000
 8008984:	40010400 	.word	0x40010400
 8008988:	40000400 	.word	0x40000400
 800898c:	40000800 	.word	0x40000800
 8008990:	40000c00 	.word	0x40000c00
 8008994:	40001800 	.word	0x40001800
 8008998:	40014000 	.word	0x40014000

0800899c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800899c:	b480      	push	{r7}
 800899e:	b085      	sub	sp, #20
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
 80089a4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80089a6:	2300      	movs	r3, #0
 80089a8:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80089b0:	2b01      	cmp	r3, #1
 80089b2:	d101      	bne.n	80089b8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80089b4:	2302      	movs	r3, #2
 80089b6:	e073      	b.n	8008aa0 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	2201      	movs	r2, #1
 80089bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80089c6:	683b      	ldr	r3, [r7, #0]
 80089c8:	68db      	ldr	r3, [r3, #12]
 80089ca:	4313      	orrs	r3, r2
 80089cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80089d4:	683b      	ldr	r3, [r7, #0]
 80089d6:	689b      	ldr	r3, [r3, #8]
 80089d8:	4313      	orrs	r3, r2
 80089da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80089e2:	683b      	ldr	r3, [r7, #0]
 80089e4:	685b      	ldr	r3, [r3, #4]
 80089e6:	4313      	orrs	r3, r2
 80089e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80089f0:	683b      	ldr	r3, [r7, #0]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	4313      	orrs	r3, r2
 80089f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80089fe:	683b      	ldr	r3, [r7, #0]
 8008a00:	691b      	ldr	r3, [r3, #16]
 8008a02:	4313      	orrs	r3, r2
 8008a04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	695b      	ldr	r3, [r3, #20]
 8008a10:	4313      	orrs	r3, r2
 8008a12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8008a1a:	683b      	ldr	r3, [r7, #0]
 8008a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a1e:	4313      	orrs	r3, r2
 8008a20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8008a28:	683b      	ldr	r3, [r7, #0]
 8008a2a:	699b      	ldr	r3, [r3, #24]
 8008a2c:	041b      	lsls	r3, r3, #16
 8008a2e:	4313      	orrs	r3, r2
 8008a30:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8008a38:	683b      	ldr	r3, [r7, #0]
 8008a3a:	69db      	ldr	r3, [r3, #28]
 8008a3c:	4313      	orrs	r3, r2
 8008a3e:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	4a19      	ldr	r2, [pc, #100]	@ (8008aac <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8008a46:	4293      	cmp	r3, r2
 8008a48:	d004      	beq.n	8008a54 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	4a18      	ldr	r2, [pc, #96]	@ (8008ab0 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8008a50:	4293      	cmp	r3, r2
 8008a52:	d11c      	bne.n	8008a8e <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8008a5a:	683b      	ldr	r3, [r7, #0]
 8008a5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a5e:	051b      	lsls	r3, r3, #20
 8008a60:	4313      	orrs	r3, r2
 8008a62:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8008a6a:	683b      	ldr	r3, [r7, #0]
 8008a6c:	6a1b      	ldr	r3, [r3, #32]
 8008a6e:	4313      	orrs	r3, r2
 8008a70:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8008a78:	683b      	ldr	r3, [r7, #0]
 8008a7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a7c:	4313      	orrs	r3, r2
 8008a7e:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8008a86:	683b      	ldr	r3, [r7, #0]
 8008a88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a8a:	4313      	orrs	r3, r2
 8008a8c:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	68fa      	ldr	r2, [r7, #12]
 8008a94:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	2200      	movs	r2, #0
 8008a9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008a9e:	2300      	movs	r3, #0
}
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	3714      	adds	r7, #20
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aaa:	4770      	bx	lr
 8008aac:	40010000 	.word	0x40010000
 8008ab0:	40010400 	.word	0x40010400

08008ab4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008ab4:	b480      	push	{r7}
 8008ab6:	b083      	sub	sp, #12
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008abc:	bf00      	nop
 8008abe:	370c      	adds	r7, #12
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac6:	4770      	bx	lr

08008ac8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008ac8:	b480      	push	{r7}
 8008aca:	b083      	sub	sp, #12
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008ad0:	bf00      	nop
 8008ad2:	370c      	adds	r7, #12
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ada:	4770      	bx	lr

08008adc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008adc:	b480      	push	{r7}
 8008ade:	b083      	sub	sp, #12
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008ae4:	bf00      	nop
 8008ae6:	370c      	adds	r7, #12
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aee:	4770      	bx	lr

08008af0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008af0:	b580      	push	{r7, lr}
 8008af2:	b082      	sub	sp, #8
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d101      	bne.n	8008b02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008afe:	2301      	movs	r3, #1
 8008b00:	e042      	b.n	8008b88 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d106      	bne.n	8008b1a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	2200      	movs	r2, #0
 8008b10:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008b14:	6878      	ldr	r0, [r7, #4]
 8008b16:	f7f8 fc25 	bl	8001364 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	2224      	movs	r2, #36	@ 0x24
 8008b1e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	681a      	ldr	r2, [r3, #0]
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	f022 0201 	bic.w	r2, r2, #1
 8008b30:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d002      	beq.n	8008b40 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008b3a:	6878      	ldr	r0, [r7, #4]
 8008b3c:	f000 fe94 	bl	8009868 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008b40:	6878      	ldr	r0, [r7, #4]
 8008b42:	f000 f825 	bl	8008b90 <UART_SetConfig>
 8008b46:	4603      	mov	r3, r0
 8008b48:	2b01      	cmp	r3, #1
 8008b4a:	d101      	bne.n	8008b50 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008b4c:	2301      	movs	r3, #1
 8008b4e:	e01b      	b.n	8008b88 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	685a      	ldr	r2, [r3, #4]
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008b5e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	689a      	ldr	r2, [r3, #8]
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008b6e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	681a      	ldr	r2, [r3, #0]
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	f042 0201 	orr.w	r2, r2, #1
 8008b7e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008b80:	6878      	ldr	r0, [r7, #4]
 8008b82:	f000 ff13 	bl	80099ac <UART_CheckIdleState>
 8008b86:	4603      	mov	r3, r0
}
 8008b88:	4618      	mov	r0, r3
 8008b8a:	3708      	adds	r7, #8
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	bd80      	pop	{r7, pc}

08008b90 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008b90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008b94:	b092      	sub	sp, #72	@ 0x48
 8008b96:	af00      	add	r7, sp, #0
 8008b98:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008ba0:	697b      	ldr	r3, [r7, #20]
 8008ba2:	689a      	ldr	r2, [r3, #8]
 8008ba4:	697b      	ldr	r3, [r7, #20]
 8008ba6:	691b      	ldr	r3, [r3, #16]
 8008ba8:	431a      	orrs	r2, r3
 8008baa:	697b      	ldr	r3, [r7, #20]
 8008bac:	695b      	ldr	r3, [r3, #20]
 8008bae:	431a      	orrs	r2, r3
 8008bb0:	697b      	ldr	r3, [r7, #20]
 8008bb2:	69db      	ldr	r3, [r3, #28]
 8008bb4:	4313      	orrs	r3, r2
 8008bb6:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008bb8:	697b      	ldr	r3, [r7, #20]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	681a      	ldr	r2, [r3, #0]
 8008bbe:	4bbe      	ldr	r3, [pc, #760]	@ (8008eb8 <UART_SetConfig+0x328>)
 8008bc0:	4013      	ands	r3, r2
 8008bc2:	697a      	ldr	r2, [r7, #20]
 8008bc4:	6812      	ldr	r2, [r2, #0]
 8008bc6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008bc8:	430b      	orrs	r3, r1
 8008bca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008bcc:	697b      	ldr	r3, [r7, #20]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	685b      	ldr	r3, [r3, #4]
 8008bd2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008bd6:	697b      	ldr	r3, [r7, #20]
 8008bd8:	68da      	ldr	r2, [r3, #12]
 8008bda:	697b      	ldr	r3, [r7, #20]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	430a      	orrs	r2, r1
 8008be0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008be2:	697b      	ldr	r3, [r7, #20]
 8008be4:	699b      	ldr	r3, [r3, #24]
 8008be6:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008be8:	697b      	ldr	r3, [r7, #20]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	4ab3      	ldr	r2, [pc, #716]	@ (8008ebc <UART_SetConfig+0x32c>)
 8008bee:	4293      	cmp	r3, r2
 8008bf0:	d004      	beq.n	8008bfc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008bf2:	697b      	ldr	r3, [r7, #20]
 8008bf4:	6a1b      	ldr	r3, [r3, #32]
 8008bf6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008bf8:	4313      	orrs	r3, r2
 8008bfa:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008bfc:	697b      	ldr	r3, [r7, #20]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	689a      	ldr	r2, [r3, #8]
 8008c02:	4baf      	ldr	r3, [pc, #700]	@ (8008ec0 <UART_SetConfig+0x330>)
 8008c04:	4013      	ands	r3, r2
 8008c06:	697a      	ldr	r2, [r7, #20]
 8008c08:	6812      	ldr	r2, [r2, #0]
 8008c0a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008c0c:	430b      	orrs	r3, r1
 8008c0e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008c10:	697b      	ldr	r3, [r7, #20]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c16:	f023 010f 	bic.w	r1, r3, #15
 8008c1a:	697b      	ldr	r3, [r7, #20]
 8008c1c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008c1e:	697b      	ldr	r3, [r7, #20]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	430a      	orrs	r2, r1
 8008c24:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008c26:	697b      	ldr	r3, [r7, #20]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	4aa6      	ldr	r2, [pc, #664]	@ (8008ec4 <UART_SetConfig+0x334>)
 8008c2c:	4293      	cmp	r3, r2
 8008c2e:	d177      	bne.n	8008d20 <UART_SetConfig+0x190>
 8008c30:	4ba5      	ldr	r3, [pc, #660]	@ (8008ec8 <UART_SetConfig+0x338>)
 8008c32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c34:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008c38:	2b28      	cmp	r3, #40	@ 0x28
 8008c3a:	d86d      	bhi.n	8008d18 <UART_SetConfig+0x188>
 8008c3c:	a201      	add	r2, pc, #4	@ (adr r2, 8008c44 <UART_SetConfig+0xb4>)
 8008c3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c42:	bf00      	nop
 8008c44:	08008ce9 	.word	0x08008ce9
 8008c48:	08008d19 	.word	0x08008d19
 8008c4c:	08008d19 	.word	0x08008d19
 8008c50:	08008d19 	.word	0x08008d19
 8008c54:	08008d19 	.word	0x08008d19
 8008c58:	08008d19 	.word	0x08008d19
 8008c5c:	08008d19 	.word	0x08008d19
 8008c60:	08008d19 	.word	0x08008d19
 8008c64:	08008cf1 	.word	0x08008cf1
 8008c68:	08008d19 	.word	0x08008d19
 8008c6c:	08008d19 	.word	0x08008d19
 8008c70:	08008d19 	.word	0x08008d19
 8008c74:	08008d19 	.word	0x08008d19
 8008c78:	08008d19 	.word	0x08008d19
 8008c7c:	08008d19 	.word	0x08008d19
 8008c80:	08008d19 	.word	0x08008d19
 8008c84:	08008cf9 	.word	0x08008cf9
 8008c88:	08008d19 	.word	0x08008d19
 8008c8c:	08008d19 	.word	0x08008d19
 8008c90:	08008d19 	.word	0x08008d19
 8008c94:	08008d19 	.word	0x08008d19
 8008c98:	08008d19 	.word	0x08008d19
 8008c9c:	08008d19 	.word	0x08008d19
 8008ca0:	08008d19 	.word	0x08008d19
 8008ca4:	08008d01 	.word	0x08008d01
 8008ca8:	08008d19 	.word	0x08008d19
 8008cac:	08008d19 	.word	0x08008d19
 8008cb0:	08008d19 	.word	0x08008d19
 8008cb4:	08008d19 	.word	0x08008d19
 8008cb8:	08008d19 	.word	0x08008d19
 8008cbc:	08008d19 	.word	0x08008d19
 8008cc0:	08008d19 	.word	0x08008d19
 8008cc4:	08008d09 	.word	0x08008d09
 8008cc8:	08008d19 	.word	0x08008d19
 8008ccc:	08008d19 	.word	0x08008d19
 8008cd0:	08008d19 	.word	0x08008d19
 8008cd4:	08008d19 	.word	0x08008d19
 8008cd8:	08008d19 	.word	0x08008d19
 8008cdc:	08008d19 	.word	0x08008d19
 8008ce0:	08008d19 	.word	0x08008d19
 8008ce4:	08008d11 	.word	0x08008d11
 8008ce8:	2301      	movs	r3, #1
 8008cea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cee:	e326      	b.n	800933e <UART_SetConfig+0x7ae>
 8008cf0:	2304      	movs	r3, #4
 8008cf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cf6:	e322      	b.n	800933e <UART_SetConfig+0x7ae>
 8008cf8:	2308      	movs	r3, #8
 8008cfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cfe:	e31e      	b.n	800933e <UART_SetConfig+0x7ae>
 8008d00:	2310      	movs	r3, #16
 8008d02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d06:	e31a      	b.n	800933e <UART_SetConfig+0x7ae>
 8008d08:	2320      	movs	r3, #32
 8008d0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d0e:	e316      	b.n	800933e <UART_SetConfig+0x7ae>
 8008d10:	2340      	movs	r3, #64	@ 0x40
 8008d12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d16:	e312      	b.n	800933e <UART_SetConfig+0x7ae>
 8008d18:	2380      	movs	r3, #128	@ 0x80
 8008d1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d1e:	e30e      	b.n	800933e <UART_SetConfig+0x7ae>
 8008d20:	697b      	ldr	r3, [r7, #20]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	4a69      	ldr	r2, [pc, #420]	@ (8008ecc <UART_SetConfig+0x33c>)
 8008d26:	4293      	cmp	r3, r2
 8008d28:	d130      	bne.n	8008d8c <UART_SetConfig+0x1fc>
 8008d2a:	4b67      	ldr	r3, [pc, #412]	@ (8008ec8 <UART_SetConfig+0x338>)
 8008d2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d2e:	f003 0307 	and.w	r3, r3, #7
 8008d32:	2b05      	cmp	r3, #5
 8008d34:	d826      	bhi.n	8008d84 <UART_SetConfig+0x1f4>
 8008d36:	a201      	add	r2, pc, #4	@ (adr r2, 8008d3c <UART_SetConfig+0x1ac>)
 8008d38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d3c:	08008d55 	.word	0x08008d55
 8008d40:	08008d5d 	.word	0x08008d5d
 8008d44:	08008d65 	.word	0x08008d65
 8008d48:	08008d6d 	.word	0x08008d6d
 8008d4c:	08008d75 	.word	0x08008d75
 8008d50:	08008d7d 	.word	0x08008d7d
 8008d54:	2300      	movs	r3, #0
 8008d56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d5a:	e2f0      	b.n	800933e <UART_SetConfig+0x7ae>
 8008d5c:	2304      	movs	r3, #4
 8008d5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d62:	e2ec      	b.n	800933e <UART_SetConfig+0x7ae>
 8008d64:	2308      	movs	r3, #8
 8008d66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d6a:	e2e8      	b.n	800933e <UART_SetConfig+0x7ae>
 8008d6c:	2310      	movs	r3, #16
 8008d6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d72:	e2e4      	b.n	800933e <UART_SetConfig+0x7ae>
 8008d74:	2320      	movs	r3, #32
 8008d76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d7a:	e2e0      	b.n	800933e <UART_SetConfig+0x7ae>
 8008d7c:	2340      	movs	r3, #64	@ 0x40
 8008d7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d82:	e2dc      	b.n	800933e <UART_SetConfig+0x7ae>
 8008d84:	2380      	movs	r3, #128	@ 0x80
 8008d86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d8a:	e2d8      	b.n	800933e <UART_SetConfig+0x7ae>
 8008d8c:	697b      	ldr	r3, [r7, #20]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	4a4f      	ldr	r2, [pc, #316]	@ (8008ed0 <UART_SetConfig+0x340>)
 8008d92:	4293      	cmp	r3, r2
 8008d94:	d130      	bne.n	8008df8 <UART_SetConfig+0x268>
 8008d96:	4b4c      	ldr	r3, [pc, #304]	@ (8008ec8 <UART_SetConfig+0x338>)
 8008d98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d9a:	f003 0307 	and.w	r3, r3, #7
 8008d9e:	2b05      	cmp	r3, #5
 8008da0:	d826      	bhi.n	8008df0 <UART_SetConfig+0x260>
 8008da2:	a201      	add	r2, pc, #4	@ (adr r2, 8008da8 <UART_SetConfig+0x218>)
 8008da4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008da8:	08008dc1 	.word	0x08008dc1
 8008dac:	08008dc9 	.word	0x08008dc9
 8008db0:	08008dd1 	.word	0x08008dd1
 8008db4:	08008dd9 	.word	0x08008dd9
 8008db8:	08008de1 	.word	0x08008de1
 8008dbc:	08008de9 	.word	0x08008de9
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008dc6:	e2ba      	b.n	800933e <UART_SetConfig+0x7ae>
 8008dc8:	2304      	movs	r3, #4
 8008dca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008dce:	e2b6      	b.n	800933e <UART_SetConfig+0x7ae>
 8008dd0:	2308      	movs	r3, #8
 8008dd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008dd6:	e2b2      	b.n	800933e <UART_SetConfig+0x7ae>
 8008dd8:	2310      	movs	r3, #16
 8008dda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008dde:	e2ae      	b.n	800933e <UART_SetConfig+0x7ae>
 8008de0:	2320      	movs	r3, #32
 8008de2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008de6:	e2aa      	b.n	800933e <UART_SetConfig+0x7ae>
 8008de8:	2340      	movs	r3, #64	@ 0x40
 8008dea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008dee:	e2a6      	b.n	800933e <UART_SetConfig+0x7ae>
 8008df0:	2380      	movs	r3, #128	@ 0x80
 8008df2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008df6:	e2a2      	b.n	800933e <UART_SetConfig+0x7ae>
 8008df8:	697b      	ldr	r3, [r7, #20]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	4a35      	ldr	r2, [pc, #212]	@ (8008ed4 <UART_SetConfig+0x344>)
 8008dfe:	4293      	cmp	r3, r2
 8008e00:	d130      	bne.n	8008e64 <UART_SetConfig+0x2d4>
 8008e02:	4b31      	ldr	r3, [pc, #196]	@ (8008ec8 <UART_SetConfig+0x338>)
 8008e04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e06:	f003 0307 	and.w	r3, r3, #7
 8008e0a:	2b05      	cmp	r3, #5
 8008e0c:	d826      	bhi.n	8008e5c <UART_SetConfig+0x2cc>
 8008e0e:	a201      	add	r2, pc, #4	@ (adr r2, 8008e14 <UART_SetConfig+0x284>)
 8008e10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e14:	08008e2d 	.word	0x08008e2d
 8008e18:	08008e35 	.word	0x08008e35
 8008e1c:	08008e3d 	.word	0x08008e3d
 8008e20:	08008e45 	.word	0x08008e45
 8008e24:	08008e4d 	.word	0x08008e4d
 8008e28:	08008e55 	.word	0x08008e55
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e32:	e284      	b.n	800933e <UART_SetConfig+0x7ae>
 8008e34:	2304      	movs	r3, #4
 8008e36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e3a:	e280      	b.n	800933e <UART_SetConfig+0x7ae>
 8008e3c:	2308      	movs	r3, #8
 8008e3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e42:	e27c      	b.n	800933e <UART_SetConfig+0x7ae>
 8008e44:	2310      	movs	r3, #16
 8008e46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e4a:	e278      	b.n	800933e <UART_SetConfig+0x7ae>
 8008e4c:	2320      	movs	r3, #32
 8008e4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e52:	e274      	b.n	800933e <UART_SetConfig+0x7ae>
 8008e54:	2340      	movs	r3, #64	@ 0x40
 8008e56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e5a:	e270      	b.n	800933e <UART_SetConfig+0x7ae>
 8008e5c:	2380      	movs	r3, #128	@ 0x80
 8008e5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e62:	e26c      	b.n	800933e <UART_SetConfig+0x7ae>
 8008e64:	697b      	ldr	r3, [r7, #20]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	4a1b      	ldr	r2, [pc, #108]	@ (8008ed8 <UART_SetConfig+0x348>)
 8008e6a:	4293      	cmp	r3, r2
 8008e6c:	d142      	bne.n	8008ef4 <UART_SetConfig+0x364>
 8008e6e:	4b16      	ldr	r3, [pc, #88]	@ (8008ec8 <UART_SetConfig+0x338>)
 8008e70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e72:	f003 0307 	and.w	r3, r3, #7
 8008e76:	2b05      	cmp	r3, #5
 8008e78:	d838      	bhi.n	8008eec <UART_SetConfig+0x35c>
 8008e7a:	a201      	add	r2, pc, #4	@ (adr r2, 8008e80 <UART_SetConfig+0x2f0>)
 8008e7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e80:	08008e99 	.word	0x08008e99
 8008e84:	08008ea1 	.word	0x08008ea1
 8008e88:	08008ea9 	.word	0x08008ea9
 8008e8c:	08008eb1 	.word	0x08008eb1
 8008e90:	08008edd 	.word	0x08008edd
 8008e94:	08008ee5 	.word	0x08008ee5
 8008e98:	2300      	movs	r3, #0
 8008e9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e9e:	e24e      	b.n	800933e <UART_SetConfig+0x7ae>
 8008ea0:	2304      	movs	r3, #4
 8008ea2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ea6:	e24a      	b.n	800933e <UART_SetConfig+0x7ae>
 8008ea8:	2308      	movs	r3, #8
 8008eaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008eae:	e246      	b.n	800933e <UART_SetConfig+0x7ae>
 8008eb0:	2310      	movs	r3, #16
 8008eb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008eb6:	e242      	b.n	800933e <UART_SetConfig+0x7ae>
 8008eb8:	cfff69f3 	.word	0xcfff69f3
 8008ebc:	58000c00 	.word	0x58000c00
 8008ec0:	11fff4ff 	.word	0x11fff4ff
 8008ec4:	40011000 	.word	0x40011000
 8008ec8:	58024400 	.word	0x58024400
 8008ecc:	40004400 	.word	0x40004400
 8008ed0:	40004800 	.word	0x40004800
 8008ed4:	40004c00 	.word	0x40004c00
 8008ed8:	40005000 	.word	0x40005000
 8008edc:	2320      	movs	r3, #32
 8008ede:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ee2:	e22c      	b.n	800933e <UART_SetConfig+0x7ae>
 8008ee4:	2340      	movs	r3, #64	@ 0x40
 8008ee6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008eea:	e228      	b.n	800933e <UART_SetConfig+0x7ae>
 8008eec:	2380      	movs	r3, #128	@ 0x80
 8008eee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ef2:	e224      	b.n	800933e <UART_SetConfig+0x7ae>
 8008ef4:	697b      	ldr	r3, [r7, #20]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	4ab1      	ldr	r2, [pc, #708]	@ (80091c0 <UART_SetConfig+0x630>)
 8008efa:	4293      	cmp	r3, r2
 8008efc:	d176      	bne.n	8008fec <UART_SetConfig+0x45c>
 8008efe:	4bb1      	ldr	r3, [pc, #708]	@ (80091c4 <UART_SetConfig+0x634>)
 8008f00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008f02:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008f06:	2b28      	cmp	r3, #40	@ 0x28
 8008f08:	d86c      	bhi.n	8008fe4 <UART_SetConfig+0x454>
 8008f0a:	a201      	add	r2, pc, #4	@ (adr r2, 8008f10 <UART_SetConfig+0x380>)
 8008f0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f10:	08008fb5 	.word	0x08008fb5
 8008f14:	08008fe5 	.word	0x08008fe5
 8008f18:	08008fe5 	.word	0x08008fe5
 8008f1c:	08008fe5 	.word	0x08008fe5
 8008f20:	08008fe5 	.word	0x08008fe5
 8008f24:	08008fe5 	.word	0x08008fe5
 8008f28:	08008fe5 	.word	0x08008fe5
 8008f2c:	08008fe5 	.word	0x08008fe5
 8008f30:	08008fbd 	.word	0x08008fbd
 8008f34:	08008fe5 	.word	0x08008fe5
 8008f38:	08008fe5 	.word	0x08008fe5
 8008f3c:	08008fe5 	.word	0x08008fe5
 8008f40:	08008fe5 	.word	0x08008fe5
 8008f44:	08008fe5 	.word	0x08008fe5
 8008f48:	08008fe5 	.word	0x08008fe5
 8008f4c:	08008fe5 	.word	0x08008fe5
 8008f50:	08008fc5 	.word	0x08008fc5
 8008f54:	08008fe5 	.word	0x08008fe5
 8008f58:	08008fe5 	.word	0x08008fe5
 8008f5c:	08008fe5 	.word	0x08008fe5
 8008f60:	08008fe5 	.word	0x08008fe5
 8008f64:	08008fe5 	.word	0x08008fe5
 8008f68:	08008fe5 	.word	0x08008fe5
 8008f6c:	08008fe5 	.word	0x08008fe5
 8008f70:	08008fcd 	.word	0x08008fcd
 8008f74:	08008fe5 	.word	0x08008fe5
 8008f78:	08008fe5 	.word	0x08008fe5
 8008f7c:	08008fe5 	.word	0x08008fe5
 8008f80:	08008fe5 	.word	0x08008fe5
 8008f84:	08008fe5 	.word	0x08008fe5
 8008f88:	08008fe5 	.word	0x08008fe5
 8008f8c:	08008fe5 	.word	0x08008fe5
 8008f90:	08008fd5 	.word	0x08008fd5
 8008f94:	08008fe5 	.word	0x08008fe5
 8008f98:	08008fe5 	.word	0x08008fe5
 8008f9c:	08008fe5 	.word	0x08008fe5
 8008fa0:	08008fe5 	.word	0x08008fe5
 8008fa4:	08008fe5 	.word	0x08008fe5
 8008fa8:	08008fe5 	.word	0x08008fe5
 8008fac:	08008fe5 	.word	0x08008fe5
 8008fb0:	08008fdd 	.word	0x08008fdd
 8008fb4:	2301      	movs	r3, #1
 8008fb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fba:	e1c0      	b.n	800933e <UART_SetConfig+0x7ae>
 8008fbc:	2304      	movs	r3, #4
 8008fbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fc2:	e1bc      	b.n	800933e <UART_SetConfig+0x7ae>
 8008fc4:	2308      	movs	r3, #8
 8008fc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fca:	e1b8      	b.n	800933e <UART_SetConfig+0x7ae>
 8008fcc:	2310      	movs	r3, #16
 8008fce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fd2:	e1b4      	b.n	800933e <UART_SetConfig+0x7ae>
 8008fd4:	2320      	movs	r3, #32
 8008fd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fda:	e1b0      	b.n	800933e <UART_SetConfig+0x7ae>
 8008fdc:	2340      	movs	r3, #64	@ 0x40
 8008fde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fe2:	e1ac      	b.n	800933e <UART_SetConfig+0x7ae>
 8008fe4:	2380      	movs	r3, #128	@ 0x80
 8008fe6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fea:	e1a8      	b.n	800933e <UART_SetConfig+0x7ae>
 8008fec:	697b      	ldr	r3, [r7, #20]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	4a75      	ldr	r2, [pc, #468]	@ (80091c8 <UART_SetConfig+0x638>)
 8008ff2:	4293      	cmp	r3, r2
 8008ff4:	d130      	bne.n	8009058 <UART_SetConfig+0x4c8>
 8008ff6:	4b73      	ldr	r3, [pc, #460]	@ (80091c4 <UART_SetConfig+0x634>)
 8008ff8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ffa:	f003 0307 	and.w	r3, r3, #7
 8008ffe:	2b05      	cmp	r3, #5
 8009000:	d826      	bhi.n	8009050 <UART_SetConfig+0x4c0>
 8009002:	a201      	add	r2, pc, #4	@ (adr r2, 8009008 <UART_SetConfig+0x478>)
 8009004:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009008:	08009021 	.word	0x08009021
 800900c:	08009029 	.word	0x08009029
 8009010:	08009031 	.word	0x08009031
 8009014:	08009039 	.word	0x08009039
 8009018:	08009041 	.word	0x08009041
 800901c:	08009049 	.word	0x08009049
 8009020:	2300      	movs	r3, #0
 8009022:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009026:	e18a      	b.n	800933e <UART_SetConfig+0x7ae>
 8009028:	2304      	movs	r3, #4
 800902a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800902e:	e186      	b.n	800933e <UART_SetConfig+0x7ae>
 8009030:	2308      	movs	r3, #8
 8009032:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009036:	e182      	b.n	800933e <UART_SetConfig+0x7ae>
 8009038:	2310      	movs	r3, #16
 800903a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800903e:	e17e      	b.n	800933e <UART_SetConfig+0x7ae>
 8009040:	2320      	movs	r3, #32
 8009042:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009046:	e17a      	b.n	800933e <UART_SetConfig+0x7ae>
 8009048:	2340      	movs	r3, #64	@ 0x40
 800904a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800904e:	e176      	b.n	800933e <UART_SetConfig+0x7ae>
 8009050:	2380      	movs	r3, #128	@ 0x80
 8009052:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009056:	e172      	b.n	800933e <UART_SetConfig+0x7ae>
 8009058:	697b      	ldr	r3, [r7, #20]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	4a5b      	ldr	r2, [pc, #364]	@ (80091cc <UART_SetConfig+0x63c>)
 800905e:	4293      	cmp	r3, r2
 8009060:	d130      	bne.n	80090c4 <UART_SetConfig+0x534>
 8009062:	4b58      	ldr	r3, [pc, #352]	@ (80091c4 <UART_SetConfig+0x634>)
 8009064:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009066:	f003 0307 	and.w	r3, r3, #7
 800906a:	2b05      	cmp	r3, #5
 800906c:	d826      	bhi.n	80090bc <UART_SetConfig+0x52c>
 800906e:	a201      	add	r2, pc, #4	@ (adr r2, 8009074 <UART_SetConfig+0x4e4>)
 8009070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009074:	0800908d 	.word	0x0800908d
 8009078:	08009095 	.word	0x08009095
 800907c:	0800909d 	.word	0x0800909d
 8009080:	080090a5 	.word	0x080090a5
 8009084:	080090ad 	.word	0x080090ad
 8009088:	080090b5 	.word	0x080090b5
 800908c:	2300      	movs	r3, #0
 800908e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009092:	e154      	b.n	800933e <UART_SetConfig+0x7ae>
 8009094:	2304      	movs	r3, #4
 8009096:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800909a:	e150      	b.n	800933e <UART_SetConfig+0x7ae>
 800909c:	2308      	movs	r3, #8
 800909e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090a2:	e14c      	b.n	800933e <UART_SetConfig+0x7ae>
 80090a4:	2310      	movs	r3, #16
 80090a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090aa:	e148      	b.n	800933e <UART_SetConfig+0x7ae>
 80090ac:	2320      	movs	r3, #32
 80090ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090b2:	e144      	b.n	800933e <UART_SetConfig+0x7ae>
 80090b4:	2340      	movs	r3, #64	@ 0x40
 80090b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090ba:	e140      	b.n	800933e <UART_SetConfig+0x7ae>
 80090bc:	2380      	movs	r3, #128	@ 0x80
 80090be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090c2:	e13c      	b.n	800933e <UART_SetConfig+0x7ae>
 80090c4:	697b      	ldr	r3, [r7, #20]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	4a41      	ldr	r2, [pc, #260]	@ (80091d0 <UART_SetConfig+0x640>)
 80090ca:	4293      	cmp	r3, r2
 80090cc:	f040 8082 	bne.w	80091d4 <UART_SetConfig+0x644>
 80090d0:	4b3c      	ldr	r3, [pc, #240]	@ (80091c4 <UART_SetConfig+0x634>)
 80090d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80090d4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80090d8:	2b28      	cmp	r3, #40	@ 0x28
 80090da:	d86d      	bhi.n	80091b8 <UART_SetConfig+0x628>
 80090dc:	a201      	add	r2, pc, #4	@ (adr r2, 80090e4 <UART_SetConfig+0x554>)
 80090de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090e2:	bf00      	nop
 80090e4:	08009189 	.word	0x08009189
 80090e8:	080091b9 	.word	0x080091b9
 80090ec:	080091b9 	.word	0x080091b9
 80090f0:	080091b9 	.word	0x080091b9
 80090f4:	080091b9 	.word	0x080091b9
 80090f8:	080091b9 	.word	0x080091b9
 80090fc:	080091b9 	.word	0x080091b9
 8009100:	080091b9 	.word	0x080091b9
 8009104:	08009191 	.word	0x08009191
 8009108:	080091b9 	.word	0x080091b9
 800910c:	080091b9 	.word	0x080091b9
 8009110:	080091b9 	.word	0x080091b9
 8009114:	080091b9 	.word	0x080091b9
 8009118:	080091b9 	.word	0x080091b9
 800911c:	080091b9 	.word	0x080091b9
 8009120:	080091b9 	.word	0x080091b9
 8009124:	08009199 	.word	0x08009199
 8009128:	080091b9 	.word	0x080091b9
 800912c:	080091b9 	.word	0x080091b9
 8009130:	080091b9 	.word	0x080091b9
 8009134:	080091b9 	.word	0x080091b9
 8009138:	080091b9 	.word	0x080091b9
 800913c:	080091b9 	.word	0x080091b9
 8009140:	080091b9 	.word	0x080091b9
 8009144:	080091a1 	.word	0x080091a1
 8009148:	080091b9 	.word	0x080091b9
 800914c:	080091b9 	.word	0x080091b9
 8009150:	080091b9 	.word	0x080091b9
 8009154:	080091b9 	.word	0x080091b9
 8009158:	080091b9 	.word	0x080091b9
 800915c:	080091b9 	.word	0x080091b9
 8009160:	080091b9 	.word	0x080091b9
 8009164:	080091a9 	.word	0x080091a9
 8009168:	080091b9 	.word	0x080091b9
 800916c:	080091b9 	.word	0x080091b9
 8009170:	080091b9 	.word	0x080091b9
 8009174:	080091b9 	.word	0x080091b9
 8009178:	080091b9 	.word	0x080091b9
 800917c:	080091b9 	.word	0x080091b9
 8009180:	080091b9 	.word	0x080091b9
 8009184:	080091b1 	.word	0x080091b1
 8009188:	2301      	movs	r3, #1
 800918a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800918e:	e0d6      	b.n	800933e <UART_SetConfig+0x7ae>
 8009190:	2304      	movs	r3, #4
 8009192:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009196:	e0d2      	b.n	800933e <UART_SetConfig+0x7ae>
 8009198:	2308      	movs	r3, #8
 800919a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800919e:	e0ce      	b.n	800933e <UART_SetConfig+0x7ae>
 80091a0:	2310      	movs	r3, #16
 80091a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091a6:	e0ca      	b.n	800933e <UART_SetConfig+0x7ae>
 80091a8:	2320      	movs	r3, #32
 80091aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091ae:	e0c6      	b.n	800933e <UART_SetConfig+0x7ae>
 80091b0:	2340      	movs	r3, #64	@ 0x40
 80091b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091b6:	e0c2      	b.n	800933e <UART_SetConfig+0x7ae>
 80091b8:	2380      	movs	r3, #128	@ 0x80
 80091ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091be:	e0be      	b.n	800933e <UART_SetConfig+0x7ae>
 80091c0:	40011400 	.word	0x40011400
 80091c4:	58024400 	.word	0x58024400
 80091c8:	40007800 	.word	0x40007800
 80091cc:	40007c00 	.word	0x40007c00
 80091d0:	40011800 	.word	0x40011800
 80091d4:	697b      	ldr	r3, [r7, #20]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	4aad      	ldr	r2, [pc, #692]	@ (8009490 <UART_SetConfig+0x900>)
 80091da:	4293      	cmp	r3, r2
 80091dc:	d176      	bne.n	80092cc <UART_SetConfig+0x73c>
 80091de:	4bad      	ldr	r3, [pc, #692]	@ (8009494 <UART_SetConfig+0x904>)
 80091e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80091e2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80091e6:	2b28      	cmp	r3, #40	@ 0x28
 80091e8:	d86c      	bhi.n	80092c4 <UART_SetConfig+0x734>
 80091ea:	a201      	add	r2, pc, #4	@ (adr r2, 80091f0 <UART_SetConfig+0x660>)
 80091ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091f0:	08009295 	.word	0x08009295
 80091f4:	080092c5 	.word	0x080092c5
 80091f8:	080092c5 	.word	0x080092c5
 80091fc:	080092c5 	.word	0x080092c5
 8009200:	080092c5 	.word	0x080092c5
 8009204:	080092c5 	.word	0x080092c5
 8009208:	080092c5 	.word	0x080092c5
 800920c:	080092c5 	.word	0x080092c5
 8009210:	0800929d 	.word	0x0800929d
 8009214:	080092c5 	.word	0x080092c5
 8009218:	080092c5 	.word	0x080092c5
 800921c:	080092c5 	.word	0x080092c5
 8009220:	080092c5 	.word	0x080092c5
 8009224:	080092c5 	.word	0x080092c5
 8009228:	080092c5 	.word	0x080092c5
 800922c:	080092c5 	.word	0x080092c5
 8009230:	080092a5 	.word	0x080092a5
 8009234:	080092c5 	.word	0x080092c5
 8009238:	080092c5 	.word	0x080092c5
 800923c:	080092c5 	.word	0x080092c5
 8009240:	080092c5 	.word	0x080092c5
 8009244:	080092c5 	.word	0x080092c5
 8009248:	080092c5 	.word	0x080092c5
 800924c:	080092c5 	.word	0x080092c5
 8009250:	080092ad 	.word	0x080092ad
 8009254:	080092c5 	.word	0x080092c5
 8009258:	080092c5 	.word	0x080092c5
 800925c:	080092c5 	.word	0x080092c5
 8009260:	080092c5 	.word	0x080092c5
 8009264:	080092c5 	.word	0x080092c5
 8009268:	080092c5 	.word	0x080092c5
 800926c:	080092c5 	.word	0x080092c5
 8009270:	080092b5 	.word	0x080092b5
 8009274:	080092c5 	.word	0x080092c5
 8009278:	080092c5 	.word	0x080092c5
 800927c:	080092c5 	.word	0x080092c5
 8009280:	080092c5 	.word	0x080092c5
 8009284:	080092c5 	.word	0x080092c5
 8009288:	080092c5 	.word	0x080092c5
 800928c:	080092c5 	.word	0x080092c5
 8009290:	080092bd 	.word	0x080092bd
 8009294:	2301      	movs	r3, #1
 8009296:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800929a:	e050      	b.n	800933e <UART_SetConfig+0x7ae>
 800929c:	2304      	movs	r3, #4
 800929e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092a2:	e04c      	b.n	800933e <UART_SetConfig+0x7ae>
 80092a4:	2308      	movs	r3, #8
 80092a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092aa:	e048      	b.n	800933e <UART_SetConfig+0x7ae>
 80092ac:	2310      	movs	r3, #16
 80092ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092b2:	e044      	b.n	800933e <UART_SetConfig+0x7ae>
 80092b4:	2320      	movs	r3, #32
 80092b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092ba:	e040      	b.n	800933e <UART_SetConfig+0x7ae>
 80092bc:	2340      	movs	r3, #64	@ 0x40
 80092be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092c2:	e03c      	b.n	800933e <UART_SetConfig+0x7ae>
 80092c4:	2380      	movs	r3, #128	@ 0x80
 80092c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092ca:	e038      	b.n	800933e <UART_SetConfig+0x7ae>
 80092cc:	697b      	ldr	r3, [r7, #20]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	4a71      	ldr	r2, [pc, #452]	@ (8009498 <UART_SetConfig+0x908>)
 80092d2:	4293      	cmp	r3, r2
 80092d4:	d130      	bne.n	8009338 <UART_SetConfig+0x7a8>
 80092d6:	4b6f      	ldr	r3, [pc, #444]	@ (8009494 <UART_SetConfig+0x904>)
 80092d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80092da:	f003 0307 	and.w	r3, r3, #7
 80092de:	2b05      	cmp	r3, #5
 80092e0:	d826      	bhi.n	8009330 <UART_SetConfig+0x7a0>
 80092e2:	a201      	add	r2, pc, #4	@ (adr r2, 80092e8 <UART_SetConfig+0x758>)
 80092e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092e8:	08009301 	.word	0x08009301
 80092ec:	08009309 	.word	0x08009309
 80092f0:	08009311 	.word	0x08009311
 80092f4:	08009319 	.word	0x08009319
 80092f8:	08009321 	.word	0x08009321
 80092fc:	08009329 	.word	0x08009329
 8009300:	2302      	movs	r3, #2
 8009302:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009306:	e01a      	b.n	800933e <UART_SetConfig+0x7ae>
 8009308:	2304      	movs	r3, #4
 800930a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800930e:	e016      	b.n	800933e <UART_SetConfig+0x7ae>
 8009310:	2308      	movs	r3, #8
 8009312:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009316:	e012      	b.n	800933e <UART_SetConfig+0x7ae>
 8009318:	2310      	movs	r3, #16
 800931a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800931e:	e00e      	b.n	800933e <UART_SetConfig+0x7ae>
 8009320:	2320      	movs	r3, #32
 8009322:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009326:	e00a      	b.n	800933e <UART_SetConfig+0x7ae>
 8009328:	2340      	movs	r3, #64	@ 0x40
 800932a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800932e:	e006      	b.n	800933e <UART_SetConfig+0x7ae>
 8009330:	2380      	movs	r3, #128	@ 0x80
 8009332:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009336:	e002      	b.n	800933e <UART_SetConfig+0x7ae>
 8009338:	2380      	movs	r3, #128	@ 0x80
 800933a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800933e:	697b      	ldr	r3, [r7, #20]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	4a55      	ldr	r2, [pc, #340]	@ (8009498 <UART_SetConfig+0x908>)
 8009344:	4293      	cmp	r3, r2
 8009346:	f040 80f8 	bne.w	800953a <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800934a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800934e:	2b20      	cmp	r3, #32
 8009350:	dc46      	bgt.n	80093e0 <UART_SetConfig+0x850>
 8009352:	2b02      	cmp	r3, #2
 8009354:	db75      	blt.n	8009442 <UART_SetConfig+0x8b2>
 8009356:	3b02      	subs	r3, #2
 8009358:	2b1e      	cmp	r3, #30
 800935a:	d872      	bhi.n	8009442 <UART_SetConfig+0x8b2>
 800935c:	a201      	add	r2, pc, #4	@ (adr r2, 8009364 <UART_SetConfig+0x7d4>)
 800935e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009362:	bf00      	nop
 8009364:	080093e7 	.word	0x080093e7
 8009368:	08009443 	.word	0x08009443
 800936c:	080093ef 	.word	0x080093ef
 8009370:	08009443 	.word	0x08009443
 8009374:	08009443 	.word	0x08009443
 8009378:	08009443 	.word	0x08009443
 800937c:	080093ff 	.word	0x080093ff
 8009380:	08009443 	.word	0x08009443
 8009384:	08009443 	.word	0x08009443
 8009388:	08009443 	.word	0x08009443
 800938c:	08009443 	.word	0x08009443
 8009390:	08009443 	.word	0x08009443
 8009394:	08009443 	.word	0x08009443
 8009398:	08009443 	.word	0x08009443
 800939c:	0800940f 	.word	0x0800940f
 80093a0:	08009443 	.word	0x08009443
 80093a4:	08009443 	.word	0x08009443
 80093a8:	08009443 	.word	0x08009443
 80093ac:	08009443 	.word	0x08009443
 80093b0:	08009443 	.word	0x08009443
 80093b4:	08009443 	.word	0x08009443
 80093b8:	08009443 	.word	0x08009443
 80093bc:	08009443 	.word	0x08009443
 80093c0:	08009443 	.word	0x08009443
 80093c4:	08009443 	.word	0x08009443
 80093c8:	08009443 	.word	0x08009443
 80093cc:	08009443 	.word	0x08009443
 80093d0:	08009443 	.word	0x08009443
 80093d4:	08009443 	.word	0x08009443
 80093d8:	08009443 	.word	0x08009443
 80093dc:	08009435 	.word	0x08009435
 80093e0:	2b40      	cmp	r3, #64	@ 0x40
 80093e2:	d02a      	beq.n	800943a <UART_SetConfig+0x8aa>
 80093e4:	e02d      	b.n	8009442 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80093e6:	f7fc fff7 	bl	80063d8 <HAL_RCCEx_GetD3PCLK1Freq>
 80093ea:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80093ec:	e02f      	b.n	800944e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80093ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80093f2:	4618      	mov	r0, r3
 80093f4:	f7fd f806 	bl	8006404 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80093f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80093fc:	e027      	b.n	800944e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80093fe:	f107 0318 	add.w	r3, r7, #24
 8009402:	4618      	mov	r0, r3
 8009404:	f7fd f952 	bl	80066ac <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009408:	69fb      	ldr	r3, [r7, #28]
 800940a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800940c:	e01f      	b.n	800944e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800940e:	4b21      	ldr	r3, [pc, #132]	@ (8009494 <UART_SetConfig+0x904>)
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	f003 0320 	and.w	r3, r3, #32
 8009416:	2b00      	cmp	r3, #0
 8009418:	d009      	beq.n	800942e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800941a:	4b1e      	ldr	r3, [pc, #120]	@ (8009494 <UART_SetConfig+0x904>)
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	08db      	lsrs	r3, r3, #3
 8009420:	f003 0303 	and.w	r3, r3, #3
 8009424:	4a1d      	ldr	r2, [pc, #116]	@ (800949c <UART_SetConfig+0x90c>)
 8009426:	fa22 f303 	lsr.w	r3, r2, r3
 800942a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800942c:	e00f      	b.n	800944e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800942e:	4b1b      	ldr	r3, [pc, #108]	@ (800949c <UART_SetConfig+0x90c>)
 8009430:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009432:	e00c      	b.n	800944e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009434:	4b1a      	ldr	r3, [pc, #104]	@ (80094a0 <UART_SetConfig+0x910>)
 8009436:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009438:	e009      	b.n	800944e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800943a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800943e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009440:	e005      	b.n	800944e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8009442:	2300      	movs	r3, #0
 8009444:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009446:	2301      	movs	r3, #1
 8009448:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800944c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800944e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009450:	2b00      	cmp	r3, #0
 8009452:	f000 81ee 	beq.w	8009832 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009456:	697b      	ldr	r3, [r7, #20]
 8009458:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800945a:	4a12      	ldr	r2, [pc, #72]	@ (80094a4 <UART_SetConfig+0x914>)
 800945c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009460:	461a      	mov	r2, r3
 8009462:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009464:	fbb3 f3f2 	udiv	r3, r3, r2
 8009468:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800946a:	697b      	ldr	r3, [r7, #20]
 800946c:	685a      	ldr	r2, [r3, #4]
 800946e:	4613      	mov	r3, r2
 8009470:	005b      	lsls	r3, r3, #1
 8009472:	4413      	add	r3, r2
 8009474:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009476:	429a      	cmp	r2, r3
 8009478:	d305      	bcc.n	8009486 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800947a:	697b      	ldr	r3, [r7, #20]
 800947c:	685b      	ldr	r3, [r3, #4]
 800947e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009480:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009482:	429a      	cmp	r2, r3
 8009484:	d910      	bls.n	80094a8 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8009486:	2301      	movs	r3, #1
 8009488:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800948c:	e1d1      	b.n	8009832 <UART_SetConfig+0xca2>
 800948e:	bf00      	nop
 8009490:	40011c00 	.word	0x40011c00
 8009494:	58024400 	.word	0x58024400
 8009498:	58000c00 	.word	0x58000c00
 800949c:	03d09000 	.word	0x03d09000
 80094a0:	003d0900 	.word	0x003d0900
 80094a4:	08009f38 	.word	0x08009f38
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80094a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80094aa:	2200      	movs	r2, #0
 80094ac:	60bb      	str	r3, [r7, #8]
 80094ae:	60fa      	str	r2, [r7, #12]
 80094b0:	697b      	ldr	r3, [r7, #20]
 80094b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094b4:	4ac0      	ldr	r2, [pc, #768]	@ (80097b8 <UART_SetConfig+0xc28>)
 80094b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80094ba:	b29b      	uxth	r3, r3
 80094bc:	2200      	movs	r2, #0
 80094be:	603b      	str	r3, [r7, #0]
 80094c0:	607a      	str	r2, [r7, #4]
 80094c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80094c6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80094ca:	f7f6 ff0f 	bl	80002ec <__aeabi_uldivmod>
 80094ce:	4602      	mov	r2, r0
 80094d0:	460b      	mov	r3, r1
 80094d2:	4610      	mov	r0, r2
 80094d4:	4619      	mov	r1, r3
 80094d6:	f04f 0200 	mov.w	r2, #0
 80094da:	f04f 0300 	mov.w	r3, #0
 80094de:	020b      	lsls	r3, r1, #8
 80094e0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80094e4:	0202      	lsls	r2, r0, #8
 80094e6:	6979      	ldr	r1, [r7, #20]
 80094e8:	6849      	ldr	r1, [r1, #4]
 80094ea:	0849      	lsrs	r1, r1, #1
 80094ec:	2000      	movs	r0, #0
 80094ee:	460c      	mov	r4, r1
 80094f0:	4605      	mov	r5, r0
 80094f2:	eb12 0804 	adds.w	r8, r2, r4
 80094f6:	eb43 0905 	adc.w	r9, r3, r5
 80094fa:	697b      	ldr	r3, [r7, #20]
 80094fc:	685b      	ldr	r3, [r3, #4]
 80094fe:	2200      	movs	r2, #0
 8009500:	469a      	mov	sl, r3
 8009502:	4693      	mov	fp, r2
 8009504:	4652      	mov	r2, sl
 8009506:	465b      	mov	r3, fp
 8009508:	4640      	mov	r0, r8
 800950a:	4649      	mov	r1, r9
 800950c:	f7f6 feee 	bl	80002ec <__aeabi_uldivmod>
 8009510:	4602      	mov	r2, r0
 8009512:	460b      	mov	r3, r1
 8009514:	4613      	mov	r3, r2
 8009516:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009518:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800951a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800951e:	d308      	bcc.n	8009532 <UART_SetConfig+0x9a2>
 8009520:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009522:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009526:	d204      	bcs.n	8009532 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8009528:	697b      	ldr	r3, [r7, #20]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800952e:	60da      	str	r2, [r3, #12]
 8009530:	e17f      	b.n	8009832 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8009532:	2301      	movs	r3, #1
 8009534:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009538:	e17b      	b.n	8009832 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800953a:	697b      	ldr	r3, [r7, #20]
 800953c:	69db      	ldr	r3, [r3, #28]
 800953e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009542:	f040 80bd 	bne.w	80096c0 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8009546:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800954a:	2b20      	cmp	r3, #32
 800954c:	dc48      	bgt.n	80095e0 <UART_SetConfig+0xa50>
 800954e:	2b00      	cmp	r3, #0
 8009550:	db7b      	blt.n	800964a <UART_SetConfig+0xaba>
 8009552:	2b20      	cmp	r3, #32
 8009554:	d879      	bhi.n	800964a <UART_SetConfig+0xaba>
 8009556:	a201      	add	r2, pc, #4	@ (adr r2, 800955c <UART_SetConfig+0x9cc>)
 8009558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800955c:	080095e7 	.word	0x080095e7
 8009560:	080095ef 	.word	0x080095ef
 8009564:	0800964b 	.word	0x0800964b
 8009568:	0800964b 	.word	0x0800964b
 800956c:	080095f7 	.word	0x080095f7
 8009570:	0800964b 	.word	0x0800964b
 8009574:	0800964b 	.word	0x0800964b
 8009578:	0800964b 	.word	0x0800964b
 800957c:	08009607 	.word	0x08009607
 8009580:	0800964b 	.word	0x0800964b
 8009584:	0800964b 	.word	0x0800964b
 8009588:	0800964b 	.word	0x0800964b
 800958c:	0800964b 	.word	0x0800964b
 8009590:	0800964b 	.word	0x0800964b
 8009594:	0800964b 	.word	0x0800964b
 8009598:	0800964b 	.word	0x0800964b
 800959c:	08009617 	.word	0x08009617
 80095a0:	0800964b 	.word	0x0800964b
 80095a4:	0800964b 	.word	0x0800964b
 80095a8:	0800964b 	.word	0x0800964b
 80095ac:	0800964b 	.word	0x0800964b
 80095b0:	0800964b 	.word	0x0800964b
 80095b4:	0800964b 	.word	0x0800964b
 80095b8:	0800964b 	.word	0x0800964b
 80095bc:	0800964b 	.word	0x0800964b
 80095c0:	0800964b 	.word	0x0800964b
 80095c4:	0800964b 	.word	0x0800964b
 80095c8:	0800964b 	.word	0x0800964b
 80095cc:	0800964b 	.word	0x0800964b
 80095d0:	0800964b 	.word	0x0800964b
 80095d4:	0800964b 	.word	0x0800964b
 80095d8:	0800964b 	.word	0x0800964b
 80095dc:	0800963d 	.word	0x0800963d
 80095e0:	2b40      	cmp	r3, #64	@ 0x40
 80095e2:	d02e      	beq.n	8009642 <UART_SetConfig+0xab2>
 80095e4:	e031      	b.n	800964a <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80095e6:	f7fb fd0d 	bl	8005004 <HAL_RCC_GetPCLK1Freq>
 80095ea:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80095ec:	e033      	b.n	8009656 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80095ee:	f7fb fd1f 	bl	8005030 <HAL_RCC_GetPCLK2Freq>
 80095f2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80095f4:	e02f      	b.n	8009656 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80095f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80095fa:	4618      	mov	r0, r3
 80095fc:	f7fc ff02 	bl	8006404 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009600:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009602:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009604:	e027      	b.n	8009656 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009606:	f107 0318 	add.w	r3, r7, #24
 800960a:	4618      	mov	r0, r3
 800960c:	f7fd f84e 	bl	80066ac <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009610:	69fb      	ldr	r3, [r7, #28]
 8009612:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009614:	e01f      	b.n	8009656 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009616:	4b69      	ldr	r3, [pc, #420]	@ (80097bc <UART_SetConfig+0xc2c>)
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	f003 0320 	and.w	r3, r3, #32
 800961e:	2b00      	cmp	r3, #0
 8009620:	d009      	beq.n	8009636 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009622:	4b66      	ldr	r3, [pc, #408]	@ (80097bc <UART_SetConfig+0xc2c>)
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	08db      	lsrs	r3, r3, #3
 8009628:	f003 0303 	and.w	r3, r3, #3
 800962c:	4a64      	ldr	r2, [pc, #400]	@ (80097c0 <UART_SetConfig+0xc30>)
 800962e:	fa22 f303 	lsr.w	r3, r2, r3
 8009632:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009634:	e00f      	b.n	8009656 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8009636:	4b62      	ldr	r3, [pc, #392]	@ (80097c0 <UART_SetConfig+0xc30>)
 8009638:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800963a:	e00c      	b.n	8009656 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800963c:	4b61      	ldr	r3, [pc, #388]	@ (80097c4 <UART_SetConfig+0xc34>)
 800963e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009640:	e009      	b.n	8009656 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009642:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009646:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009648:	e005      	b.n	8009656 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800964a:	2300      	movs	r3, #0
 800964c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800964e:	2301      	movs	r3, #1
 8009650:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009654:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009656:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009658:	2b00      	cmp	r3, #0
 800965a:	f000 80ea 	beq.w	8009832 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800965e:	697b      	ldr	r3, [r7, #20]
 8009660:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009662:	4a55      	ldr	r2, [pc, #340]	@ (80097b8 <UART_SetConfig+0xc28>)
 8009664:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009668:	461a      	mov	r2, r3
 800966a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800966c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009670:	005a      	lsls	r2, r3, #1
 8009672:	697b      	ldr	r3, [r7, #20]
 8009674:	685b      	ldr	r3, [r3, #4]
 8009676:	085b      	lsrs	r3, r3, #1
 8009678:	441a      	add	r2, r3
 800967a:	697b      	ldr	r3, [r7, #20]
 800967c:	685b      	ldr	r3, [r3, #4]
 800967e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009682:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009684:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009686:	2b0f      	cmp	r3, #15
 8009688:	d916      	bls.n	80096b8 <UART_SetConfig+0xb28>
 800968a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800968c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009690:	d212      	bcs.n	80096b8 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009692:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009694:	b29b      	uxth	r3, r3
 8009696:	f023 030f 	bic.w	r3, r3, #15
 800969a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800969c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800969e:	085b      	lsrs	r3, r3, #1
 80096a0:	b29b      	uxth	r3, r3
 80096a2:	f003 0307 	and.w	r3, r3, #7
 80096a6:	b29a      	uxth	r2, r3
 80096a8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80096aa:	4313      	orrs	r3, r2
 80096ac:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80096ae:	697b      	ldr	r3, [r7, #20]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80096b4:	60da      	str	r2, [r3, #12]
 80096b6:	e0bc      	b.n	8009832 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80096b8:	2301      	movs	r3, #1
 80096ba:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80096be:	e0b8      	b.n	8009832 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80096c0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80096c4:	2b20      	cmp	r3, #32
 80096c6:	dc4b      	bgt.n	8009760 <UART_SetConfig+0xbd0>
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	f2c0 8087 	blt.w	80097dc <UART_SetConfig+0xc4c>
 80096ce:	2b20      	cmp	r3, #32
 80096d0:	f200 8084 	bhi.w	80097dc <UART_SetConfig+0xc4c>
 80096d4:	a201      	add	r2, pc, #4	@ (adr r2, 80096dc <UART_SetConfig+0xb4c>)
 80096d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096da:	bf00      	nop
 80096dc:	08009767 	.word	0x08009767
 80096e0:	0800976f 	.word	0x0800976f
 80096e4:	080097dd 	.word	0x080097dd
 80096e8:	080097dd 	.word	0x080097dd
 80096ec:	08009777 	.word	0x08009777
 80096f0:	080097dd 	.word	0x080097dd
 80096f4:	080097dd 	.word	0x080097dd
 80096f8:	080097dd 	.word	0x080097dd
 80096fc:	08009787 	.word	0x08009787
 8009700:	080097dd 	.word	0x080097dd
 8009704:	080097dd 	.word	0x080097dd
 8009708:	080097dd 	.word	0x080097dd
 800970c:	080097dd 	.word	0x080097dd
 8009710:	080097dd 	.word	0x080097dd
 8009714:	080097dd 	.word	0x080097dd
 8009718:	080097dd 	.word	0x080097dd
 800971c:	08009797 	.word	0x08009797
 8009720:	080097dd 	.word	0x080097dd
 8009724:	080097dd 	.word	0x080097dd
 8009728:	080097dd 	.word	0x080097dd
 800972c:	080097dd 	.word	0x080097dd
 8009730:	080097dd 	.word	0x080097dd
 8009734:	080097dd 	.word	0x080097dd
 8009738:	080097dd 	.word	0x080097dd
 800973c:	080097dd 	.word	0x080097dd
 8009740:	080097dd 	.word	0x080097dd
 8009744:	080097dd 	.word	0x080097dd
 8009748:	080097dd 	.word	0x080097dd
 800974c:	080097dd 	.word	0x080097dd
 8009750:	080097dd 	.word	0x080097dd
 8009754:	080097dd 	.word	0x080097dd
 8009758:	080097dd 	.word	0x080097dd
 800975c:	080097cf 	.word	0x080097cf
 8009760:	2b40      	cmp	r3, #64	@ 0x40
 8009762:	d037      	beq.n	80097d4 <UART_SetConfig+0xc44>
 8009764:	e03a      	b.n	80097dc <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009766:	f7fb fc4d 	bl	8005004 <HAL_RCC_GetPCLK1Freq>
 800976a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800976c:	e03c      	b.n	80097e8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800976e:	f7fb fc5f 	bl	8005030 <HAL_RCC_GetPCLK2Freq>
 8009772:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009774:	e038      	b.n	80097e8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009776:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800977a:	4618      	mov	r0, r3
 800977c:	f7fc fe42 	bl	8006404 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009780:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009782:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009784:	e030      	b.n	80097e8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009786:	f107 0318 	add.w	r3, r7, #24
 800978a:	4618      	mov	r0, r3
 800978c:	f7fc ff8e 	bl	80066ac <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009790:	69fb      	ldr	r3, [r7, #28]
 8009792:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009794:	e028      	b.n	80097e8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009796:	4b09      	ldr	r3, [pc, #36]	@ (80097bc <UART_SetConfig+0xc2c>)
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	f003 0320 	and.w	r3, r3, #32
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d012      	beq.n	80097c8 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80097a2:	4b06      	ldr	r3, [pc, #24]	@ (80097bc <UART_SetConfig+0xc2c>)
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	08db      	lsrs	r3, r3, #3
 80097a8:	f003 0303 	and.w	r3, r3, #3
 80097ac:	4a04      	ldr	r2, [pc, #16]	@ (80097c0 <UART_SetConfig+0xc30>)
 80097ae:	fa22 f303 	lsr.w	r3, r2, r3
 80097b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80097b4:	e018      	b.n	80097e8 <UART_SetConfig+0xc58>
 80097b6:	bf00      	nop
 80097b8:	08009f38 	.word	0x08009f38
 80097bc:	58024400 	.word	0x58024400
 80097c0:	03d09000 	.word	0x03d09000
 80097c4:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 80097c8:	4b24      	ldr	r3, [pc, #144]	@ (800985c <UART_SetConfig+0xccc>)
 80097ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80097cc:	e00c      	b.n	80097e8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80097ce:	4b24      	ldr	r3, [pc, #144]	@ (8009860 <UART_SetConfig+0xcd0>)
 80097d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80097d2:	e009      	b.n	80097e8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80097d4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80097d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80097da:	e005      	b.n	80097e8 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 80097dc:	2300      	movs	r3, #0
 80097de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80097e0:	2301      	movs	r3, #1
 80097e2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80097e6:	bf00      	nop
    }

    if (pclk != 0U)
 80097e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d021      	beq.n	8009832 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80097ee:	697b      	ldr	r3, [r7, #20]
 80097f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097f2:	4a1c      	ldr	r2, [pc, #112]	@ (8009864 <UART_SetConfig+0xcd4>)
 80097f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80097f8:	461a      	mov	r2, r3
 80097fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80097fc:	fbb3 f2f2 	udiv	r2, r3, r2
 8009800:	697b      	ldr	r3, [r7, #20]
 8009802:	685b      	ldr	r3, [r3, #4]
 8009804:	085b      	lsrs	r3, r3, #1
 8009806:	441a      	add	r2, r3
 8009808:	697b      	ldr	r3, [r7, #20]
 800980a:	685b      	ldr	r3, [r3, #4]
 800980c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009810:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009812:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009814:	2b0f      	cmp	r3, #15
 8009816:	d909      	bls.n	800982c <UART_SetConfig+0xc9c>
 8009818:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800981a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800981e:	d205      	bcs.n	800982c <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009820:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009822:	b29a      	uxth	r2, r3
 8009824:	697b      	ldr	r3, [r7, #20]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	60da      	str	r2, [r3, #12]
 800982a:	e002      	b.n	8009832 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800982c:	2301      	movs	r3, #1
 800982e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009832:	697b      	ldr	r3, [r7, #20]
 8009834:	2201      	movs	r2, #1
 8009836:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800983a:	697b      	ldr	r3, [r7, #20]
 800983c:	2201      	movs	r2, #1
 800983e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009842:	697b      	ldr	r3, [r7, #20]
 8009844:	2200      	movs	r2, #0
 8009846:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009848:	697b      	ldr	r3, [r7, #20]
 800984a:	2200      	movs	r2, #0
 800984c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800984e:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8009852:	4618      	mov	r0, r3
 8009854:	3748      	adds	r7, #72	@ 0x48
 8009856:	46bd      	mov	sp, r7
 8009858:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800985c:	03d09000 	.word	0x03d09000
 8009860:	003d0900 	.word	0x003d0900
 8009864:	08009f38 	.word	0x08009f38

08009868 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009868:	b480      	push	{r7}
 800986a:	b083      	sub	sp, #12
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009874:	f003 0308 	and.w	r3, r3, #8
 8009878:	2b00      	cmp	r3, #0
 800987a:	d00a      	beq.n	8009892 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	685b      	ldr	r3, [r3, #4]
 8009882:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	430a      	orrs	r2, r1
 8009890:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009896:	f003 0301 	and.w	r3, r3, #1
 800989a:	2b00      	cmp	r3, #0
 800989c:	d00a      	beq.n	80098b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	685b      	ldr	r3, [r3, #4]
 80098a4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	430a      	orrs	r2, r1
 80098b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098b8:	f003 0302 	and.w	r3, r3, #2
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d00a      	beq.n	80098d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	685b      	ldr	r3, [r3, #4]
 80098c6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	430a      	orrs	r2, r1
 80098d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098da:	f003 0304 	and.w	r3, r3, #4
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d00a      	beq.n	80098f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	685b      	ldr	r3, [r3, #4]
 80098e8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	430a      	orrs	r2, r1
 80098f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098fc:	f003 0310 	and.w	r3, r3, #16
 8009900:	2b00      	cmp	r3, #0
 8009902:	d00a      	beq.n	800991a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	689b      	ldr	r3, [r3, #8]
 800990a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	430a      	orrs	r2, r1
 8009918:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800991e:	f003 0320 	and.w	r3, r3, #32
 8009922:	2b00      	cmp	r3, #0
 8009924:	d00a      	beq.n	800993c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	689b      	ldr	r3, [r3, #8]
 800992c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	430a      	orrs	r2, r1
 800993a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009940:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009944:	2b00      	cmp	r3, #0
 8009946:	d01a      	beq.n	800997e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	685b      	ldr	r3, [r3, #4]
 800994e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	430a      	orrs	r2, r1
 800995c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009962:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009966:	d10a      	bne.n	800997e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	685b      	ldr	r3, [r3, #4]
 800996e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	430a      	orrs	r2, r1
 800997c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009982:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009986:	2b00      	cmp	r3, #0
 8009988:	d00a      	beq.n	80099a0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	685b      	ldr	r3, [r3, #4]
 8009990:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	430a      	orrs	r2, r1
 800999e:	605a      	str	r2, [r3, #4]
  }
}
 80099a0:	bf00      	nop
 80099a2:	370c      	adds	r7, #12
 80099a4:	46bd      	mov	sp, r7
 80099a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099aa:	4770      	bx	lr

080099ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80099ac:	b580      	push	{r7, lr}
 80099ae:	b098      	sub	sp, #96	@ 0x60
 80099b0:	af02      	add	r7, sp, #8
 80099b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	2200      	movs	r2, #0
 80099b8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80099bc:	f7f7 feb2 	bl	8001724 <HAL_GetTick>
 80099c0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	f003 0308 	and.w	r3, r3, #8
 80099cc:	2b08      	cmp	r3, #8
 80099ce:	d12f      	bne.n	8009a30 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80099d0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80099d4:	9300      	str	r3, [sp, #0]
 80099d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80099d8:	2200      	movs	r2, #0
 80099da:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80099de:	6878      	ldr	r0, [r7, #4]
 80099e0:	f000 f88e 	bl	8009b00 <UART_WaitOnFlagUntilTimeout>
 80099e4:	4603      	mov	r3, r0
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d022      	beq.n	8009a30 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099f2:	e853 3f00 	ldrex	r3, [r3]
 80099f6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80099f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80099fa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80099fe:	653b      	str	r3, [r7, #80]	@ 0x50
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	461a      	mov	r2, r3
 8009a06:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009a08:	647b      	str	r3, [r7, #68]	@ 0x44
 8009a0a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a0c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009a0e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009a10:	e841 2300 	strex	r3, r2, [r1]
 8009a14:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009a16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d1e6      	bne.n	80099ea <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	2220      	movs	r2, #32
 8009a20:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	2200      	movs	r2, #0
 8009a28:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009a2c:	2303      	movs	r3, #3
 8009a2e:	e063      	b.n	8009af8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	f003 0304 	and.w	r3, r3, #4
 8009a3a:	2b04      	cmp	r3, #4
 8009a3c:	d149      	bne.n	8009ad2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009a3e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009a42:	9300      	str	r3, [sp, #0]
 8009a44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009a46:	2200      	movs	r2, #0
 8009a48:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009a4c:	6878      	ldr	r0, [r7, #4]
 8009a4e:	f000 f857 	bl	8009b00 <UART_WaitOnFlagUntilTimeout>
 8009a52:	4603      	mov	r3, r0
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d03c      	beq.n	8009ad2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a60:	e853 3f00 	ldrex	r3, [r3]
 8009a64:	623b      	str	r3, [r7, #32]
   return(result);
 8009a66:	6a3b      	ldr	r3, [r7, #32]
 8009a68:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009a6c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	461a      	mov	r2, r3
 8009a74:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009a76:	633b      	str	r3, [r7, #48]	@ 0x30
 8009a78:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a7a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009a7c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009a7e:	e841 2300 	strex	r3, r2, [r1]
 8009a82:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009a84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d1e6      	bne.n	8009a58 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	3308      	adds	r3, #8
 8009a90:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a92:	693b      	ldr	r3, [r7, #16]
 8009a94:	e853 3f00 	ldrex	r3, [r3]
 8009a98:	60fb      	str	r3, [r7, #12]
   return(result);
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	f023 0301 	bic.w	r3, r3, #1
 8009aa0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	3308      	adds	r3, #8
 8009aa8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009aaa:	61fa      	str	r2, [r7, #28]
 8009aac:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009aae:	69b9      	ldr	r1, [r7, #24]
 8009ab0:	69fa      	ldr	r2, [r7, #28]
 8009ab2:	e841 2300 	strex	r3, r2, [r1]
 8009ab6:	617b      	str	r3, [r7, #20]
   return(result);
 8009ab8:	697b      	ldr	r3, [r7, #20]
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d1e5      	bne.n	8009a8a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	2220      	movs	r2, #32
 8009ac2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	2200      	movs	r2, #0
 8009aca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009ace:	2303      	movs	r3, #3
 8009ad0:	e012      	b.n	8009af8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	2220      	movs	r2, #32
 8009ad6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	2220      	movs	r2, #32
 8009ade:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	2200      	movs	r2, #0
 8009ae6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	2200      	movs	r2, #0
 8009aec:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	2200      	movs	r2, #0
 8009af2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009af6:	2300      	movs	r3, #0
}
 8009af8:	4618      	mov	r0, r3
 8009afa:	3758      	adds	r7, #88	@ 0x58
 8009afc:	46bd      	mov	sp, r7
 8009afe:	bd80      	pop	{r7, pc}

08009b00 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009b00:	b580      	push	{r7, lr}
 8009b02:	b084      	sub	sp, #16
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	60f8      	str	r0, [r7, #12]
 8009b08:	60b9      	str	r1, [r7, #8]
 8009b0a:	603b      	str	r3, [r7, #0]
 8009b0c:	4613      	mov	r3, r2
 8009b0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009b10:	e04f      	b.n	8009bb2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009b12:	69bb      	ldr	r3, [r7, #24]
 8009b14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b18:	d04b      	beq.n	8009bb2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009b1a:	f7f7 fe03 	bl	8001724 <HAL_GetTick>
 8009b1e:	4602      	mov	r2, r0
 8009b20:	683b      	ldr	r3, [r7, #0]
 8009b22:	1ad3      	subs	r3, r2, r3
 8009b24:	69ba      	ldr	r2, [r7, #24]
 8009b26:	429a      	cmp	r2, r3
 8009b28:	d302      	bcc.n	8009b30 <UART_WaitOnFlagUntilTimeout+0x30>
 8009b2a:	69bb      	ldr	r3, [r7, #24]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d101      	bne.n	8009b34 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009b30:	2303      	movs	r3, #3
 8009b32:	e04e      	b.n	8009bd2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	f003 0304 	and.w	r3, r3, #4
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d037      	beq.n	8009bb2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009b42:	68bb      	ldr	r3, [r7, #8]
 8009b44:	2b80      	cmp	r3, #128	@ 0x80
 8009b46:	d034      	beq.n	8009bb2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009b48:	68bb      	ldr	r3, [r7, #8]
 8009b4a:	2b40      	cmp	r3, #64	@ 0x40
 8009b4c:	d031      	beq.n	8009bb2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	69db      	ldr	r3, [r3, #28]
 8009b54:	f003 0308 	and.w	r3, r3, #8
 8009b58:	2b08      	cmp	r3, #8
 8009b5a:	d110      	bne.n	8009b7e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	2208      	movs	r2, #8
 8009b62:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009b64:	68f8      	ldr	r0, [r7, #12]
 8009b66:	f000 f839 	bl	8009bdc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	2208      	movs	r2, #8
 8009b6e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	2200      	movs	r2, #0
 8009b76:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8009b7a:	2301      	movs	r3, #1
 8009b7c:	e029      	b.n	8009bd2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	69db      	ldr	r3, [r3, #28]
 8009b84:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009b88:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009b8c:	d111      	bne.n	8009bb2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009b96:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009b98:	68f8      	ldr	r0, [r7, #12]
 8009b9a:	f000 f81f 	bl	8009bdc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	2220      	movs	r2, #32
 8009ba2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	2200      	movs	r2, #0
 8009baa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009bae:	2303      	movs	r3, #3
 8009bb0:	e00f      	b.n	8009bd2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	69da      	ldr	r2, [r3, #28]
 8009bb8:	68bb      	ldr	r3, [r7, #8]
 8009bba:	4013      	ands	r3, r2
 8009bbc:	68ba      	ldr	r2, [r7, #8]
 8009bbe:	429a      	cmp	r2, r3
 8009bc0:	bf0c      	ite	eq
 8009bc2:	2301      	moveq	r3, #1
 8009bc4:	2300      	movne	r3, #0
 8009bc6:	b2db      	uxtb	r3, r3
 8009bc8:	461a      	mov	r2, r3
 8009bca:	79fb      	ldrb	r3, [r7, #7]
 8009bcc:	429a      	cmp	r2, r3
 8009bce:	d0a0      	beq.n	8009b12 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009bd0:	2300      	movs	r3, #0
}
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	3710      	adds	r7, #16
 8009bd6:	46bd      	mov	sp, r7
 8009bd8:	bd80      	pop	{r7, pc}
	...

08009bdc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009bdc:	b480      	push	{r7}
 8009bde:	b095      	sub	sp, #84	@ 0x54
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009bec:	e853 3f00 	ldrex	r3, [r3]
 8009bf0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009bf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bf4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009bf8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	461a      	mov	r2, r3
 8009c00:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009c02:	643b      	str	r3, [r7, #64]	@ 0x40
 8009c04:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c06:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009c08:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009c0a:	e841 2300 	strex	r3, r2, [r1]
 8009c0e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009c10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d1e6      	bne.n	8009be4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	3308      	adds	r3, #8
 8009c1c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c1e:	6a3b      	ldr	r3, [r7, #32]
 8009c20:	e853 3f00 	ldrex	r3, [r3]
 8009c24:	61fb      	str	r3, [r7, #28]
   return(result);
 8009c26:	69fa      	ldr	r2, [r7, #28]
 8009c28:	4b1e      	ldr	r3, [pc, #120]	@ (8009ca4 <UART_EndRxTransfer+0xc8>)
 8009c2a:	4013      	ands	r3, r2
 8009c2c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	3308      	adds	r3, #8
 8009c34:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009c36:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009c38:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c3a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009c3c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009c3e:	e841 2300 	strex	r3, r2, [r1]
 8009c42:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d1e5      	bne.n	8009c16 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009c4e:	2b01      	cmp	r3, #1
 8009c50:	d118      	bne.n	8009c84 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	e853 3f00 	ldrex	r3, [r3]
 8009c5e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009c60:	68bb      	ldr	r3, [r7, #8]
 8009c62:	f023 0310 	bic.w	r3, r3, #16
 8009c66:	647b      	str	r3, [r7, #68]	@ 0x44
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	461a      	mov	r2, r3
 8009c6e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009c70:	61bb      	str	r3, [r7, #24]
 8009c72:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c74:	6979      	ldr	r1, [r7, #20]
 8009c76:	69ba      	ldr	r2, [r7, #24]
 8009c78:	e841 2300 	strex	r3, r2, [r1]
 8009c7c:	613b      	str	r3, [r7, #16]
   return(result);
 8009c7e:	693b      	ldr	r3, [r7, #16]
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d1e6      	bne.n	8009c52 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	2220      	movs	r2, #32
 8009c88:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	2200      	movs	r2, #0
 8009c90:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	2200      	movs	r2, #0
 8009c96:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009c98:	bf00      	nop
 8009c9a:	3754      	adds	r7, #84	@ 0x54
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca2:	4770      	bx	lr
 8009ca4:	effffffe 	.word	0xeffffffe

08009ca8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009ca8:	b480      	push	{r7}
 8009caa:	b085      	sub	sp, #20
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009cb6:	2b01      	cmp	r3, #1
 8009cb8:	d101      	bne.n	8009cbe <HAL_UARTEx_DisableFifoMode+0x16>
 8009cba:	2302      	movs	r3, #2
 8009cbc:	e027      	b.n	8009d0e <HAL_UARTEx_DisableFifoMode+0x66>
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	2201      	movs	r2, #1
 8009cc2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	2224      	movs	r2, #36	@ 0x24
 8009cca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	681a      	ldr	r2, [r3, #0]
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	f022 0201 	bic.w	r2, r2, #1
 8009ce4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009cec:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	2200      	movs	r2, #0
 8009cf2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	68fa      	ldr	r2, [r7, #12]
 8009cfa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	2220      	movs	r2, #32
 8009d00:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	2200      	movs	r2, #0
 8009d08:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009d0c:	2300      	movs	r3, #0
}
 8009d0e:	4618      	mov	r0, r3
 8009d10:	3714      	adds	r7, #20
 8009d12:	46bd      	mov	sp, r7
 8009d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d18:	4770      	bx	lr

08009d1a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009d1a:	b580      	push	{r7, lr}
 8009d1c:	b084      	sub	sp, #16
 8009d1e:	af00      	add	r7, sp, #0
 8009d20:	6078      	str	r0, [r7, #4]
 8009d22:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009d2a:	2b01      	cmp	r3, #1
 8009d2c:	d101      	bne.n	8009d32 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009d2e:	2302      	movs	r3, #2
 8009d30:	e02d      	b.n	8009d8e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	2201      	movs	r2, #1
 8009d36:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	2224      	movs	r2, #36	@ 0x24
 8009d3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	681a      	ldr	r2, [r3, #0]
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	f022 0201 	bic.w	r2, r2, #1
 8009d58:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	689b      	ldr	r3, [r3, #8]
 8009d60:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	683a      	ldr	r2, [r7, #0]
 8009d6a:	430a      	orrs	r2, r1
 8009d6c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009d6e:	6878      	ldr	r0, [r7, #4]
 8009d70:	f000 f850 	bl	8009e14 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	68fa      	ldr	r2, [r7, #12]
 8009d7a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	2220      	movs	r2, #32
 8009d80:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	2200      	movs	r2, #0
 8009d88:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009d8c:	2300      	movs	r3, #0
}
 8009d8e:	4618      	mov	r0, r3
 8009d90:	3710      	adds	r7, #16
 8009d92:	46bd      	mov	sp, r7
 8009d94:	bd80      	pop	{r7, pc}

08009d96 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009d96:	b580      	push	{r7, lr}
 8009d98:	b084      	sub	sp, #16
 8009d9a:	af00      	add	r7, sp, #0
 8009d9c:	6078      	str	r0, [r7, #4]
 8009d9e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009da6:	2b01      	cmp	r3, #1
 8009da8:	d101      	bne.n	8009dae <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009daa:	2302      	movs	r3, #2
 8009dac:	e02d      	b.n	8009e0a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	2201      	movs	r2, #1
 8009db2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	2224      	movs	r2, #36	@ 0x24
 8009dba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	681a      	ldr	r2, [r3, #0]
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	f022 0201 	bic.w	r2, r2, #1
 8009dd4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	689b      	ldr	r3, [r3, #8]
 8009ddc:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	683a      	ldr	r2, [r7, #0]
 8009de6:	430a      	orrs	r2, r1
 8009de8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009dea:	6878      	ldr	r0, [r7, #4]
 8009dec:	f000 f812 	bl	8009e14 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	68fa      	ldr	r2, [r7, #12]
 8009df6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	2220      	movs	r2, #32
 8009dfc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	2200      	movs	r2, #0
 8009e04:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009e08:	2300      	movs	r3, #0
}
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	3710      	adds	r7, #16
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	bd80      	pop	{r7, pc}
	...

08009e14 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009e14:	b480      	push	{r7}
 8009e16:	b085      	sub	sp, #20
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d108      	bne.n	8009e36 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	2201      	movs	r2, #1
 8009e28:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	2201      	movs	r2, #1
 8009e30:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009e34:	e031      	b.n	8009e9a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009e36:	2310      	movs	r3, #16
 8009e38:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009e3a:	2310      	movs	r3, #16
 8009e3c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	689b      	ldr	r3, [r3, #8]
 8009e44:	0e5b      	lsrs	r3, r3, #25
 8009e46:	b2db      	uxtb	r3, r3
 8009e48:	f003 0307 	and.w	r3, r3, #7
 8009e4c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	689b      	ldr	r3, [r3, #8]
 8009e54:	0f5b      	lsrs	r3, r3, #29
 8009e56:	b2db      	uxtb	r3, r3
 8009e58:	f003 0307 	and.w	r3, r3, #7
 8009e5c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009e5e:	7bbb      	ldrb	r3, [r7, #14]
 8009e60:	7b3a      	ldrb	r2, [r7, #12]
 8009e62:	4911      	ldr	r1, [pc, #68]	@ (8009ea8 <UARTEx_SetNbDataToProcess+0x94>)
 8009e64:	5c8a      	ldrb	r2, [r1, r2]
 8009e66:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009e6a:	7b3a      	ldrb	r2, [r7, #12]
 8009e6c:	490f      	ldr	r1, [pc, #60]	@ (8009eac <UARTEx_SetNbDataToProcess+0x98>)
 8009e6e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009e70:	fb93 f3f2 	sdiv	r3, r3, r2
 8009e74:	b29a      	uxth	r2, r3
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009e7c:	7bfb      	ldrb	r3, [r7, #15]
 8009e7e:	7b7a      	ldrb	r2, [r7, #13]
 8009e80:	4909      	ldr	r1, [pc, #36]	@ (8009ea8 <UARTEx_SetNbDataToProcess+0x94>)
 8009e82:	5c8a      	ldrb	r2, [r1, r2]
 8009e84:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009e88:	7b7a      	ldrb	r2, [r7, #13]
 8009e8a:	4908      	ldr	r1, [pc, #32]	@ (8009eac <UARTEx_SetNbDataToProcess+0x98>)
 8009e8c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009e8e:	fb93 f3f2 	sdiv	r3, r3, r2
 8009e92:	b29a      	uxth	r2, r3
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8009e9a:	bf00      	nop
 8009e9c:	3714      	adds	r7, #20
 8009e9e:	46bd      	mov	sp, r7
 8009ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea4:	4770      	bx	lr
 8009ea6:	bf00      	nop
 8009ea8:	08009f50 	.word	0x08009f50
 8009eac:	08009f58 	.word	0x08009f58

08009eb0 <memset>:
 8009eb0:	4402      	add	r2, r0
 8009eb2:	4603      	mov	r3, r0
 8009eb4:	4293      	cmp	r3, r2
 8009eb6:	d100      	bne.n	8009eba <memset+0xa>
 8009eb8:	4770      	bx	lr
 8009eba:	f803 1b01 	strb.w	r1, [r3], #1
 8009ebe:	e7f9      	b.n	8009eb4 <memset+0x4>

08009ec0 <__libc_init_array>:
 8009ec0:	b570      	push	{r4, r5, r6, lr}
 8009ec2:	4d0d      	ldr	r5, [pc, #52]	@ (8009ef8 <__libc_init_array+0x38>)
 8009ec4:	4c0d      	ldr	r4, [pc, #52]	@ (8009efc <__libc_init_array+0x3c>)
 8009ec6:	1b64      	subs	r4, r4, r5
 8009ec8:	10a4      	asrs	r4, r4, #2
 8009eca:	2600      	movs	r6, #0
 8009ecc:	42a6      	cmp	r6, r4
 8009ece:	d109      	bne.n	8009ee4 <__libc_init_array+0x24>
 8009ed0:	4d0b      	ldr	r5, [pc, #44]	@ (8009f00 <__libc_init_array+0x40>)
 8009ed2:	4c0c      	ldr	r4, [pc, #48]	@ (8009f04 <__libc_init_array+0x44>)
 8009ed4:	f000 f818 	bl	8009f08 <_init>
 8009ed8:	1b64      	subs	r4, r4, r5
 8009eda:	10a4      	asrs	r4, r4, #2
 8009edc:	2600      	movs	r6, #0
 8009ede:	42a6      	cmp	r6, r4
 8009ee0:	d105      	bne.n	8009eee <__libc_init_array+0x2e>
 8009ee2:	bd70      	pop	{r4, r5, r6, pc}
 8009ee4:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ee8:	4798      	blx	r3
 8009eea:	3601      	adds	r6, #1
 8009eec:	e7ee      	b.n	8009ecc <__libc_init_array+0xc>
 8009eee:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ef2:	4798      	blx	r3
 8009ef4:	3601      	adds	r6, #1
 8009ef6:	e7f2      	b.n	8009ede <__libc_init_array+0x1e>
 8009ef8:	08009f68 	.word	0x08009f68
 8009efc:	08009f68 	.word	0x08009f68
 8009f00:	08009f68 	.word	0x08009f68
 8009f04:	08009f6c 	.word	0x08009f6c

08009f08 <_init>:
 8009f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f0a:	bf00      	nop
 8009f0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f0e:	bc08      	pop	{r3}
 8009f10:	469e      	mov	lr, r3
 8009f12:	4770      	bx	lr

08009f14 <_fini>:
 8009f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f16:	bf00      	nop
 8009f18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f1a:	bc08      	pop	{r3}
 8009f1c:	469e      	mov	lr, r3
 8009f1e:	4770      	bx	lr
